#ifdef hide 				; ChrStr
.NOLIST
#endif

;=================================================================== CHRSTR ===========
;*  ChrCopy              Output characters from input (mem/device) to output(Mem/device)
;*  ChrIn                Read character from input device (KBD,COM..) -> CHRGOT
;*  ChrInit              Copy ZPg code, Vectors, Init print flags, Wr to STRBUF
;*  ChrOut               Send character to output device (SCR,COM..)
;*  ChrRd_               Read character from memory (++ZRd)->A->CHRGOT  (ZPg routine)
;*  ChrWr                Write Character to memory  A -> (ZWr++) , 00->(ZWr)
;*  GetChr               Input character from Mem/IO -> A, CHRGOT
;*  Input                Read from Mem/IO and place in INBUF, until CR
;*  InputIO              Input INBUF from IO
;*  InputIOEcho          Input INBUF from IO, echo chars to IO
;*  InputText            Input text from console to INBUF, prompt char is in A
;*  IsAlpha              returns T/F if .A is a Alpha A-Z
;*  IsAlphaNumeric       returns true if .A is 0-9,A-Z
;*  IsDigit              returns T/F if .A is a digit 0..9
;*  PrStr                Print string pointed to by ZPtr [A], last Y->ZTmp
;*  PrStrAX              Print string at AX [A] -> PutChr -> Mem/IO
;*  PutChr               Print character to Mem/IO
;*  PutNull              write terminating null to Mem/IO
;*m BR_NBCD(tgt)         Branch to tgt if BCD=0
;*m BR_ND7(tgt)          Branch to tgt if MRK=0 (end with bit 7)
;*m BR_NRD(tgt)          Branch to tgt if Read=0
;*m BR_NWR(tgt)          Branch to tgt if Write=0
;*m PR_ALL()             Term Null F5=0 Term null only
;*m PR_ASCII()           Term Non-ASCII F5=1 Non-ASCII term
;*m PR_BCD_OFF()         HEX out  F4=0 HEX 0-9ABCDEF
;*m PR_BCD_ON()          BCD out  F4=1 BCD 0-9+-e.E
;*m PR_ECHO_OFF()        No Echo  F3=0
;*m PR_ECHO_ON()         ECHO the input F3=1 -> Chr
;*m PR_NECHO(tgt)        Branch to tgt if ECHO=0
;*m PR_NZSPC(tgt)        Branch to tgt if ZSPC=0
;*m PR_NZSUP(tgt)        Branch to tgt if ZSUP=0
;*m PR_RD_IO()           Read IO  F6=0 ChrIn
;*m PR_RD_MEM()          Read memory F6=1 ChrRd
;*m PR_WR_IO()           Write IO F7=0 ChrOut
;*m PR_WR_MEM()          Write memory F7=1 ChrWr
;*m PR_ZSPC_OFF()        Leading zeros stay
;*m PR_ZSPC_ON()         Blank leading zeroes
;*m PR_ZSUP_OFF()        Leading zeros stay
;*m PR_ZSUP_ON()         Suppress leading zeroes
;*
; ZPrFlg = Flag controls
 		;-- 0		1
; Bit7 PutChr	ChrOut 	IO	ChrWr MEM
; Bit6 GetChr	ChrIn  	IO	ChrRd MEM
; Bit5 Term	NULL 		Non-ASCII term
; Bit4 BCD	'0..9ABCDEF'	'0..9+-e.E '
; Bit3 Echo     No		Yes->PutChr
; Bit2 NL	no Cr LF	Need CR LF
; Bit1 ZSpc	' '		Suppressed
; Bit0 ZSup	'0'		Suppress leading zeros

;----------------------------------------------- 7:Wr/Out
; BR_WR(tgt) Branch to tgt if Write=1
#define BR_WR(tgt) 	BBS7 ZPrFlg,tgt

; BR_NWR(tgt)	Branch to tgt if Write=0
#define BR_NWR(tgt) 	BBR7 ZPrFlg,tgt

; PR_WR_MEM()	Write memory	F7=1 ChrWr
#define PR_WR_MEM()	SMB7 ZPrFlg

; PR_WR_IO()	Write IO	F7=0 ChrOut
#define PR_WR_IO()	RMB7 ZPrFlg

;----------------------------------------------- 6:Rd/In
; BR_RD(tgt) Branch to tgt if Read=1
#define BR_RD(tgt) 	BBS6 ZPrFlg,tgt

; BR_NRD(tgt)	Branch to tgt if Read=0
#define BR_NRD(tgt) 	BBR6 ZPrFlg,tgt

; PR_RD_MEM()	Read memory	F6=1 ChrRd
#define PR_RD_MEM()	SMB6 ZPrFlg

; PR_RD_IO()	Read IO		F6=0 ChrIn
#define PR_RD_IO()	RMB6 ZPrFlg

;----------------------------------------------- 5:NonASCII
; BR_D7(tgt)	Branch to tgt if MRK=1 (end with bit 7)
#define BR_D7(tgt) 	BBS5 ZPrFlg,tgt
; BR_ND7(tgt)	Branch to tgt if MRK=0 (end with bit 7)
#define BR_ND7(tgt) 	BBR5 ZPrFlg,tgt

; PR_ASCII()	Term Non-ASCII	F5=1 Non-ASCII term
#define PR_ASCII()	SMB5 ZPrFlg

; PR_ALL()	Term Null	F5=0 Term null only
#define PR_ALL()	RMB5 ZPrFlg

;----------------------------------------------- 4:BCD HEX
; BR_BCD(tgt)	Branch to tgt if BCD=1
#define BR_BCD(tgt) 	BBS4 ZPrFlg,tgt
; BR_NBCD(tgt)	Branch to tgt if BCD=0
#define BR_NBCD(tgt) 	BBR4 ZPrFlg,tgt

; PR_BCD_ON()	BCD out		F4=1 BCD 0-9+-e.E
#define PR_BCD_ON()	SMB4 ZPrFlg

; PR_BCD_OFF()	HEX out		F4=0 HEX 0-9ABCDEF
#define PR_BCD_OFF()	RMB4 ZPrFlg

;----------------------------------------------- 3:Echo
; PR_ECHO(tgt)	Branch to tgt if ECHO=1
#define BR_ECHO(tgt) 	BBS3 ZPrFlg,tgt
; PR_NECHO(tgt)	Branch to tgt if ECHO=0
#define BR_NECHO(tgt) 	BBR3 ZPrFlg,tgt
; PR_ECHO_ON()	ECHO the input	F3=1 -> Chr
#define PR_ECHO_ON()	SMB3 ZPrFlg
; PR_ECHO_OFF()	No Echo		F3=0
#define PR_ECHO_OFF()	RMB3 ZPrFlg


;----------------------------------------------- 1:ZeroBlank
; PR_ZSPC(tgt)	Branch to tgt if ZSPC=1
#define BR_ZSPC(tgt) 	BBS1 ZPrFlg,tgt
; PR_NZSPC(tgt)	Branch to tgt if ZSPC=0
#define BR_NZSPC(tgt) 	BBR1 ZPrFlg,tgt
; PR_ZSPC_ON()	Blank leading zeroes
#define PR_ZSPC_ON()	SMB1 ZPrFlg
; PR_ZSPC_OFF()	Leading zeros stay
#define PR_ZSPC_OFF()	RMB1 ZPrFlg

;----------------------------------------------- 0:ZeroSuppress
; PR_ZSUP(tgt)	Branch to tgt if ZSUP=1
#define BR_ZSUP(tgt) 	BBS0 ZPrFlg,tgt
; PR_NZSUP(tgt)	Branch to tgt if ZSUP=0
#define BR_NZSUP(tgt) 	BBR0 ZPrFlg,tgt
; PR_ZSUP_ON()	Suppress leading zeroes
#define PR_ZSUP_ON()	SMB0 ZPrFlg
; PR_ZSUP_OFF()	Leading zeros stay
#define PR_ZSUP_OFF()	RMB0 ZPrFlg

 		;--
ChrRd 		= $0000 		; increment pointer and fetch, save in CHRGOT
ZRd 		= $07 			; points to character just fetched
CHRGOT 		= $0C 			; most recently fetched character
HLTFLG 		= $0D 			; halt flag 00=run (error code)
ZWr 		= $0E 			; address for ChrWr to write to

ChrReRd 	= $06 			; ReRead (ZRd)->A->CHRGOT

_ChrStr 	= $
;----------------------------------------------- ChrNext
; increment the ZRd pointer (inside the lda) and then fetch the character
ChrRd_: ; Read character from memory (++ZRd)->A->CHRGOT  (ZPg routine)
 		ZINC(ZRd) 		; 0001 0203 0405
 		lda 	$1234 		; 060708
 		sta 	CHRGOT 		; 090A
 		rts 			; 0B

.db $0 					; 0C = CHRGOT
.db $0 					; OD = Halt
.db 0,0 				; 0E0F = ZWr

; Initial values for 8 vectors in here, copied along with the above to zero page
 		;--
.dw ConIn 				; VCHRIN
.dw ConOut 				; VCHROUT
.dw $ABCD
.dw $ABCD
 		;--
.dw $ABCD
.dw $ABCD
.dw $ABCD
.dw $ABCD

;----------------------------------------------- CharInit
ChrInit: ; Copy ZPg code, Vectors, Init print flags, Wr to STRBUF
 		ldx 	#0
ChrInitL 	lda 	ChrRd_,X
 		sta 	$00,X
 		inx
 		cpx 	#$20 		; 16 code, 8 x vectors
 		bne 	ChrInitL
 		;-- reset control flags
 		ZZERO(ZPrFlg) 		; reset flags ChrOut, Hex, NullTerm
 		rts


;----------------------------------------------- PutNull
PutNull: ; write terminating null to Mem/IO
 		lda 	#0
;----------------------------------------------- PutChr
PutChr: ; Print character to Mem/IO
 		;-- don't send null
 		cmp 	#0
 		beq 	ChrWrX
 		;-- output or memory
 		BR_WR(ChrWr) 		;wr=1?
 		;-- 0=fall through to send via ChrOut
;----------------------------------------------- ChrOut
ChrOut: ; Send character to output device (SCR,COM..)
 		jmp 	(VCHROUT)
;----------------------------------------------- ChrWr
ChrWr: ; Write Character to memory  A -> (ZWr++) , 00->(ZWr)
 		sta 	(ZWr)
 		;-- bump to next address
 		ZINC(ZWr)
 		;-- ensure terminating null
 		lda 	#0
 		sta 	(ZWr)
ChrWrX 		rts

;;----------------------------------------------- GetChr
;GetChr: ; Input character from Mem/IO -> A, CHRGOT
; 		BR_NECHO(ChrIn) 	; if echo is off, just go get the char
; 		jsr 	ChrIn	 	; fetch char
; 		beq 	GetChrX 	; Null? ->exit (no echo)
; 		pha 			; save it
; 		jsr 	ChrOut 		; echo to IO out
; 		pla 			; restore
;GetChrX 	rts 			; return

;----------------------------------------------- ChrIn
ChrIn: ; Read character from input device (KBD,COM..) -> CHRGOT
 		jsr 	ChrVecIn 	; call through vecotr
 		sta 	CHRGOT 		; save in CHRGOT
 		rts

ChrVecIn 	jmp 	(VCHRIN)
;----------------------------------------------- ChrRd
;ChrRd is code in Z Page

;----------------------------------------------- InputText
InputText: ; Input text from console to INBUF, prompt char is in A
 		jsr 	ConOut
 		jsr 	InputIOEcho 	; Read from Mem/IO and place in INBUF, until CR
 		jmp 	PrNL

;----------------------------------------------- InputIOEcho
InputIOEcho: ; Input INBUF from IO, echo chars to IO
 		PR_WR_IO()
 		PR_ECHO_ON()
;----------------------------------------------- InputIO
;InputIO: ; Input INBUF from IO
; 		PR_RD_IO() 		; Read from IO
;----------------------------------------------- Input
Input: ; Read from IO and place in INBUF, until CR
 		ldx 	#0
 		txa
 		sta 	ZTmp 		; quote flag
 		sta 	INBUF,x
InputL:  	jsr 	ChrIn 		; get from IO
 		beq 	InputL
 		;-- ignore LF
 		cmp 	#LF
 		beq 	InputL
 		;-- echo if needed
 		BR_NECHO(Input0) 	; if echo is off, just go get the char
 		pha 			; save it
 		jsr 	ChrOut 		; echo to IO out
 		pla 			; restore
Input0 		;-- exit on CR
 		cmp 	#CR
 		beq 	InputX
 		;-- back-space
 		cmp 	#BS
 		bne 	Input1
 		;-- back & null
 		lda 	#0 		; null
 		sta 	INBUF,x 	; place in buf
 		dex 			; back-up a position
 		sta 	INBUF,x 	; place in buf
 		bra 	InputL

Input1 		cmp 	#$22 		; is it a quote?
 		bne 	Input2 		; no, skip
 		;-- yes,  toggle the quote flag in ZTmp 00 <-> $22
 		pha
 		eor 	ZTmp
 		sta 	ZTmp
 		pla
 		;--
Input2 		ldy 	ZTmp
 		bne 	Input3 		; quote mode is on
 		;-- not in quote mode, so convert to upper case
 		jsr 	ToUpper
Input3 		sta 	INBUF,x 	; place in buf
 		;-- check buffer full
 		cpx 	#BUFSZ
 		bpl 	InputX 		; full -> exit
 		;-- move on
 		inx
 		bra 	InputL
InputX 		lda 	#0 		; terminate with a null
 		sta 	INBUF,X
 		sta 	INBUF+1,X
 		rts

ToUpper 	cmp 	#'a'
 		bmi 	ToUpperX 	; <'a'
 		cmp 	#'{'
 		bpl 	ToUpperX
 		;--
 		eor 	#$20
ToUpperX 	rts

;----------------------------------------------- PrStrAX
PrStrAX: ; Print string at AX [A] -> PutChr -> Mem/IO
 		SETAX(ZPtr)
;----------------------------------------------- PrStr
PrStr: ; Print string pointed to by ZPtr [A], last Y->ZTmp
; last index saved into ZTmp
 		phy
 		ldy 	#0
PrStr1 		lda 	(ZPtr),y
 		beq 	PrStrX 		; zero -> exit
 		;-- end of bit 7=1 ?
 		BR_ND7(PrStr2) 		; Stop=Off, skip bit test
 		bmi 	PrStrX 		; bit 7 set -> exit
 		and 	#$7F 		; force ascii
 		;--
PrStr2 		jsr 	PutChr 		; print character
 		iny 			; move to next char
 		bne 	PrStr1 		; loop back (no more than 255 chars)
PrStrX 		sty 	ZTmp
 		ply 			; restore Y
 		rts 			; exit

;----------------------------------------------- IsAlpha
IsAlpha: ; returns T/F if .A is a Alpha A-Z
 		BR_ALT('A',IsFalse)
 		BR_AGE('Z'+1,IsFalse
 		RTN_T()
;----------------------------------------------- IsAlphaNumeric
IsAlphaNumeric: ; returns true if .A is 0-9,A-Z
 		jsr 	IsAlpha
 		BR_T(IsTrue)
 		;-- fall through to check for digit
 		;-- IsDigit
IsDigit: ; returns T/F if .A is a digit 0..9
 		BR_ALT('0',IsFalse)
 		BR_AGE('9'+1,IsFalse)
IsTrue 		RTN_T()
IsFalse 	RTN_F()


.echo "  _ChrStr\t"
.echo $-_ChrStr
.echo "\n"

.LIST 					;-- End of ChrStr

