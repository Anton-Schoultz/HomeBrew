;=================================================================== EVALUATE ========= 
;*  DoAddOp              Do Add/Sub - rts back to inside while
;*  ENumLit              fetch number from the code -> NUM_A -> AX
;*  EvAdd                add
;*  EvDiv                Do Divide
;*  EvFAry               retrieve array variable value -> NumA
;*  EvFBr                Bracketed expression
;*  EvFVar               retrieve variable value -> NumA
;*  EvMul                Do Multiply
;*  EvNumeric            Evaluate numeric expressioni, return T if valid (and CHRGOT is next char)
;*  EvSub                subtract
;*  EvVarLong            Get value of long name variable
;*  Expression           [ Term ]   ( [+/-] Term)*
;*  Factor               Factor = (BoolTerm) | NumLit | NumVar
;*  Match                match character CHRGOT vs .A and move on, error if no match
;*  Term                 Factor [ '*'|'/' Factor]*
;*m MATCH(ch)            Match a Specific Input String and move on to next token
;*
#ifdef hide
.NOLIST
#endif

; MATCH(ch)  Match a Specific Input String and move on to next token
#define MATCH(ch) lda #ch\ jsr Match


_Ev 		= $

;----------------------------------------------- EvNumeric 
EvNumeric: ; Evaluate numeric expressioni, return T if valid (and CHRGOT is next char)
 		;-- for now, just one factor

; 		BREAK(1)

 		jmp 	Expression



;----------------------------------------------- Expression 
Expression: ;  [ Term ]   ( [+/-] Term)*
 		jsr 	IsAddOp
 		bne 	Exp1
 		;-- handle unary as implied zero
 		jsr 	NumZeroA
 		bra 	ExpL
Exp1 		jsr 	Term
 		RTN_IFF() 		; if term is not numeric then exit
 		;-- while isAddOp {
ExpL 		jsr 	IsAddOp
 		bne 	ExpXT
 		jsr 	DoAddOp
 		BR_T(ExpL)
 		;-- }
ExpXT 		RTN_T()

DoAddOp: ; Do Add/Sub - rts back to inside while
 		CASE('+',EvAdd)
 		CASE('-',EvSub)
 		RTN_F()
EvAdd: ; add
 		jsr 	NumPushA
 		jsr 	ChrRd 		; comsume the '+'
 		jsr 	Term
 		jsr 	NumPopB
 		jsr 	NumAdd
 		RTN_T()

EvSub: ; subtract
 		jsr 	NumPushA
 		jsr 	ChrRd 		; consume the '-'
 		jsr 	Term
 		jsr 	NumPopB
 		jsr 	NumSub
 		RTN_T()

; check if CHRGOT is an add op, returns EQ if true
IsAddOp 	lda 	CHRGOT
 		cmp 	#'+'
 		beq 	IsAddOpX
 		cmp 	#'-'
IsAddOpX 	rts




;----------------------------------------------- Term 
Term: ; Factor [ '*'|'/' Factor]*
 		jsr 	Factor

TermL 		jsr 	IsMulOp 	; while IsMulOP
 		bne 	TermX 		; {
 		jsr 	DoMulOp 	;   DoMulOp
 		BR_T(TermL) 		; }
TermX 		RTN_T()

DoMulOp 	CASE('*',EvMul)
 		CASE('/',EvDiv)
 		RTN_F()

EvMul: ; Do Multiply
 		jsr 	NumPushA
 		jsr 	ChrRd
 		jsr 	Factor
 		jsr 	NumPopB
 		jsr 	NumMul
 		RTN_T()

EvDiv: ; Do Divide
 		jsr 	NumPushA
 		jsr 	ChrRd
 		jsr 	Factor
 		jsr 	NumPopB
 		jsr 	NumDiv
 		RTN_T()

; Chekc if CHRGOT is '*' or '/', returnes EQ if true
IsMulOp 	lda 	CHRGOT
 		cmp 	#'*'
 		beq 	IsMulOpX
 		cmp 	#'/'
IsMulOpX 	rts

;----------------------------------------------- Factor 
Factor: ; Factor = (BoolTerm) | NumLit | NumVar
; exits with next token in CHRGOT
 		;-- lda CHRGOT
 		CASE('(',EvFBr) 	; ( BoolTerm )
 		CASE(T_NumVar,EvFVar) 	; variable
 		CASE(T_NumAry,EvFAry) 	; subscripted var
 		CASE(T_NumLit,ENumLit) 	; Literal value
 		RTN_F()

;----------------------------------------------- ENumLit 
ENumLit: ; fetch number from the code -> NUM_A -> AX
; CHRGOT is first char AFTER the stored value
 		jsr 	ChrRd
 		sta 	NUM_A+0
 		jsr 	ChrRd
 		sta 	NUM_A+1
 		jsr 	ChrRd
 		sta 	NUM_A+2
 		jsr 	ChrRd
 		sta 	NUM_A+3
 		jsr 	ChrRd
 		RTN_T()


;----------------------------------------------- EvFVar 
EvFVar: ; retrieve variable value -> NumA
; CHRGOT is first char AFTER the variable spec
 		jsr 	ChrRd 		; get first letter of name
 		bpl 	EvVarLong 	; get value of long name variable
 		and 	#$1F 		; mask for index
 		asl 	a
 		asl 	a 		; index * 4
 		tax
 		lda 	VARTAB,X
 		sta 	NUM_A+_L
 		lda 	VARTAB+1,X
 		sta 	NUM_A+_H
 		lda 	VARTAB+2,X
 		sta 	NUM_A+_U
 		lda 	VARTAB+3,X
 		sta 	NUM_A+_X
 		jsr 	ChrRd 		; get next token into CHRGOT
 		RTN_T() 		; got a value

;----------------------------------------------- EvVarLong 
EvVarLong: ; Get value of long name variable
; TODO
 		jsr 	ChrRd 		; get next token into CHRGOT
 		RTN_T() 		; got a value


;----------------------------------------------- EvFAry 
EvFAry: ; retrieve array variable value -> NumA
; TODO
 		jsr 	ChrRd 		; get next token into CHRGOT
 		RTN_T() 		; got a value

;----------------------------------------------- FaBr 
EvFBr: ; Bracketed expression
 		jsr 	ChrRd 		; consume the '('

 		jsr 	Expression
; 		jsr 	BoolTerm

 		MATCH($29) 		; check for ')'

 		RTN_T() 		; got a value



;----------------------------------------------- Match 
Match: ; match character CHRGOT vs .A and move on, error if no match
 		cmp 	CHRGOT
 		bne 	MatchFail
 		jmp 	ChrRd 		; next token and return
MatchFail 	;
 		pha 			; save expected
 		PRINT("Excpected ")
 		pla
 		pha
 		jsr 	ConOut
 		pla
 		jsr 	PrAHex
 		PRINT(" but got ") 	;
 		lda 	CHRGOT
 		jsr 	PrAHex


 		BREAK(1)







.echo "  _Ev\t\t"
.echo $-_Ev
.echo "\n"
.list


