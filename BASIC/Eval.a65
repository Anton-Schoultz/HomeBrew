;=================================================================== EVALUATE =========
;*  BoolOr               OR
;*  BoolTerm             Boolean AND
;*  BoolXor              XOR
;*  Check                check for a given token in CHRGOT
;*  DoAddOp              Do Add/Sub - rts back to inside while
;*  ENumLit              Fetch number from the code -> NUM_A (unpacked)
;*  EvAdd                add
;*  EvDiv                Do Divide
;*  EvFAry               retrieve array variable value -> NumA
;*  EvFBr                Bracketed expression
;*  EvFVar               retrieve variable value -> NumA
;*  EvMod                Do Modulus
;*  EvMul                Do Multiply
;*  EvNumeric            Evaluate numeric expressioni, return T if valid (and CHRGOT is next char)
;*  EvSub                subtract
;*  EvVarLong            Get value of long name variable
;*  Expression           [ Term ]   ( [+/-] Term)*
;*  Factor               Factor = (BoolTerm) | NumLit | NumVar
;*  Match                match character CHRGOT vs .A and move on, error if no match
;*  NotFactor            Boolean NOT
;*  Relation             Handle relation test < = > <= <> >=
;*  Term                 Factor [ '*'|'/'|'%' Factor]*
;*m MATCH(ch)            Match a Specific Input Character and move on to next token
;*
#ifdef hide
.NOLIST
#endif

; MATCH(ch)  Match a Specific Input Character and move on to next token
#define MATCH(ch) lda #ch\ jsr Match
; CHECK(ch)  Check that CHRGOT matches ch, (Don't move on)
#define CHECK(ch) lda #ch\ jsr Check


_Ev 		= $

;----------------------------------------------- EvNumeric
EvNumeric: ; Evaluate numeric expressioni, return T if valid (and CHRGOT is next char)
 		jsr 	BoolTerm
 		RTN_IFF()
EvNumL 		jsr 	IsOrOp
 		bne 	EvNumX
 		;--
 		jsr 	NumPushA
 		jsr 	DoOrOp
 		bra 	EvNumL
 		;--
EvNumX 		php
 		jsr 	NumPack
 		plp
 		rts

;----------------------------------------------- DoOrOp
DoOrOp 		lda 	CHRGOT
 		CASE(T_OR,BoolOr)
 		CASE(T_XOR,BoolXor)
 		RTN_F()

;----------------------------------------------- IsOrOp
IsOrOp 		; return EQ if 'OR' / 'XOR'
 		lda 	CHRGOT
 		cmp 	#T_OR
 		beq 	IsOrOpX
 		cmp 	#T_XOR
IsOrOpX 	rts

;----------------------------------------------- BoolOr
BoolOr: ; OR
 		jsr 	ChrRd
 		jsr 	BoolTerm
 		jsr 	NumPopB
 		jsr 	NumOr
 		lda 	CHRGOT
 		jsr 	ChrRd
 		RTN_T()

;----------------------------------------------- BoolXor
BoolXor: ; XOR
 		jsr 	ChrRd
 		jsr 	BoolTerm
 		jsr 	NumXor
 		lda 	CHRGOT
 		RTN_T()

;----------------------------------------------- BoolTerm
BoolTerm: ; Boolean AND
 		jsr 	NotFactor
BoolTermL 	lda 	CHRGOT
 		cmp 	#T_And
 		bne 	BoolTermX
 		jsr 	NumPushA
 		jsr 	ChrRd
 		jsr 	NotFactor
 		jsr 	NumPopB
 		jsr 	NumAnd
 		bra 	BoolTermL
BoolTermX 	RTN_T()

;----------------------------------------------- NotFactor
NotFactor: ; Boolean NOT
 		lda 	CHRGOT
 		cmp 	#T_NOT
 		bne 	Relation
 		;--
 		jsr 	ChrRd 		; consume NOT
 		jsr 	Relation
 		;-- negate realtion result 0<->1
 		jsr 	NumNot
 		lda 	CHRGOT
 		RTN_T()

;----------------------------------------------- Relation
Relation: ; Handle relation test < = > <= <> >=
 		jsr 	Expression
 		jsr 	IsRelOp
 		bne 	RelationX
 		;--
 		lda 	CHRGOT 		; fetch the token again
 		pha 			; save the relop on stack
 		;--
 		jsr 	NumPushA
 		jsr 	ChrRd 		; consume op
 		;--
 		jsr 	Expression 	; get second expression
 		jsr 	NumPopB 	;
 		jsr 	NumSub 		; subtract
 		jsr 	NumFlag 	; set flags bassed on result
 		;-- test condition
 		pla 			; recal the rel-op
 		and 	NUM_FLG 	; and with the flag
 		and 	#$7 		; opcode low bits match NUM_FLG
 		beq 	RelFalse 	; zero is false
 		;-- non-zero means true
 		jsr 	NumTrue 	; TRUE = FFFF
 		RTN_T()
RelFalse 	; set NUMA to zero
 		jsr 	NumFalse 	; FALSE = 0
RelationX 	RTN_T()

; return eq if op is one of  <,=,>,<=,<>,>=
IsRelOp 	and 	#$F8
 		cmp 	#$F0
 		rts

;----------------------------------------------- Expression
Expression: ;  [ Term ]   ( [+/-] Term)*
 		jsr 	IsAddOp
 		bne 	Exp1
 		;-- handle unary as implied zero
 		jsr 	NumZeroA
 		bra 	ExpL
Exp1 		jsr 	Term
 		RTN_IFF() 		; if term is not numeric then exit
 		;-- while isAddOp {
ExpL 		jsr 	IsAddOp
 		bne 	ExpXT
 		jsr 	DoAddOp
 		BR_T(ExpL)
 		;-- }
ExpXT 		RTN_T()

DoAddOp: ; Do Add/Sub - rts back to inside while
 		lda 	CHRGOT
 		CASE('+',EvAdd)
 		CASE('-',EvSub)
 		RTN_F()
EvAdd: ; add
 		jsr 	NumPushA
 		jsr 	ChrRd 		; comsume the '+'
 		jsr 	Term
 		jsr 	NumPopB
 		jsr 	NumAdd
 		RTN_T()

EvSub: ; subtract
 		jsr 	NumPushA
 		jsr 	ChrRd 		; consume the '-'
 		jsr 	Term
 		jsr 	NumPopB
 		jsr 	NumSub
 		RTN_T()

; check if CHRGOT is an add op, returns EQ if true
IsAddOp 	lda 	CHRGOT
 		cmp 	#'+'
 		beq 	IsAddOpX
 		cmp 	#'-'
IsAddOpX 	rts


;----------------------------------------------- Term
Term: ; Factor [ '*'|'/'|'%' Factor]*
 		jsr 	Factor

TermL 		jsr 	IsMulOp 	; while IsMulOP
 		bne 	TermX 		; {
 		jsr 	DoMulOp 	;   DoMulOp
 		BR_T(TermL) 		; }
TermX 		RTN_T()

DoMulOp 	lda 	CHRGOT
 		CASE('*',EvMul)
 		CASE('/',EvDiv)
 		CASE('%',EvMod)
 		RTN_F()

EvMul: ; Do Multiply
 		jsr 	NumPushA
 		jsr 	ChrRd
 		jsr 	Factor
 		jsr 	NumPopB
 		jsr 	NumMul
 		RTN_T()

EvDiv: ; Do Divide
 		jsr 	NumPushA
 		jsr 	ChrRd
 		jsr 	Factor
 		jsr 	NumPopB
 		jsr 	NumDiv
 		RTN_T()

EvMod: ; Do Modulus
 		jsr 	NumPushA
 		jsr 	ChrRd
 		jsr 	Factor
 		jsr 	NumPopB
 		jsr 	NumMod
 		RTN_T()

; Chekc if CHRGOT is '*' or '/', returns EQ if true
IsMulOp 	lda 	CHRGOT
 		cmp 	#'*'
 		beq 	IsMulOpX
 		cmp 	#'/'
 		beq 	IsMulOpX
 		cmp 	#'%'
IsMulOpX 	rts

;----------------------------------------------- Factor
Factor: ; Factor = (BoolTerm) | NumLit | NumVar
; exits with next token in CHRGOT
 		lda 	CHRGOT
 		CASE('(',EvFBr) 	; ( BoolTerm )
 		CASE(T_NumVar,EvFVar) 	; variable
 		CASE(T_NumAry,EvFAry) 	; subscripted var
 		CASE(T_NumLit,ENumLit) 	; Literal value
 		RTN_F()

;----------------------------------------------- ENumLit
ENumLit: ; Fetch number from the code -> NUM_A (unpacked)
; CHRGOT is first char AFTER the stored value
 		;-- fetch number from memory
 		jsr 	NumRd
 		jsr 	ChrRd 		; move on
 		RTN_T()

;----------------------------------------------- EvFVar
EvFVar: ; retrieve variable value -> NumA
; CHRGOT is first char AFTER the variable spec
; VARTAB has XX AABBCC format (packed)
; .A is the index, math module multiplies for size as required
 		jsr 	ChrRd 		; get first letter of name
 		bpl 	EvVarLong 	; get value of long name variable
 		and 	#$1F 		; mask for index
 		jsr 	NumGet 	; retrieve simple variable [A]
 		jsr 	ChrRd 		; get next token into CHRGOT
 		RTN_T() 		; got a value

;----------------------------------------------- EvVarLong
EvVarLong: ; Get value of long name variable
; TODO
 		jsr 	ChrRd 		; get next token into CHRGOT
 		;--
 		RTN_T() 		; got a value


;----------------------------------------------- EvFAry
EvFAry: ; retrieve array variable value -> NumA
; TODO
 		jsr 	ChrRd 		; get next token into CHRGOT
 		;--
 		RTN_T() 		; got a value

;----------------------------------------------- FaBr
EvFBr: ; Bracketed expression
 		jsr 	ChrRd 		; consume the '('
 		jsr 	BoolTerm
 		MATCH($29) 		; check for ')'
 		RTN_T() 		; got a value

;----------------------------------------------- Check
Check: ; check for a given token in CHRGOT
 		cmp 	CHRGOT
 		bne 	MatchFail
 		rts

;----------------------------------------------- Match
Match: ; match character CHRGOT vs .A and move on, error if no match
 		cmp 	CHRGOT
 		bne 	MatchFail
 		jmp 	ChrRd 		; next token and return
MatchFail 	; expected in A
 		ldy 	CHRGOT 		; got in Y
 		ldx 	#ERR_EXPECTED
 		jmp 	Error


.echo "  _Eval\t\t"
.echo $-_Ev
.echo "\n"
.list


