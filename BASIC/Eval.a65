;=================================================================== EVALUATE =========
;*  ENumLit              fetch number from the code -> NUM_A -> AX
;*  EvFAry               retrieve array variable value -> NumA
;*  EvFBr                Bracketed expression
;*  EvFVar               retrieve variable value -> NumA
;*  EvNum2Str            convert numeric result NUM_A ->  formated string and append to STRBUF
;*  EvStr                Evuate a string expression [T_StrLit|T_NumLit]
;*  EvStr2Num            Parse number from STRBUF
;*  EvVarLong            Get value of long name variable
;*  Factor               Factor = (BoolTerm) | NumLit | NumVar
;*  Match                match character CHRGOT vs .A and move on, error if no match
;*
#ifdef hide
.NOLIST
#endif

; Match a Specific Input String and move on to next token
#define MATCH(ch) lda #ch\ jsr Match


_Ev 		= $

;----------------------------------------------- Factor
Factor: ; Factor = (BoolTerm) | NumLit | NumVar
 		CASE('(',EvFBr) 	; ( BoolTerm )
 		CASE(T_NumVar,EvFVar) 	; variable
 		CASE(T_NumAry,EvFAry) 	; subscripted var
 		CASE(T_NumLit,ENumLit) 	; Literal value
 		RTN_F()

;----------------------------------------------- ENumLit
ENumLit: ; fetch number from the code -> NUM_A -> AX
 		lda 	#0
 		sta 	NUM_A+2
 		jsr 	ChrRd
 		sta 	NUM_A
 		jsr 	ChrRd
 		sta 	NUM_A+1
 		RTN_T()


;----------------------------------------------- EvFVar
EvFVar: ; retrieve variable value -> NumA
 		jsr 	ChrRd 		; get first letter of name
 		bpl 	EvVarLong 	; get value of long name variable
 		and 	#$3F 		; mask
 		tax
 		lda 	VAR0,X
 		sta 	NUM_A
 		lda 	VAR1,X
 		sta 	NUM_A+1
 		lda 	VAR2,X
 		sta 	NUM_A+2
 		jsr 	ChrRd 		; get next token into CHRGOT
 		RTN_T() 		; got a value

;----------------------------------------------- EvVarLong
EvVarLong: ; Get value of long name variable
; TODO
 		RTN_T() 		; got a value


;----------------------------------------------- EvFAry
EvFAry: ; retrieve array variable value -> NumA
; TODO
 		RTN_T() 		; got a value

;----------------------------------------------- FaBr
EvFBr: ; Bracketed expression
 		jsr 	ChrRd 		; consume the '('
; 		jsr 	BoolTerm
 		MATCH($29) 		; check for ')'
 		RTN_T() 		; got a value



;----------------------------------------------- Match
Match: ; match character CHRGOT vs .A and move on, error if no match
 		cmp 	CHRGOT
 		bne 	MatchFail
 		jmp 	ChrRd 		; next tokena nd return
MatchFail 	;
 		PRINT("Excpected char not found")
 		BREAK(1)



;-----------------------------------------------
EvStr: ; Evuate a string expression [T_StrLit|T_NumLit]
 		jsr 	StrClr 		; clear the result

EvStrL 		; check the token
 		lda 	CHRGOT
 		;-- string Value ?
 		jsr 	IsStrValue
 		BR_F(EvStr1)


; 		BR_ANE(T_StrLit,EvStr1)
; 		jsr 	StrLit 		; append litteral
; 		bra 	EvStrNxt




EvStr1 		; Numeric value?
 		jsr 	Factor 		; return false if not
 		BR_F(EvStr2)
 		bra 	EvStrNxt

; 		BR_ANE(T_NumLit,EvStr2)
; 		jsr 	ENumLit 	; get the number value
 		;--
; 		jsr 	EvNum2Str 	; convert, format & append
; 		bra 	EvStrNxt


EvStr2
; RIGHT$	-> StrTail
; LEFT$		-> StrHead

; if not known, just return (it will be in CHRGOT for caller to deal with)
 		rts

EvStrNxt 	;-- next token
 		jsr 	ChrRd
 		bne 	EvStrL
 		rts

;----------------------------------------------- EvNum2Str
EvNum2Str: ; convert numeric result NUM_A ->  formated string and append to STRBUF
 		jsr 	NumCvt 		; convert NUM_A -> NUM_BUF
 		jsr 	NumFmt 		; format (Zeroes)
 		jmp 	StrAddNum 	; STRBUF += NUM_BUF






;----------------------------------------------- EvStr2Num
EvStr2Num: ; Parse number from STRBUF

#include "EvFactor.a65"


.echo "  _Ev\t\t"
.echo $-_Ev
.echo "\n"
.list


