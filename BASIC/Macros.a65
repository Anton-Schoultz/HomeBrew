;=================================================================== MACROS =========== 
;*m BR_AEQ(n,tgt)        if(A==n) branch -> tgt
;*m BR_AGE(n,tgt)        if(A>=n) branch -> tgt
;*m BR_AGT(n,tgt)        if(A>n) branch -> tgt
;*m BR_ALE(n,tgt)        if(A<=n) branch -> tgt
;*m BR_ALT(n,tgt)        if(A<n) branch -> tgt
;*m BR_ANE(n,tgt)        if(A!=n) branch -> tgt
;*m BR_F(tgt)            branch to tgt if ERROR (Carry=0)
;*m BR_GE(tgt)           bcs tgt
;*m BR_GT(tgt)           beq $+4\ bcs tgt
;*m BR_LE(tgt)           bmi tgt\ beq tgt
;*m BR_LT(tgt)           bmi tgt
;*m BR_NE(tgt)           bne tgt
;*m BR_T(tgt)            branch to tgt if OK (Carry=1)
;*m CASE(v,tgt)          if .A==v then jump to tgt
;*m GETAX(p)             Fetch 16 bit value from address into AX (p)->A, (p+1)->X
;*m HALT()               Stop simulator
;*m HIGH(m)              High byte 1
;*m Int(name)            Reserve 2 bytes for variable name
;*m Long(name)           Reserve 4 bytes for variable name
;*m MZERO(a)             Zero memory at address
;*m NCASE(v,tgt)         if .A!=v then jump to tgt
;*m PULLAXY()            Pulls Y,X,A
;*m RTN_F()              return ERROR (Carry=0)
;*m RTN_IFF()            return if false (C=0)
;*m RTN_IFT()            return if true (C=1)
;*m RTN_T()              return OK (Carry=1)
;*m SETAX(p)             Stores 16 bit value (AX) into address A->(p), X->(p+1)
;*m Short(name)          Reserve 1 byte for variable name
;*m Stop(n)              Stop interrupt with data byte read in Irq Rtn
;*m UPPER(m)             Upper byte 2
;*m ZADD(r,n)            r = r+n
;*m ZADD3(r,n)           r = r+n
;*m ZCPY(zTo,zFr)        Coppies z-pg pair from zFr to zTo
;*m ZCPY3(zTo,zFr)       Coppies 3 bytes from zFr to zTo
;*m ZCPY4(zTo,zFr)       Coppies 4 bytes from zFr to zTo
;*m ZCPY7(zTo,zFr)       Coppies 7 bytes from zFr to zTo
;*m ZDEC(z)              Decrement z-pg pair at z,z+1
;*m ZINC(z)              Increment z-pg pair at z,z+1
;*m ZSL(z)               Shift Z,z+1 left (*2)
;*m ZSL3(z)              Shift Z,z+1 left (*2)
;*m ZSR(z)               Shift Z,z+1 right (/2)
;*m ZSR(z)               Shift Z,z+1 right (/2)
;*m ZSUB(r,n)            r = r-n
;*m ZSUB3(r,n)           r = r-n
;*
#ifdef hide
.NOLIST
#endif

; 00=BRK x, 02=NOP x

; pause is dynamic halt - clv \ bvc self
#define PAUSE() clv \ .db $50,$FE \ clv

; Stop(n) Stop interrupt with data byte read in Irq Rtn
#DEFINE Stop(n) .db $00,n \ nop
; #DEFINE Stop(n) .db $02,n \ nop

; HALT() Stop simulator
#DEFINE HALT()  .db $DB

#DEFINE THROW(n)  .db $DB

;----------------------------------------------- Alignment 
; align to next n (power of 2)
#DEFINE ALIGN(n) .org (($/n + 1) * n)
; align to start of new page
#DEFINE PAGE()  ALIGN(256) 		;.org (($+256) & $FF00)
; align to next 16
#DEFINE PARAGRAPH() ALIGN(16) 		;.org (($+16) & $FFF0)


;----------------------------------------------- Instructions 
; STZ does not assemble correctly, so use this inplace for now (replace with STZ z once fixed)

; ZZERO(z)	Zero a z-pg z
#define ZZERO(z) 	.db $64, z
; MZERO(a) 	Zero memory at address
#define MZERO(adr)	.db $9c, LOW(adr), HIGH(adr)
;----------------------------------------------- LOW,HIGH,UPPER 

; LOW(m)	Low byte	0
#DEFINE LOW(m)  (m & $FF)

; HIGH(m)	High byte	1
#DEFINE HIGH(m)  m>>8

; UPPER(m)	Upper byte	2
#DEFINE UPPER(m) m>>16
;----------------------------------------------- VarDef 
; Var(name,sz)	Reserve sz bytes for variable name (uses .block)
#define Var(name,sz) name .block sz
; Short(name)	Reserve 1 byte for variable name
#define Short(name) name .block 1
; Int(name)	Reserve 2 bytes for variable name
#define Int(name) name .block 2
; Long(name)	Reserve 4 bytes for variable name
#define Long(name) name .block 4
;----------------------------------------------- Stack 
; PUSHAXY()	Pushes A,X,Y
#DEFINE PUSHAXY() pha \ phx \ phy
; PULLAXY()	Pulls Y,X,A
#DEFINE PULLAXY() ply \ plx \ pla
;----------------------------------------------- ZPg 
; ZSET(z,m)	Sets z-pg pair z,z+1 to value m
#DEFINE ZSET(z,m) lda #(m) \ sta z \ lda #HIGH(m) \ sta z+1
; ZCPY(zTo,zFr)	Coppies z-pg pair from zFr to zTo
#DEFINE ZCPY(zTo,zFr) lda zFr \ sta zTo \ lda zFr+1 \ sta zTo+1
; ZCPY3(zTo,zFr) Coppies 3 bytes from zFr to zTo
#DEFINE ZCPY3(zTo,zFr) lda zFr\ sta zTo\ lda zFr+1\ sta zTo+1\ lda zFr+2\ sta zTo+2
; ZCPY4(zTo,zFr) Coppies 4 bytes from zFr to zTo
#DEFINE ZCPY4(zTo,zFr) lda zFr\ sta zTo\ lda zFr+1\ sta zTo+1\ lda zFr+2\ sta zTo+2\ lda zFr+3\ sta zTo+3
; ZCPY7(zTo,zFr) Coppies 7 bytes from zFr to zTo
#DEFINE ZCPY7(zTo,zFr) lda zFr\ sta zTo\ lda zFr+1\ sta zTo+1\ lda zFr+2\ sta zTo+2\ lda zFr+3\ sta zTo+3\ lda zFr+4\ sta zTo+4\ lda zFr+5\ sta zTo+5\ lda zFr+6\ sta zTo+6



; ZINC(z)	Increment z-pg pair at z,z+1
#DEFINE ZINC(z) inc z \ bne $+4 \ inc z+1

; ZDEC(z)	Decrement z-pg pair at z,z+1
#DEFINE ZDEC(z) dec z \ bpl $+4 \ dec z+1

; ZSL(z) 	Shift Z,z+1 left (*2)
#define ZSL(z)	asl z\ rol z+1
; ZSL3(z) 	Shift Z,z+1 left (*2)
#define ZSL3(z)	asl z\ rol z+1\ rol z+2

; ZSR(z) 	Shift Z,z+1 right (/2)
#define ZSR(z)	clc \ror z+1 \ror z
; ZSR(z) 	Shift Z,z+1 right (/2)
#define ZSR3(z)	clc \ ror z+2 \ ror z+1 \ror z

; ZADD(r,n)	r = r+n
#define ZADD(r,n) clc\ lda r\ adc n\ sta r\ lda r+1\ adc n+1\ sta r+1
; ZADD3(r,n)	r = r+n
#define ZADD3(r,n) clc\ lda r\ adc n\ sta r\ lda r+1\ adc n+1\ sta r+1\ lda r+2\ adc n+2\ sta r+2

; ZSUB(r,n)	r = r-n
#define ZSUB(r,n) sec\ lda r\ sbc n\ sta r\ lda r+1\ sbc n+1\ sta r+1
; ZSUB3(r,n)	r = r-n
#define ZSUB3(r,n) sec\ lda r\ sbc n\ sta r\ lda r+1\ sbc n+1\ sta r+1\ lda r+2\ sbc n+2\ sta r+2


;----------------------------------------------- 16 bit AX 
; LDAX(m) 	Loads AX with 16 bit value, low->A, high->X
#DEFINE LDAX(m) lda #(m) \ ldx #HIGH(m)
; SETAX(p)	Stores 16 bit value (AX) into address A->(p), X->(p+1)
#DEFINE SETAX(p) sta p \ stx p+1
; GETAX(p)	Fetch 16 bit value from address into AX (p)->A, (p+1)->X
#DEFINE GETAX(p) lda p \ ldx p+1

;----------------------------------------------- ASCII Control Codes 
#DEFINE NULL	0
#DEFINE BS 	8
#DEFINE HT 	9
#DEFINE LF 	10
#DEFINE	VT	11
#DEFINE _FF	12
#DEFINE CR 	13
#DEFINE ESC	27
#DEFINE SPC	32
#DEFINE QT	34

;----------------------------------------------- Number format bytes 


; 	LDA #2	; N Z C
; 	CMP #1	;     t
; 	CMP #2	;   t t
; 	CMP #3	; t

; BR_EQ(tgt) beq tgt
#define BR_EQ(tgt) beq tgt
; BR_NE(tgt) bne tgt
#define BR_NE(tgt) bne tgt
; BR_LT(tgt) bmi tgt
#define BR_LT(tgt) bmi tgt
; BR_GE(tgt) bcs tgt
#define BR_GE(tgt) bcs tgt
; BR_LE(tgt) bmi tgt\ beq tgt
#define BR_LE(tgt) bmi tgt\ beq tgt
; BR_GT(tgt) beq $+4\ bcs tgt
#define BR_GT(tgt) beq $+4\ bcs tgt

; BR_AEQ(n,tgt) if(A==n) branch -> tgt
#define BR_AEQ(n,tgt) cmp #n \ beq tgt
; BR_ANE(n,tgt) if(A!=n) branch -> tgt
#define BR_ANE(n,tgt) cmp #n \ bne tgt
; BR_ALT(n,tgt) if(A<n) branch -> tgt
#define BR_ALT(n,tgt) cmp #n \ bmi tgt
; BR_AGE(n,tgt) if(A>=n) branch -> tgt
#define BR_AGE(n,tgt) cmp #n \ bcs tgt
; BR_ALE(n,tgt) if(A<=n) branch -> tgt
#define BR_ALE(n,tgt) cmp #n \ bmi tgt\ beq tgt
; BR_AGT(n,tgt) if(A>n) branch -> tgt
#define BR_AGT(n,tgt) cmp #n \ beq $+4\ bcs tgt


;----------------------------------------------- PSEUDO-CODE 
;; PRINT(str) echo str to output
;#define PRINT(str) jsr _Print_ \ .db str,0
;; PRINT(str) echo str to output, with CR,LF
;#define PRINTLN(str) jsr _Print_ \ .db str,0 \ jsr PrNL
;; print sting and data value
;#define DBUG(str,adr) jsr _Print_ \ .db str,$80 \ .dw adr \ jsr PrNL


; CLS()	Clear screen
#define CLS() lda #_FF \ jsr ChrOut


; PRINT(str) 	Print in-line string
; #define PRINT(str) 	jsr _Print_ \ .db "str",0

; PRINTLN(str) 	Print in-line string with CR,LF
 		;-- #define PRINTLN(str) 	PRINT(str) \ jsr PrNL



; RTN_T() return OK (Carry=1)
#define RTN_T() sec \ rts
; RTN_F() return ERROR (Carry=0)
#define RTN_F() clc \ rts

; RTN_IFF() return if false (C=0)
#define RTN_IFF() bcs $+3\ rts

; RTN_IFT() return if true (C=1)
#define RTN_IFT() bcc $+3\ rts


; BR_T(tgt) branch to tgt if OK (Carry=1)
#define BR_T(tgt) bcs tgt
; BR_F(tgt) branch to tgt if ERROR (Carry=0)
#define BR_F(tgt) bcc tgt


; CASE(v,tgt) if .A==v then jump to tgt
#define CASE(v,tgt) cmp #v \ bne $+5 \ jmp tgt

; NCASE(v,tgt) if .A!=v then jump to tgt
#define NCASE(v,tgt) cmp #v \ beq $+5 \ jmp tgt

.LIST 					;-- End of Macros

