#ifdef hide 				; Math_S16
.NOLIST
#endif

;=================================================================== MATH_S16 =========
; calculator stack depth & mask
#define CSTKSZ 16
#define CSTKMSK CSTKSZ-1


#if ($/256) = 0
;----------------------------------------------- Numeric
Short(ZDIV) 	; short divisor 10/100

; these are defined in Vars
; NUMUSZ = size of numeric value once 'unpacked' for calcualtions
; Var(NUM_A,NUMUSZ) 	; Number parsed / Primary accumulator
; Var(NUM_TMP,NUMUSZ) 	; Temp number
; Var(NUM_B,NUMUSZ) 	; Secondary accumulator
; Var(NUM_DIV,NUMUSZ) 	; Scratch divisor
; Short(NUM_SP) 	; calculator stack pointer
; Short(NUM_SGN) 	; sign

#endif

#if ($/256) > $80
;=================================================================== MATH =============
;*  DB_Num               Debug Math Registers NUMA, NUMB
;*  NumAdd               NumA = NumB + NumA
;*  NumAnd               AND
;*  NumCvt               Convert NUM_A to digits in NUM_BUF
;*  NumDH                NUM_A = NUM_A / 100  remainder in A
;*  NumDiv               NumA = NumB / NumA
;*  NumDivZero           divide by zero error
;*  NumFalse             Place FALSE in NUM_A
;*  NumFlag              set flags bassed on unpacked result
;*  NumFmt               Apply formatting to leading zeroes based on ZPrFlg
;*  NumFromInt           Set NUMA to int value in AX (lo,hi)
;*  NumGet               Retrieve simple variable VARNUM[A].. and unpack to internal form
;*  NumMod               NumA = NumB % NumA
;*  NumMul               NumA = NumB * NumA (in unpacked form)
;*  NumNegX              2's compliment the mantissa at X (All 6 bytes)
;*  NumNot               Negate the true/false result in NUM_A
;*  NumOr                OR
;*  NumPack              Pack NUM_A into memory format for storing
;*  NumParsePtr          Parse a number from (ZParse) into NUM_A
;*  NumPrint             Convert number to string & output (via PutChr mem/io)
;*  NumRd                Read from memory (ChrRd) & unpack
;*  NumRnd               Random number 0-32767  -> NUM_AA,B
;*  NumSet               Pack and Store simple VARNUM[A]..
;*  NumSign              Move sign from SGN to mantissa (for Add/Sub)
;*  NumSub               NumA = NumB - NumA
;*  NumToInt             Return int value NUM_AA,B in AX (lo,hi) - sets NUM_FLG
;*  NumTrue              Place TRUE in NUM_A
;*  NumUnSign            Move sign from mantissa to SGN byte (for Mul/Div)
;*  NumUnpack            Unpack memory format into calculation format
;*  NumWr                Pack & write to Memory (ChrWr)
;*  NumXor               XOR
;*  NumZeroA             place zero into NUM_A
;*m MATHOFF()            covert index in .A to an offset in .X based on size of numbers
;*

.list
#ifdef hide
.NOLIST
#endif
; ZTmp
; ZPtr
; ZPrFlg
; NUM_A
; NUM_TMP
; NUM_BUF

; MATHOFF()  covert index in .A to an offset in .X based on size of numbers
#define MATHOFF() asl a\ tax


;----------------------------------------------- NumGet
NumGet: ; Retrieve simple variable VARNUM[A].. and unpack to internal form
; .A is the index, math module multiplies for size as required
; returns with sign byte in A
 		MATHOFF()
 		;-- clear the sign (+ve)
 		lda 	#0
 		sta 	NUM_AS
 		;--
 		lda 	VARNUM,X
 		sta 	NUM_AA
 		;--
 		lda 	VARNUM+1,X
 		sta 	NUM_AB
 		;--
 		jsr 	NumUnpack 	; pad NUMA with zero, extract SGN & 2s exp
 		lda 	NUM_AS 		; 0:+ve
 		rts

;----------------------------------------------- NumSet
NumSet: ; Pack and Store simple VARNUM[A]..
; .A is the index, math module multiplies for size as required
 		MATHOFF()
 		;--
 		phx 			; push offset
 		jsr 	NumPack
 		plx 			; rcall offset
 		;--
 		lda 	NUM_AA
 		sta 	VARNUM,X
 		;--
 		inx
 		lda 	NUM_AB
 		sta 	VARNUM,X
 		rts

;----------------------------------------------- NumUnpack
NumUnpack: ; Unpack memory format into calculation format
;  for S16 this simply means pulling the sign out
 		ldx 	#NUM_A
 		bra 	NumUnSign

;----------------------------------------------- NumPack
NumPack: ; Pack NUM_A into memory format for storing
;  for S16 we just apply the sign to the mantissa
 		ldx 	#NUM_A
 		bra 	NumSign

;----------------------------------------------- NumToInt
NumToInt: ;Return int value of NUMA in AX (lo,hi) - sets NUM_FLG
 		jsr 	NumFlag 	; set flags >,=,<
 		jsr 	NumPack
 		lda 	NUM_AA 		; lo->.A
 		ldx 	NUM_AB 		; hi->.X
 		rts

;----------------------------------------------- NumFromInt
NumFromInt: ;Set NUMA to int value in AX (lo,hi)
 		sta 	NUM_AA
 		stx 	NUM_AB
 		lda 	#0 		; assume +v
 		sta 	NUM_AS
 		bra 	NumUnpack

;----------------------------------------------- NumSign
NumSign: ; Move sign from SGN to mantissa (for Add/Sub)
 		lda 	FPS,X 		; sign byte
 		bpl 	NumNegXX 	; positive so nothing to change
 		lda 	#0
 		sta 	FPS,X 		; clear sign byte
 		bra 	NumNegX 	; complement mantissa

;----------------------------------------------- NumUnSign
NumUnSign: ; Move sign from mantissa to SGN byte (for Mul/Div)
 		lda 	FPS,X 		; get sign
 		bmi 	NumNegXX 	; already -ve so leave it alone
 		;--
 		lda 	FPB,X 		; get high bit B.7
 		bpl 	NumNegXX 	; positive -> leave it
 		;--
 		lda 	#$FF
 		sta 	FPS,X 		; set sign bit in SGN
 		;-- fall through to complement mantissa
;----------------------------------------------- NumNegX
NumNegX: ; 	; 2's compliment the mantissa at X (All 6 bytes)
 		;-- compliment
 		lda 	#$FF
 		eor 	FPA,X
 		sta 	FPA,X
 		lda 	#$FF
 		eor 	FPB,X
 		sta 	FPB,X
 		;-- increment
 		inc 	FPA,X
 		bne 	NumNegXX
 		inc 	FPB,X
 		bne 	NumNegXX
 		;--
NumNegXX 	RTN_T()

;----------------------------------------------- NumParsePtr
NumParsePtr: ;  Parse a number from (ZParse) into NUM_A
; Returns Y as offest to char after the number
; for S16 use NumParse = Parse Integer from source to NUM_AA (returns value in AX)
 		lda 	#0
 		tay 			; Y=0
 		sta 	NUM_AS
 		lda 	(ZParse),Y
 		cmp 	#'-'
 		bne 	NumParse0
 		dec 	NUM_AS 		; make it $FF
 		;-- read over the '-'
 		iny
 		;-- parse number from input
NumParse0 	lda 	#0
 		sta 	NUM_AA
 		sta 	NUM_AB
NumParseL 	;- term NULL ?
 		lda 	(ZParse),Y
 		beq 	NumParseX 	; yes -> done
NumParse1 	jsr 	IsDigit 	; A is preserved
 		BR_F(NumParseX) 	; no more digits
 		and 	#$0F 		; convert digit to value
 		;-- NUM_AA = NUM_AA * 10 (preserves AXY)
 		phx
 		pha
 		lda 	NUM_AA 		; AX <= n
 		ldx 	NUM_AB
 		asl 	NUM_AA
 		rol 	NUM_AB 		; 2n
 		asl 	NUM_AA
 		rol 	NUM_AB 		; 4n
 		;-- NUM_AA + AX => NUM_AA (5n)
 		clc
 		adc 	NUM_AA
 		sta 	NUM_AA
 		txa
 		adc 	NUM_AB
 		sta 	NUM_AB
 		;-- x2 = 10n
 		asl 	NUM_AA
 		rol 	NUM_AB
 		pla
 		plx
 		;-- now add the digit value
 		clc 			; and add to NUM_AA
 		adc 	NUM_AA
 		sta 	NUM_AA
 		bcc 	NumParseAX
 		inc 	NUM_AB
NumParseAX 	;- next character
 		iny
 		lda 	(ZParse),Y
 		sta 	CHRGOT
 		bra 	NumParseL
NumParseX 	rts

; ----------------------------------------------- NumCvt
; -- NumCvt: ; Convert NUM_A to digits in NUM_BUF
; $3412 => 13330 in 2726 cycles   (5028 bytes)
;  		ldx 	#NUM_A
;  		jsr 	NumUnSign 	; extract sign
;  		;-- fill buffer with zeroes
;  		ldx 	#CVTSZ-1
;  		lda 	#0
;  		sta 	NUM_BUF,x
;  		dex
;  		sta 	NUM_BUF,x
;  		dex
 		;-- NumCvtL 	;- num/10 remainder .A as digit
; 		jsr 	NumDT 		; div NUM_TMP by 10, remainder in A
; 		ora 	#'0' 		; convert remainder to a digit
; 		sta 	NUM_BUF,X 	; store the digit
; 		dex 			; back-up one pos to the left
; 		bpl 	NumCvtL 	; loop until done
 		;-- NumCvtS 	;-- Place sign in NR[0] based on SGN
;  		lda 	#'0' 		; leading zero
;  		sta 	NUM_BUF
;  		;-- check if negative
;  		lda 	NUM_AS 		; extracted sign
;  		bpl 	NumCvtX
;  		lda 	#'-' 		; replace by '-' for negative
;  		sta 	NUM_BUF 	; place sign at Res[0]
 		;-- NumCvtX 	rts


;----------------------------------------------- NumCvt
NumCvt: ; Convert NUM_A to digits in NUM_BUF
; NUM should be in unpacked form (with sign extracted)
; $3412 => 13330 in 1514 cycles   (5055 bytes)
 		ldx 	#NUM_A
 		jsr 	NumUnSign 	; extract sign
 		;-- fill buffer with zeroes
 		ldx 	#CVTSZ-1
 		lda 	#0
 		sta 	NUM_BUF,x
 		dex
 		sta 	NUM_BUF,x
 		dex
NumCvtL 	;- num/100 remainder .A as 0-99
 		jsr 	NumDH 		; div NUM_TMP by 10, remainder in A
 		phx
 		tax
 		lda 	BinTbl,x
 		plx
 		pha
 		and 	#$f
 		ora 	#'0' 		; convert remainder to a digit
 		sta 	NUM_BUF,X 	; store the digit
 		dex 			; back-up one pos to the left
 		pla
 		lsr 	a
 		lsr 	a
 		lsr 	a
 		lsr 	a
 		ora 	#'0' 		; convert remainder to a digit
 		sta 	NUM_BUF,X 	; store the digit
 		dex 			; back-up one pos to the left
 		bpl 	NumCvtL 	; loop until done
NumCvtS 	;-- Place sign in NR[0] based on SGN
 		lda 	#'0' 		; leading zero
 		sta 	NUM_BUF
 		;-- check if negative
 		lda 	NUM_AS 		; extracted sign
 		bpl 	NumCvtX
 		lda 	#'-' 		; replace by '-' for negative
 		sta 	NUM_BUF 	; place sign at Res[0]
NumCvtX 	rts

;----------------------------------------------- NumDH
NumDH: ; NUM_A = NUM_A / 100  remainder in A
 		phx
 		phy
 		lda 	#100
 		sta 	ZDIV
 		bra 	NumDN

;----------------------------------------------- NumDT
NumDT 		; NUM_A = NUM_A / 10 (48Bit), remainder in A
 		phx
 		phy
 		lda 	#10
 		sta 	ZDIV 		; set divisor to 10
NumDN 		; NUM_A = NUM_A / ZDIV (48bit), remainder in A [AXY]
 		ldy 	#16 		; no of bits
 		lda 	#0
 		clc
NumDN1 		rol 	A
 		cmp 	ZDIV
 		bcc 	NumDN2
 		sbc 	ZDIV
NumDN2 		rol 	NUM_AA 		; L 1
 		rol 	NUM_AB 		; H 2
 		dey
 		bpl 	NumDN1
 		ply
 		plx
 		rts

;----------------------------------------------- NumFmt
NumFmt: ; Apply formatting to leading zeroes based on ZPrFlg
 		BR_ZSUP(NumSup) 	; TMP = NUM_A
 		;-- suppress leading zeroes
 		BR_ZSPC(NumSpc) 	; blank leading zeroes
 		rts

;----------------------------------------------- NumSup
NumSup 		; removing leading zeroes
 		ldx 	#0
 		ldy 	#0
 		lda 	NUM_BUF
 		cmp 	#'-'
 		bne 	NumSupL
 		inx
 		iny
NumSupL 	lda 	NUM_BUF,y
 		cmp 	#'0'
 		bne 	NumSupC 	; go copy
 		iny
 		cpy 	#(CVTSZ-3) 	; make sure we leave the last digit at least
 		bne 	NumSupL
NumSupC 	lda 	NUM_BUF,y
 		sta 	NUM_BUF,x
 		beq 	NumSupX
 		inx
 		iny
 		bra 	NumSupC
NumSupX 	rts

;----------------------------------------------- NumSpc
NumSpc 		; blank leading zeroes
 		ldy 	#0
 		lda 	NUM_BUF
 		cmp 	#'-'
 		bne 	NumSpcL
 		iny
NumSpcL 	lda 	NUM_BUF,y
 		cmp 	#'0'
 		bne 	NumSpcX 	; go copy
 		lda 	#' '
 		sta 	NUM_BUF,y
 		iny
 		cpy 	#(CVTSZ-3) 	; make sure we leave the last digit at least
 		bne 	NumSpcL
NumSpcX 	rts

;----------------------------------------------- NumRd
NumRd: ; Read from memory (ChrRd) & unpack
; ZRd points to the token before this value
; returns in A=Hi, X=Lo
 		lda 	#0
 		sta 	NUM_AS 		; clear sign (+ve)
 		jsr 	ChrRd
 		sta 	NUM_AA 		; L
 		tax 			; save low in X
 		jsr 	ChrRd
 		sta 	NUM_AB 		; H
NumRdX 		rts

;----------------------------------------------- NumWr
NumWr: ; Pack & write to Memory (ChrWr)
 		lda 	NUM_AS
 		bpl 	NumWr1
 		;-- apply -ve to the 16 bit valuen in NUM_A
 		ldx 	#NUM_A
 		jsr 	NumSign
 		;-- write to memory
NumWr1 		lda 	NUM_AA
 		jsr 	ChrWr
 		lda 	NUM_AB
 		jsr 	ChrWr
 		rts
;----------------------------------------------- NumPrint
NumPrint: ; Convert number to string & output (via PutChr mem/io)
 		jsr 	NumCvt 		; NUM_A to string in NUM_BUF
 		jsr 	NumFmt
 		LDAX(NUM_BUF)
 		jmp 	PrStrAX
; 		lda 	#' '
; 		jmp 	PutChr

;----------------------------------------------- NumFlag
NumFlag: ; set flags bassed on unpacked result
 		;-- Comparisson flags .2> .1= .0<
 		lda 	#0 		; clear all flags
 		sta 	NUM_FLG
 		;--
 		lda 	NUM_AS
 		bpl 	NumFlag1
 		SMB0 	NUM_FLG 	; set bit0:LT
 		bra 	NumFlagX 	; done
NumFlag1 	lda 	NUM_AA
 		ora 	NUM_AB
 		beq 	NumFlag2
 		;-- Not zero, so positive
 		SMB2 	NUM_FLG 	; set bit2:GT
 		bra 	NumFlagX

 		;-- equal
NumFlag2 	SMB1 	NUM_FLG 	; set bit1:EQ

NumFlagX 	;-- exit
 		lda 	NUM_FLG 	; EQ:2
 		cmp 	#2 		; sets Z,C,N
 		rts 			; done

;----------------------------------------------- NumPreAS
; on entry, set NUM_SGN to 00 for add or $80 for subtract
NumPreAS 	; Prepare to Add/Subtract - align & sign
 		ldx 	#NUM_A
 		jsr 	NumSign 	; move sign to mantissa
 		ldx 	#NUM_B
 		jmp 	NumSign

;----------------------------------------------- NumAdd
NumAdd: ; NumA = NumB + NumA
 		jsr 	NumPreAS 	; sign the mantissas
 		clc
 		lda 	NUM_BA
 		adc 	NUM_AA
 		sta 	NUM_AA
 		lda 	NUM_BB
 		adc 	NUM_AB
 		sta 	NUM_AB
 		;--
 		ldx 	#NUM_A
 		jmp 	NumUnSign 	; extract sign again

;----------------------------------------------- NumSub
NumSub: ; NumA = NumB - NumA
 		jsr 	NumPreAS 	; sign the mantissas
 		sec
 		lda 	NUM_BA
 		sbc 	NUM_AA
 		sta 	NUM_AA
 		lda 	NUM_BB
 		sbc 	NUM_AB
 		sta 	NUM_AB
 		;--
 		ldx 	#NUM_A
 		jmp 	NumUnSign 	; extract sign again

;----------------------------------------------- NumPreMD
NumPreMD 	; Prepare for Mul/Div by unsigning both
 		ldx 	#NUM_A
 		jsr 	NumUnSign 	; Sign Man->Exp
 		ldx 	#NUM_B
 		jsr 	NumUnSign 	; Sign Man->Exp
 		;-- work out resultant sign for mul/div
 		lda 	NUM_AS
 		eor 	NUM_BS
 		sta 	NUM_SGN 	; resultant sign
 		;--
 		rts

;----------------------------------------------- NumMul
NumMul: ; NumA = NumB * NumA (in unpacked form)
 		jsr 	NumPreMD 	; pull signs out (make both pos)
 		;-- zero extended result
 		lda 	#0
 		sta 	NUM_AC
 		sta 	NUM_AD
 		ldx 	#16 		; bits in NA
 		;-- Shift NA to the right, lowest bit into CY
 		lsr 	NUM_AB
 		ror 	NUM_AA
 		;--
NumMul1 	bcc 	NumMul2 	;0 or 1?
 		;-- bit is 1 so add
 		clc
 		lda 	NUM_BA
 		adc 	NUM_AC
 		sta 	NUM_AC
 		;--
 		lda 	NUM_BB
 		adc 	NUM_AD
 		sta 	NUM_AD
 		;--
NumMul2 	;shift result right (equivalent to shift B left )
 		clc
 		ror 	NUM_AD
 		ror 	NUM_AC
 		ror 	NUM_AB
 		ror 	NUM_AA
 		;-- loop for each bit
 		dex 			; does not affect CY
 		bne 	NumMul1
 		;-- place thes sign
 		lda 	NUM_SGN
 		sta 	NUM_AS
 		RTN_T()

;----------------------------------------------- NumIncA
NumIncA 	; Increment NUM_A
 		inc 	NUM_AA
 		bne 	NumIncAX
 		inc 	NUM_AB
 		bne 	NumIncAX
 		inc 	NUM_AC
 		bne 	NumIncAX
 		inc 	NUM_AD
 		bne 	NumIncAX
NumIncAX 	rts

;----------------------------------------------- NumMod
NumMod: ; NumA = NumB % NumA
 		jsr 	NumDiv
 		lda 	NUM_TMPA
 		sta 	NUM_AA
 		lda 	NUM_TMPB
 		sta 	NUM_AB
 		RTN_T()

;----------------------------------------------- NumDivZero
NumDivZero: ; divide by zero error
 		ERROR(ERR_DIV0)

;----------------------------------------------- NumDiv
NumDiv: ; NumA = NumB / NumA
 		jsr 	NumPreMD 	; pull signs out (make both pos)
 		;-- place divisor in NUM_DIV
 		ZCPY4(NUM_DIV,NUM_A)
 		;-- check divide by zero
 		lda 	NUM_DIV+FPA
 		ora 	NUM_DIV+FPB
 		beq 	NumDivZero
 		;-- zero result (6 bytes)
 		jsr 	NumZeroA
 		;-- zero TMP
 		sta 	NUM_TMP+FPA
 		sta 	NUM_TMP+FPB
 		sta 	NUM_TMP+FPC
 		;--
 		ldx 	#16 		; bits to divide
NumDivL 	;-- shift a bit from dividend into temp
 		asl 	NUM_BA
 		rol 	NUM_BB
 		;-- now pull the bit into NUM_TMP
 		rol 	NUM_TMPA
 		rol 	NUM_TMPB
 		;-- try subtract divisor from temp TMP=TMP-DIV
 		sec
 		lda 	NUM_TMPA
 		sbc 	NUM_DIVA
 		sta 	NUM_TMPA
 		lda 	NUM_TMPB
 		sbc 	NUM_DIVB
 		sta 	NUM_TMPB
 		;-- if ok, shift 1 into result
 		bcs 	NumDiv2 	; continue C=1
 		;-- subtract failed, put it back TMP=TMP+DIV
 		lda 	NUM_TMPA
 		adc 	NUM_DIVA
 		sta 	NUM_TMPA
 		lda 	NUM_TMPB
 		adc 	NUM_DIVB
 		sta 	NUM_TMPB
 		clc
NumDiv2 	; save result bit
 		rol 	NUM_AA
 		rol 	NUM_AB
;   		rol 	NUM_AC
 		;-- next bit
 		dex
 		bne 	NumDivL
NumDiv8 	;-- round ?
 		;-- place thes sign
 		lda 	NUM_SGN
 		sta 	NUM_AS
 		RTN_T()

;----------------------------------------------- NumAnd
NumAnd: ; AND
 		lda 	NUM_AA
 		and 	NUM_BA
 		sta 	NUM_AA
 		;--
 		lda 	NUM_AB
 		and 	NUM_BB
 		sta 	NUM_AB
 		;--
 		rts

;----------------------------------------------- NumOr
NumOr: ; OR
 		lda 	NUM_AA
 		ora 	NUM_BA
 		sta 	NUM_AA
 		;--
 		lda 	NUM_AB
 		ora 	NUM_BB
 		sta 	NUM_AB
 		;--
 		rts

;----------------------------------------------- NumXor
NumXor: ; XOR
 		lda 	NUM_AA
 		eor 	NUM_BA
 		sta 	NUM_AA
 		;--
 		lda 	NUM_AB
 		eor 	NUM_BB
 		sta 	NUM_AB
 		;--
 		rts


;----------------------------------------------- NumNot
NumNot: ; Negate the true/false result in NUM_A
 		lda 	NUM_AA
 		bne 	NumFalse
NumTrue: ; Place TRUE in NUM_A
 		phx
 		ldx 	#NUM_A
 		lda 	#$FF
 		jmp 	NumPreSet 	; set as FF FFFF

;----------------------------------------------- NumZeroTmp
NumZeroTmp 	; place zero into NUM_TMP
 		phx
 		ldx 	#NUM_TMP
 		bra 	NumZeroX
;----------------------------------------------- NumZeroB
NumZeroB 	; place zero into NUM_B
 		phx
 		ldx 	#NUM_B
 		bra 	NumZeroX
;----------------------------------------------- NumZeroA
NumZeroA: ; place zero into NUM_A
NumFalse: ; Place FALSE in NUM_A
 		phx
 		ldx 	#NUM_A
 		;-- fall through
NumZeroX 	; zero the number at .X (extend version EXP,1,2,3,4,5,6)
 		lda 	#0 		; zero 00 0000
NumPreSet 	sta 	FPA,X
 		sta 	FPB,X
 		sta 	FPC,X
 		sta 	FPS,X
 		plx
 		rts

;----------------------------------------------- NumRnd
NumRnd: ; Random number 0-32767  -> NUM_AA,B
; for 16 bit version randomise in memory, then fetch it
; https://codebase64.org/doku.php?id=base:small_fast_16-bit_prng
; 2048 'magic' numbers, I'm using $ca65
#define rand VARNUM
#define RANDH $ca
#define RANDL $65
 		;-- random sequence in rand,rand+1 = VAR[0}
 		lda 	rand
 		beq 	NumRnd1
 		asl 	rand
 		lda 	rand+1
 		rol 	a
 		bcc 	NumRnd2
NumRnd0 	eor 	#RANDH
 		sta 	rand+1
 		lda 	rand
 		eor 	#RANDL
 		sta 	rand
 		bra 	NumRndX
NumRnd1 	lda 	rand+1
 		beq 	NumRnd0
 		asl 	a
 		beq 	NumRnd2
 		bcs 	NumRnd0
NumRnd2 	sta 	rand+1
 		;-- ora	rand 		; exclude zero
 		;-- beq	NumRnd
NumRndX 	;-- get as a number
 		lda 	#0
 		jsr 	NumGet
 		lda 	NUM_AS
 		bmi 	NumRnd
 		rts


#if _DB_NUM
;=================================================================== DBUG =============
DB_Num: ; Debug Math Registers NUMA, NUMB
 		PUSHALL()

 		PRINT("NUMA:")
 		HEX_SHORT(NUM_AS)
 		HEX_INT(NUM_AA)
 		jsr 	PrNL

 		PRINT("NUMB:")
 		HEX_SHORT(NUM_BS)
 		HEX_INT(NUM_BA)
 		jsr 	PrNL

 		PULLALL()
 		PAUSE()
 		rts
#endif

.echo "  _Math\t\t"
.echo $-_Math
.echo "\n"
.list

#endif
