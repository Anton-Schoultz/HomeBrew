; .nolist
; this lets me select which maths implementation to use

;-----------------------------------------------
;       Subroutines Required
;-----------------------------------------------

;  NumInit              Initialise calculator

;  NumParse             Parse a number from source into NUM_A
;  NumCvt               Convert NUM_A(unpacked) to digits in NUM_BUF
;  NumPrint             Convert number to string & output (via PutChr mem/io)


;  NumAdd               NumA = NumB + NumA
;  NumSub               NumA = NumB + NumA
;  NumMul               NumA = NumB * NumA (in unpacked form)
;  NumDiv               NumA = NumB / NumA

;  NumPushA             Push Num_A onto calculator stack
;  NumPopB              Pop Num_B from the calculator stack

;  NumFmt               Apply formatting to leading zeroes based on ZPrFlg

;  NumZeroA             Place zero into NUM_A

;  NumSet               Set NUM_A to integer value in AX (lo,Hi)

;  NumRd                Read number from memory using ChrRd & unpack to internal form
;  NumWr                Wwrite number value to memory via ChrWr

;  NumGetX              Retrieve simple variable [X] and unpack to internal form
;  NumSetX              Pack and Store simple variable [X]


#if 1
#include "Math_S16.a65"
#else

;----------------------------------------------- Dummy{
#if $>$400

.echo "\n"
.echo "====================================\n"
.echo " WARNING - Maths module is excluded \n"
.echo "====================================\n"
.echo "\n"

;  --------- Usages --------------
NumInit 	; Tok.RunLn - when running a line of code
NumParse 	; Tok.P_Number : parse literal number -> NUM_A (follow by NumWr)

NumCvt 		; X_PrNum to display value
NumPrint 	; L_Number to list number (from P_Number)

NumAdd 		; Eval Add
NumSub 		; Eval Subtract
NumMul 		; Eval Multiply
NumDiv 		; Eval Divide
NumMod 		; Eval Modulus

NumAnd 		; Eval   AND
NumOr 		; Eval   OR
NumXor 		; Eval   XOR
NumNot 		; Eval   Negate the true/false result in NUM_A
NumFlag 	; Eval   set flags bassed on result
NumTrue 	; Eval   Place TRUE in NUM_A
NumFalse 	; Eval   Place FALSE in NUM_A

NumPushA 	; Eval push
NumPopB 	; Eval pop

NumFmt 		; X_PrNum (also uses NumCvt)

NumZeroA 	; Eval

NumRd 		; Eval for literal values
NumWr 		; Tok.P_Number to create a literal

NumGetX 	; Eval to retrieve A-Z variable [X] X is 1..26
NumSetX 	; Eval to store a A-Z variable  [X]




#endif
;----------------------------------------------- }Dummy

#endif
