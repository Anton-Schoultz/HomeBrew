;=================================================================== MATH =============
;*  NumAdd               NumA = NumB + NumA
;*  NumCvt               Convert NUM_A(24Bit) to digits in NUM_BUF
;*  NumDH                NUM_A = NUM_A / 100 (24bit) remainder in A
;*  NumDT                NUM_A = NUM_A / 10 (24Bit), remainder in A [AXY]
;*  NumDigit             NUM_A = NUM_A * 10 + .A
;*  NumDiv               NumA = NumB / NumA
;*  NumFmt               Apply formatting to leading zeroes based on ZPrFlg
;*  NumInit              Initialise calculator
;*  NumMH                NUM_A = NUM_A * 100 (24bit) - preserves AXY, destroys NUM_TMP
;*  NumMT                NUM_A = NUM_A * 10 (24Bit) - preserves AXY, destroys NUM_TMP
;*  NumMul               NumA = NumB * NumA
;*  NumParse             -- parse a number from source into NUM_A - destorys NUM_TMP
;*  NumPopB              Pop Num_B from the calculator stack
;*  NumPushA             Push Num_A onto calculator stack
;*  NumSpc               blank leading zeroes
;*  NumSub               NumA = NumB - NumA
;*  NumSup               removing leading zeroes
;*  NumVal               VAL() Get numeric value (NUM_A) from String (STRBUF)
;*  NumZeroA             place zero into NUM_A
;*  NumZeroB             place zero into NUM_B
;*  NumZeroX             zero the number at .X
;*m HEX_DUMP(adr)        Print hex dump to IO/Mem [Zptr++]
;*
; ZTmp
; ZPtr
; ZPrFlg
; NUM_A
; NUM_TMP
; NUM_BUF

#ifdef hide
.NOLIST
#endif

; HEX_DUMP(adr) Print hex dump to IO/Mem [Zptr++]
#define HEX_DUMP(adr) ZSET(ZPtr,adr) \ jsr HexDump


_Math 		= $
;----------------------------------------------- NumInit
NumInit: ; Initialise calculator
 		lda 	#0
 		sta 	NUM_SP 		; zero the number stack pointer
 		rts



;----------------------------------------------- NumPushA
NumPushA: ; Push Num_A onto calculator stack
 		ldx 	NUM_SP
 		lda 	NUM_A+_L
 		sta 	CSTK0,X
 		lda 	NUM_A+_H
 		sta 	CSTK1,X
 		lda 	NUM_A+_U
 		sta 	CSTK2,X
 		lda 	NUM_A+_X
 		sta 	CSTK3,X
 		inx
 		txa
 		and 	#$0F
 		sta 	NUM_SP
 		rts
;----------------------------------------------- NumPopB
NumPopB: ; Pop Num_B from the calculator stack
 		dec 	NUM_SP
 		lda 	NUM_SP
 		and 	#$0F
 		sta 	NUM_SP
 		tax
 		lda 	CSTK0,X
 		sta 	NUM_B+_L
 		lda 	CSTK1,X
 		sta 	NUM_B+_H
 		lda 	CSTK2,X
 		sta 	NUM_B+_U
 		lda 	CSTK3,X
 		sta 	NUM_B+_X
 		rts

;----------------------------------------------- NumVal
NumVal: ; VAL() Get numeric value (NUM_A) from String (STRBUF)
 		jsr 	NumZeroA
 		ldy 	#255
NumValL 	iny
 		lda 	NUM_BUF,Y 	; term null
 		beq 	NumValX
 		jsr 	IsDigit 	; messes with A
 		BR_F(NumValX) 		; no more digits
 		;-- ; NUM_A = NUM_A * 10 + .A
 		jsr 	NumDigit
NumValAX 	bra 	NumValL 	; next character
NumValX 	ZCPY4(DBUGNUM,NUM_A) 	; just for me to see it !
 		rts
;----------------------------------------------- NumParse
NumParse: ;-- parse a number from source into NUM_A - destorys NUM_TMP
 		jsr 	NumZeroA
NumParseL 	lda 	CHRGOT 		; term null
 		beq 	NumParseX
 		jsr 	IsDigit 	; messes with A
 		BR_F(NumParseX) 	; no more digits
 		;-- NUM_A = NUM_A * 10 + .A
 		jsr 	NumDigit
NumParseAX 	jsr 	GetChr 		; next character
 		bra 	NumParseL
NumParseX 	ZCPY4(DBUGNUM,NUM_A) 	; just for me to see it !
 		rts


;----------------------------------------------- NumZeroB
NumZeroB: ; place zero into NUM_B
 		ldx 	#NUM_B
 		bra 	NumZeroX

;----------------------------------------------- NumZeroA
NumZeroA: ; place zero into NUM_A
 		ldx 	#NUM_A
 		;-- fall through
NumZeroX: ; zero the number at .X
 		lda 	#0 		; zero number
 		sta 	_L,X
 		sta 	_H,X
 		sta 	_U,X
 		sta 	_X,X
 		rts

;----------------------------------------------- NumDigit
NumDigit: ; NUM_A = NUM_A * 10 + .A
 		jsr 	NumMT 		; A*=10
 		and 	#$0F
 		clc
 		adc 	NUM_A+_L
 		sta 	NUM_A+_L
 		bcc 	NumDigitX
 		inc 	NUM_A+_H
 		bcc 	NumDigitX
 		inc 	NUM_A+_U
NumDigitX 	rts

;----------------------------------------------- NumDH
NumDH: ; NUM_A = NUM_A / 100 (24bit) remainder in A
 		lda 	#100
 		sta 	ZDIV
 		bra 	NumDN
;----------------------------------------------- NumDT
NumDT: ; NUM_A = NUM_A / 10 (24Bit), remainder in A [AXY]
; Divide value at NUM_TMP  by 10, remainder in A [AY]
 		lda 	#10
 		sta 	ZDIV 		; set divisor to 10
NumDN 		ldy 	#24 		; 24 bits
 		lda 	#0
 		clc
NumDTa 		rol 	A
 		cmp 	ZDIV
 		bcc 	NumDTb
 		sbc 	ZDIV
NumDTb 		rol 	NUM_A+_L 	; L
 		rol 	NUM_A+_H 	; H
 		rol 	NUM_A+_U 	; U
 		dey
 		bpl 	NumDTa
 		rts

;----------------------------------------------- NumMT
NumMT: ; NUM_A = NUM_A * 10 (24Bit) - preserves AXY, destroys NUM_TMP
 		pha
 		ZCPY3(NUM_TMP,NUM_A) 	; NUM_TMP = NUM_A
 		ZSL3(NUM_A) 		; NUM_A * 2
 		ZSL3(NUM_A) 		; NUM_A * 4
 		ZADD3(NUM_A,NUM_TMP) 	; NUM_A += NUM_TMP  (*5)
 		ZSL3(NUM_A) 		; NUM_A = NUM_A * 10
 		pla
 		rts

;----------------------------------------------- NumMH
NumMH: ; NUM_A = NUM_A * 100 (24bit) - preserves AXY, destroys NUM_TMP
 		pha
 		ZCPY3(NUM_TMP,NUM_A) 	; NUM_TMP = NUM_A  TMP=X
 		ZSL3(NUM_A) 		; NUM_A 2X
 		ZSL3(NUM_A) 		; NUM_A 4X
 		ZSL3(NUM_A) 		; NUM_A 8X
 		ZADD3(NUM_TMP,NUM_A) 	; TMP = 9X
 		ZSL3(NUM_A) 		; NUM_A * 16X
 		ZADD3(NUM_A,NUM_TMP) 	; NUM_A = 16X+9X = 25X
 		ZSL3(NUM_A) 		; 50x
 		ZSL3(NUM_A) 		; 100x
 		pla
 		rts

;----------------------------------------------- NumCvt
NumCvt: ; Convert NUM_A(24Bit) to digits in NUM_BUF
 		lda 	#'+'
 		sta 	NUM_BUF
 		ldx 	#NUMSZ
 		lda 	#0
 		sta 	NUM_BUF,x
 		dex
 		sta 	NUM_BUF,x
 		dex
NumCvtL 	;- num/10 remainder as digit
 		phx 			; save output index
 		jsr 	NumDT 		; div NUM_TMP by 10, remainder in A
 		plx 			; recall index
 		ora 	#'0' 		; convert remainder to a digit
 		sta 	NUM_BUF,x 	; store the digit
 		dex 			; back-up one pos to the left
 		bpl 	NumCvtL 	; loop until done
 		;-- Place sign in NR[0] based on SGN
; 		LDA 	#'+'
; 		LDY 	NA_SGN
; 		BPL 	NumCvtM
; 		LDA 	#'-'
;   NumCvtM 	STA 	NUM_BUF 		; place sign at Res[0]
 		rts

;----------------------------------------------- NumFmt
NumFmt: ; Apply formatting to leading zeroes based on ZPrFlg
 		BR_ZSUP(NumSup) 	; TMP = NUM_A
 		;-- suppress leading zeroes
 		BR_ZSPC(NumSpc) 	; blank leading zeroes
 		rts

;----------------------------------------------- NumSup
NumSup: ; removing leading zeroes
 		ldx 	#NUMSZ 		; size (to null)
 		dex 			; at least one digit
 		ldy 	#0
NumSupL 	lda 	NUM_BUF,y
 		cmp 	#'0'
 		bne 	NumSupC 	; go copy
 		iny
 		dex
 		bne 	NumSupL
NumSupC 	ldx 	#0
NumSupCL 	lda 	NUM_BUF,y
 		sta 	NUM_BUF,x
 		beq 	NumSupX
 		inx
 		iny
 		bra 	NumSupCL
NumSupX 	rts

;----------------------------------------------- NumSpc
NumSpc: ; blank leading zeroes
 		ldx 	#NUMSZ 		; size (to null)
 		dex 			; at least one digit
 		ldy 	#0
NumSpcL 	lda 	NUM_BUF,y
 		cmp 	#'0'
 		bne 	NumSpcX 	; go copy
 		lda 	#' '
 		sta 	NUM_BUF,y
 		iny
 		dex
 		bne 	NumSpcL
NumSpcX 	rts


;----------------------------------------------- NumAdd
NumAdd: ; NumA = NumB + NumA
 		clc
 		lda 	NUM_A+_L
 		adc 	NUM_B+_L
 		sta 	NUM_A+_L
 		;--
 		lda 	NUM_A+_H
 		adc 	NUM_B+_H
 		sta 	NUM_A+_H
 		;--
 		lda 	NUM_A+_U
 		adc 	NUM_B+_U
 		sta 	NUM_A+_U
 		;--
 		rts

;----------------------------------------------- NumSub
NumSub: ; NumA = NumB - NumA
 		sec
 		lda 	NUM_A+_L
 		sbc 	NUM_B+_L
 		sta 	NUM_A+_L
 		;--
 		lda 	NUM_A+_H
 		sbc 	NUM_B+_H
 		sta 	NUM_A+_H
 		;--
 		lda 	NUM_A+_U
 		sbc 	NUM_B+_U
 		sta 	NUM_A+_U
 		;--
 		rts

;----------------------------------------------- NumMul
NumMul: ; NumA = NumB * NumA


;----------------------------------------------- NumDiv
NumDiv: ; NumA = NumB / NumA


.echo "  _Math\t\t"
.echo $-_Math
.echo "\n"
.list
