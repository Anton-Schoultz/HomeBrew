;=================================================================== MATH =============
;*  Bin2BCD             Convert binary value in A (0-99) into BCD in A, (high digit in X)
;*  CvtNum              Convert NUMBER(24Bit) to digits in CVTBUF
;*  Hex2Nib             '0..9A..F' -> to nibble in A (C=1 Valid) [A]
;*  HexDump             hex dump memory (ZPtr) to output io/mem
;*  NumDT               NUMBER = NUMBER / 10 (24Bit), remainder in A [AXY]
;*  NumFmt              Apply formatting to leading zeroes
;*  NumMT               NUMBER = NUMBER * 10 (24Bit) - preserves AXY, destroys NUMTMP
;*  NumSpc              blank leading zeroes
;*  NumSup              removing leading zeroes
;*  NumZero             place zero into NUMBER (24Bit)
;*  PrADec2             Print A as decimal digits 00-99
;*  PrADec3             Print A as decimal digits 000-255
;*  PrAHex              Print A as Hex digits (send/write) [A]
;*  PrAXHex             Print AX(lo/hi) as 4 hex digits [A]
;*  PrNib               Convert hex nibble and Print it (preserves XY)
;*  PrNum               print NUMBER as digits to output (mem/io)
;*  RdNum               -- parse a number into NUMBER (24Bit) - destorys NUMTMP
;*m HEX_DUMP(adr)       Print hex dump to IO/Mem [Zptr++]
;*
#ifdef hide
.NOLIST
#endif

; HEX_DUMP(adr) Print hex dump to IO/Mem [Zptr++]
#define HEX_DUMP(adr) ZSET(ZPtr,adr) \ jsr HexDump

#define HEXSZ 16

; size including null at the end
#define NUMSZ 7

_Math 		= $

Bin2BCDTbl
.byte	$63,$31,$15,$07,$03,$01,$00

Nib2HexTbl
;    ____ BCD:0______===== BCD:1 ====
.db "0123456789ABCDEF0123456789+-e.E "
;   "0123456789ABCDEF0123456789abcdef"

;----------------------------------------------- PrADec2
PrADec2: ; Print A as decimal digits 00-99
 		jsr 	Bin2BCD
 		jmp 	PrAHex

;----------------------------------------------- PrADec2
PrADec3: ; Print A as decimal digits 000-255
 		jsr 	Bin2BCD
 		pha
 		txa
 		jsr 	PrNib 		; hundreds
 		pla
 		jmp 	PrAHex 		; Tens,Unit

;----------------------------------------------- Bin2BCD
Bin2BCD: ; Convert binary value in A (0-99) into BCD in A, (high digit in X)
 		sed 			; all adds in decimal mode
 		sta 	ZTmp 		; save A
 		lda 	#$00 		; clear A
 		ldx 	#$07 		; set bit count
Bin2BCDL 	lsr 	ZTmp 		; bit to carry
 		bcc 	Bin2BCD1 	; branch if no add
 		adc 	Bin2BCDTbl-1,X 	; else add BCD value
Bin2BCD1 	dex 			; decrement bit count
 		bne 	Bin2BCDL 	; loop if more to do
 		;-- 3digit {
 		bcc 	Bin2BCD2 	; branch if no 100's carry
 		;-- if Cb set here (and can only be set by the
 		;-- last loop add) then there was a carry into
 		inx 			; the 100's so add 100's carry to the high byte
Bin2BCD2 	;-- now check the 2^7 (128) bit
 		lsr 	ZTmp 		; bit 7 to carry
 		bcc 	Bin2BCD3 	; branch if no add
 		inx 			; else effectively add 100 part of 128
 		adc 	#$27 		; and then add 128 (-1) part of 128
 		bcc 	Bin2BCD3 	; branch if no further carry
 		inx 			; else add 200's carry
Bin2BCD3 	;-- }
 		sta 	ZTmp 		; save result ZTmp byte
 		cld 			; clear decimal mode
 		rts

;----------------------------------------------- Hex2Nib
Hex2Nib: ; '0..9A..F' -> to nibble in A (C=1:Valid) [A]
 		eor 	#'0' 		; Map digits to 0-9
 		cmp 	#9+1 		; Is it a decimal digit?
 		bcc 	Hex2Nib9 	; Yes!
 		adc 	#$08 		; Map letter "A"-"F" to $FA-FF
 		cmp 	#$7A 		; Hex letter?
 		bcc 	Hex2Nib_X 	; No! Character not hex
Hex2Nib9 	sec 			; set carry flag to indicate valid
Hex2Nib_X 	and 	#$0F
 		rts 			; carry clear if invalid char




;----------------------------------------------- HexDump
HexDump: ; hex dump memory (ZPtr) to output io/mem
 		lda 	ZPtr+1
 		jsr 	PrAHex
 		lda 	ZPtr
 		jsr 	PrAHex
 		lda 	#' '
 		jsr 	PutChr
 		ldy 	#0
HexDumpL 	; dump a line of bytes
 		lda 	(ZPtr),y
 		jsr 	PrAHex
 		lda 	#' '
 		jsr 	PutChr
 		iny
 		cpy 	#HEXSZ
 		bne 	HexDumpL
 		ldy 	#0
HexDumpL1 	; dump a line of bytes
 		lda 	(ZPtr),y
 		BR_ALT(32,HexDump1) 	; a<' '?
 		BR_AGT(127,HexDump1)
 		jsr 	PutChr 		;printable
 		bra 	HexDump2
HexDump1 	; non printable
 		lda 	#'.'
 		jsr 	PutChr
HexDump2 	iny
 		cpy 	#HEXSZ
 		bne 	HexDumpL1
 		jsr 	PrNL
 		;-- move ZPtr to next line
 		clc
 		lda 	#HEXSZ
 		adc 	ZPtr
 		sta 	ZPtr
 		bcc 	HexDumpX
 		inc 	ZPtr+1
HexDumpX 	rts


;----------------------------------------------- PrAXHex
PrAXHex: ; Print AX(lo/hi) as 4 hex digits [A]
 		pha 			; save ZTmp
 		txa 			; get high
 		jsr 	PrAHex 		; print hi as hex digits
 		pla 			; restore ZTmp
 		;-- fall through to print ZTmp as hex digits
;----------------------------------------------- PrAHex
PrAHex: ; Print A as Hex digits (send/write) [A]
 		pha 			;Save A for LSD
 		lsr 	a
 		lsr 	a
 		lsr 	a 		; MSD to LSD position
 		lsr 	a
 		jsr 	PrNib 		; Output hex digit
 		pla 			; Restore A and then
 		;-- fall through to print hex routine
;----------------------------------------------- PrNib
PrNib: ; Convert hex nibble and Print it (preserves XY)
 		phx 			; save X
 		and 	#$0F 		; Mask LSD for hex print
 		BR_NBCD(PrNibX) 	; non-bcd -> PrNibX
 		;-- BCD so add 16 for second part of table
 		clc
 		adc 	#$10 		; add 16 for BCD part of table
PrNibX 		tax
 		lda 	Nib2HexTbl,X 	; Look Up
 		plx
 		jmp 	PutChr 		; Write/Send

;----------------------------------------------- CvtNumDT
NumDT: ; NUMBER = NUMBER / 10 (24Bit), remainder in A [AXY]
; Divide value at NUMTMP  by 10, remainder in A [AY]
 		ldy 	#24 		; 24 bits
 		lda 	#0
 		clc
NumDTa 		rol 	A
 		cmp 	#10
 		bcc 	NumDTb
 		sbc 	#10
NumDTb 		rol 	NUMBER+0 	; L
 		rol 	NUMBER+1 	; H
 		rol 	NUMBER+2 	; U
 		dey
 		bpl 	NumDTa
 		rts
;----------------------------------------------- NumZero
NumZero: ; place zero into NUMBER (24Bit)
 		lda 	#0 		; zero number
 		sta 	NUMBER
 		sta 	NUMBER+1
 		sta 	NUMBER+2
 		rts

;----------------------------------------------- NumMT
NumMT: ; NUMBER = NUMBER * 10 (24Bit) - preserves AXY, destroys NUMTMP
 		pha
 		ZCPY3(NUMTMP,NUMBER) 	; TMP = NUMBER
 		ZSL3(NUMBER) 		; NUMBER * 2
 		ZSL3(NUMBER) 		; NUMBER * 4
 		ZADD3(NUMBER,NUMTMP) 	; TMP = NUMBER *5
 		ZSL3(NUMBER) 		; NUMBER = NUMBER * 10
 		pla
 		rts

;----------------------------------------------- NumFmt
NumFmt: ; Apply formatting to leading zeroes
 		BR_ZSUP(NumSup) 	; suppress leading zeroes
 		BR_ZSPC(NumSpc) 	; blank leading zeroes
 		rts

;----------------------------------------------- NumSup
NumSup: ; removing leading zeroes
 		ldx 	#NUMSZ 		; size (to null)
 		dex 			; at least one digit
 		ldy 	#0
NumSupL 	lda 	CVTBUF,y
 		cmp 	#'0'
 		bne 	NumSupC 	; go copy
 		iny
 		dex
 		bne 	NumSupL
NumSupC 	ldx 	#0
NumSupCL 	lda 	CVTBUF,y
 		sta 	CVTBUF,x
 		beq 	NumSupX
 		inx
 		iny
 		bra 	NumSupCL
NumSupX 	rts

;----------------------------------------------- NumSpc
NumSpc: ; blank leading zeroes
 		ldx 	#NUMSZ 		; size (to null)
 		dex 			; at least one digit
 		ldy 	#0
NumSpcL 	lda 	CVTBUF,y
 		cmp 	#'0'
 		bne 	NumSpcX 	; go copy
 		lda 	#' '
 		sta 	CVTBUF,y
 		iny
 		dex
 		bne 	NumSpcL
NumSpcX 	rts

;----------------------------------------------- PrNum
PrNum: ; print NUMBER as digits to output (mem/io)
 		jsr 	CvtNum
 		jsr 	NumFmt
 		LDAX(CVTBUF)
 		jmp 	PrStrAX

;----------------------------------------------- RdNum
RdNum: ;-- parse a number into NUMBER (24Bit) - destorys NUMTMP
 		jsr 	NumZero
RdNumL 		lda 	CHRGOT 		; term null
 		beq 	RdNumX
 		;--
 		jsr 	IsDigit 	; messes with A
 		BR_F(RdNumX) 		; no more digits
 		;-- NUMBER *= 10
 		jsr 	NumMT 		; destroys NUMTMP
 		;-- digit value into NUMBER
 		and 	#$0F
 		clc
 		adc 	NUMBER
 		sta 	NUMBER
 		bcc 	RdNumAX
 		inc 	NUMBER+1
 		bcc 	RdNumAX
 		inc 	NUMBER+2
RdNumAX 	jsr 	GetChr 		; next character
 		bra 	RdNumL

RdNumX 		ZCPY4(DBUGNUM,NUMBER) 	; just for me to see it !
 		rts

;----------------------------------------------- CvtNum
CvtNum: ; Convert NUMBER(24Bit) to digits in CVTBUF

 		lda 	#'+'
 		sta 	CVTBUF

 		ldx 	#NUMSZ
 		lda 	#0
 		sta 	CVTBUF,x
 		dex
 		sta 	CVTBUF,x
 		dex
CvtNumL 	;- num/10 remainder as digit
 		phx 			; save output index
 		jsr 	NumDT 		; div NUMTMP by 10, remainder in A
 		plx 			; recall index
 		ora 	#'0' 		; convert remainder to a digit
 		sta 	CVTBUF,x 	; store the digit
 		dex 			; back-up one pos to the left
 		bpl 	CvtNumL 	; loop until done
 		;-- Place sign in NR[0] based on SGN
; 		LDA 	#'+'
; 		LDY 	NA_SGN
; 		BPL 	CvtNumM
; 		LDA 	#'-'
;   CvtNumM 	STA 	CVTBUF 		; place sign at Res[0]
 		rts

.echo "  "
.echo $-_Math
.echo " Bytes in _Math\n"

