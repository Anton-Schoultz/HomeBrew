.nolist
;=================================================================== COMMON ===========
; Common to all math modules
;*  NumFmt               Apply formatting to leading zeroes based on ZPrFlg
;*  NumInit              Initialise calculator (clear stack pointer)
;*  NumParse             Parse number from (ZRd) and move ZRd
;*  NumPopB              Pop Num_B from the calculator stack (NUM_SP--  S,X,A,B,C)
;*  NumPushA             Push Num_A onto calculator stack (S,X,A,B,C NUM_SP++)
;*  NumStackErr          'out-of-memory'
;*  NumSup               removing leading zeroes
;*  NumSwap              Swap NUM_A <-> NUM_B  (S,X,A,B,C)
;*
#if ($/256) = 0

#define CSTKSZ 16

; NUMPKSZ 	is the size for the packed value in memory
; DIGITS	is the number of digits when printed (even number)
; -########e##.
; 0123456789abcdef
 		;--
#if MOD_MATH = MOD_MATH_NONE
#define NUMPKSZ	2
#define DIGITS 8
#endif

#if MOD_MATH = MOD_MATH_S16
#define NUMPKSZ	2
#define DIGITS 6
#endif

#if MOD_MATH = MOD_MATH_S24
#define NUMPKSZ	3
#define DIGITS 	8
#endif

; sign, null and 'e##'
#define NUMPAD 5
#define NUMBUFSZ DIGITS+NUMPAD

; for conversion, need one for '-', another for null, and possibly 3 more 'eXX'
Var(NUM_BUF,NUMBUFSZ) ; Conversion work area


; this lets me select which maths implementation to use


; SGN,  X:Exp, A:Low, B:High, C:Upper
#define FPS	0
#define FPX	1
#define FPA	2
#define FPB	3
#define FPC	4
; extensions to NUM_A & NUM_B for scratch
#define FPD	5
#define FPE	6
#define FPF	7

NUM_AS 		= NUM_A+FPS
NUM_AX 		= NUM_A+FPX
NUM_AA 		= NUM_A+FPA
NUM_AB 		= NUM_A+FPB
NUM_AC 		= NUM_A+FPC
NUM_AD 		= NUM_A+FPD
NUM_AE 		= NUM_A+FPE
NUM_AF 		= NUM_A+FPF

NUM_BS 		= NUM_B+FPS
NUM_BX 		= NUM_B+FPX
NUM_BA 		= NUM_B+FPA
NUM_BB 		= NUM_B+FPB
NUM_BC 		= NUM_B+FPC

NUM_TMPS 	= NUM_TMP+FPS
NUM_TMPX 	= NUM_TMP+FPX
NUM_TMPA 	= NUM_TMP+FPA
NUM_TMPB 	= NUM_TMP+FPB
NUM_TMPC 	= NUM_TMP+FPC

NUM_DIVS 	= NUM_DIV+FPS
NUM_DIVX 	= NUM_DIV+FPX
NUM_DIVA 	= NUM_DIV+FPA
NUM_DIVB 	= NUM_DIV+FPB
NUM_DIVC 	= NUM_DIV+FPC
#endif



#if ($/256) = 0
Short(ZDIV) 	; short divisor 10/100
#endif


#if ($/256) = 1
;------------------------------------------------------- CSTK
; Calc Stack is at bottom of page 1, cpu stack grows down from top of page 1
; 16 x 5 => 80 bytes
CSTK
Var(CSTKS,CSTKSZ) ; S:Sign
Var(CSTKX,CSTKSZ) ; X:Exponent
Var(CSTKA,CSTKSZ) ; A:Low    | S16.L
Var(CSTKB,CSTKSZ) ; B:High   | S16.H
Var(CSTKC,CSTKSZ) ; C:Upper

; Str uses S,X,A,B	SX=Len AB=Ptr

; S16 uses A,B
; S24 uses A,B,C
; D24 uses A,B,C

; F32 uses X,A,B,C
 		;--
; Constants:
; NUMPKSZ 2	size of a numeric format in internal for - S16 is 2 bytes
; NUMUSZ 5	size of numeric value once 'unpacked' for calcualtions
;------------------------------------------------------- Numeric common vars
; Var(NUM_A,NUMUSZ) 	; Number parsed / Primary accumulator
; Var(NUM_TMP,NUMUSZ) 	; Temp number
; Var(NUM_B,NUMUSZ) 	; Secondary accumulator
; Var(NUM_DIV,NUMUSZ) 	; Scratch divisor
; Short(NUM_FLG) 	; Comparisson flags 4:> 2:= 1:<
; Short(NUM_SP) 	; calculator stack pointer
; Short(NUM_SGN) 	; sign
; Var(NUM_BUF,DIGITS) 	; Conversion work area DIGITS=14

.nolist
.echo "  CPU Stack\t"
.echo $200 - $
.echo "\tAvail\t(CalcStack is "
.echo CSTKSZ
.echo " deep)\n"

#endif 						; end page1

#if ($/256) > $80
_Math 		= $
.list
#ifdef hide
.NOLIST
#endif

;------------------------------------------------------- NumInit
NumInit: ; Initialise calculator (clear stack pointer)
 		lda 	#0
 		sta 	NUM_SP 			; zero the number stack pointer
 		rts

;------------------------------------------------------- NumParse
NumParse: ; Parse number from (ZRd) and move ZRd
 		ZCPY(ZParse,ZRd)
 		jsr 	NumParsePtr 		; parse from (ZParse)
 		;-- update ZRd to after the number
 		tya
 		clc
 		adc 	ZRd
 		sta 	ZRd
 		lda 	#0
 		adc 	ZParse+1
 		sta 	ZRd+1
 		rts

;------------------------------------------------------- NumPushA
NumPushA: ; Push Num_A onto calculator stack (S,X,A,B,C NUM_SP++)
 		ldx 	NUM_SP
 		;-- sign
 		lda 	NUM_AS
 		sta 	CSTKS,X
 		;-- Exponent
 		lda 	NUM_AX
 		sta 	CSTKX,X
 		;-- value
 		lda 	NUM_AA
 		sta 	CSTKA,X
 		lda 	NUM_AB
 		sta 	CSTKB,X
 		lda 	NUM_AC
 		sta 	CSTKC,X
 		;-- incr and check stack pointer
 		inx
 		txa
 		cmp 	#CSTKSZ
 		beq 	NumStackErr
 		;-- OK, store it
 		sta 	NUM_SP
 		rts
NumStackErr: ; 'out-of-memory'
 		ERROR(ERR_MEMORY)

;------------------------------------------------------- NumPopB
NumPopB: ; Pop Num_B from the calculator stack (NUM_SP--  S,X,A,B,C)
 		;-- try decr stak pointer check if <0
 		dec 	NUM_SP
 		bmi 	NumStackErr
 		;-- get it into X
 		ldx 	NUM_SP
 		;-- sign
 		lda 	CSTKS,X
 		sta 	NUM_BS
 		;-- exp
 		lda 	CSTKX,X
 		sta 	NUM_BX
 		;-- value
 		lda 	CSTKA,X
 		sta 	NUM_BA
 		lda 	CSTKB,X
 		sta 	NUM_BB
 		lda 	CSTKC,X
 		sta 	NUM_BC
 		;--
 		rts

;------------------------------------------------------- NumSwap
NumSwap: ; Swap NUM_A <-> NUM_B  (S,X,A,B,C)
 		ldx 	#NUMUSZ
NumSwapL 	lda 	NUM_A,X
 		tay
 		lda 	NUM_B,X
 		sta 	NUM_A,X
 		tya
 		sta 	NUM_B,X
 		dex
 		bpl 	NumSwapL
 		rts


;------------------------------------------------------- NumFmt
NumFmt: ; Apply formatting to leading zeroes based on ZPrFlg
; BASIC usually suppresses leading zeroes, no other options available
; so we could remove these lines, falling through to NumSup and remove NumSpc
 		BR_ZSUP(NumSup) 		; suppress leading zeroes
 		BR_ZSPC(NumSpc) 		; blank leading zeroes
 		rts

; -########e##.		DIGITS=8
; 0123456789abcdef

;------------------------------------------------------- NumSup
NumSup: ; removing leading zeroes
 		ldx 	#0
 		ldy 	#0
 		lda 	NUM_BUF
 		cmp 	#'-'
 		bne 	NumSup1
 		inx
NumSupL 	iny
 		lda 	NUM_BUF,y
NumSup1 	cmp 	#'0'
 		bne 	NumSupC 		; go copy
 		cpy 	#DIGITS 		; make sure we leave the last digit at least
 		bne 	NumSupL
NumSupC 	lda 	NUM_BUF,y
 		sta 	NUM_BUF,x
 		beq 	NumSupX
 		inx
 		iny
 		bra 	NumSupC
NumSupX 	rts

;------------------------------------------------------- NumSpc
NumSpc 		; blank leading zeroes
 		ldy 	#0
 		lda 	NUM_BUF
 		cmp 	#'-'
 		bne 	NumSpc1
 		iny
NumSpcL 	lda 	NUM_BUF,y
NumSpc1 	cmp 	#'0'
 		bne 	NumSpcX 		; go copy
 		lda 	#' '
 		sta 	NUM_BUF,y
 		iny
 		cpy 	#DIGITS 		; make sure we leave the last digit at least
 		bne 	NumSpcL
NumSpcX 	rts


;=================================================================== MATH MODULE ======
#if MOD_MATH = MOD_MATH_S16
.echo "  MATH\tS16\t\t\t("
.echo "NUMPKSZ="
.echo NUMPKSZ
.echo " DIGITS="
.echo DIGITS
.echo ")\n"
#include "Math_S16.a65"
.nolist
#endif

#if MOD_MATH = MOD_MATH_S24
.echo "  MATH\tS24\t\t\t("
.echo "NUMPKSZ="
.echo NUMPKSZ
.echo " DIGITS="
.echo DIGITS
.echo ")\n"
#include "Math_S24.a65"
.nolist
#endif

#if MOD_MATH = MOD_MATH_NONE
.echo "  MATH\t** NONE **\n"
.nolist
#endif


#endif 						; end page > $80

.nolist



#if MOD_MATH = MOD_MATH_NONE
;------------------------------------------------------- Dummy{
#if $>$400

#if _LEVEL >= _DETAIL
.echo "  _Math\t\t"
.echo $-_Math
.echo "\n"
#endif


.nolist

;  -------- Module must define these ----------

NumParsePtr 	; Parse a number from (ZParse) into NUM_A

NumCvt 		; X_PrNum to display value
NumPrint 	; L_Number to list number (from P_Number)

NumAdd 		; Eval Add
NumSub 		; Eval Subtract
NumMul 		; Eval Multiply
NumDiv 		; Eval Divide
NumMod 		; Eval Modulus

NumAnd 		; Eval   AND
NumOr 		; Eval   OR
NumXor 		; Eval   XOR
NumNot 		; Eval   Negate the true/false result in NUM_A
NumFlag 	; Eval   set flags bassed on result
NumTrue 	; Eval   Place TRUE in NUM_A
NumFalse 	; Eval   Place FALSE in NUM_A

NumFmt 		; X_PrNum (also uses NumCvt)

NumZeroA 	; Eval

NumRnd 		; Random number 0-32767  -> NUM_AA,B

NumRd 		; Eval for literal values
NumWr 		; Tok.P_Number to create a literal

NumGet 		; Eval to retrieve from A-Z variable [X] and unpack
NumSet 		; Pack and store into A-Z variable  [X]

NumToInt 	; Return integer value in AX (lo,hi) - sets NUM_FLG
NumFromInt 	; Set NUMA to int value in AX (lo,hi)

; TODO is this really needed?
NumPack 	; Pack NUM_A into memory format for storing


#endif
;------------------------------------------------------- }Dummy

#endif
.list
