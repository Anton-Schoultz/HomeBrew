;=================================================================== MATH ============= 
;*  NumAdd               NumA = NumB + NumA
;*  NumAdj               try to convert (UNPACKED) NUM_A to integer form with E=0
;*  NumCpyA2B            Copy NUM_A to NUM_B (8bytes) - preserves X,Y
;*  NumCpyB2A            Copy NUM_B to NUM_A (8bytes)  - preserves X,Y
;*  NumCvt               Convert NUM_A(unpacked) to digits in NUM_BUF
;*  NumDH                NUM_A = NUM_A / 100 (24bit) remainder in A
;*  NumDN                NUM_A = NUM_A / ZDIV (48bit), remainder in A [AXY]
;*  NumDT                NUM_A = NUM_A / 10 (48Bit), remainder in A
;*  NumDigit             NUM_A = NUM_A * 10 + .A
;*  NumDiv               NumA = NumB / NumA
;*  NumFmt               Apply formatting to leading zeroes based on ZPrFlg
;*  NumIncA              Increment NUM_A
;*  NumInit              Initialise calculator
;*  NumMH                NUM_A = NUM_A * 100 (24bit) - preserves AXY, destroys NUM_TMP
;*  NumMT                NUM_A = NUM_A * 10 (48Bit) - preserves AXY, destroys NUM_B
;*  NumMul               NumA = NumB * NumA (in unpacked form)
;*  NumNegX              2's compliment the mantissa at X
;*  NumPack              SX AA BB CC  <=  XX AA BB CC DD EE FF SS
;*  NumParse             -- parse a number from source into NUM_A - destorys NUM_TMP
;*  NumPlus              NumB = NumB + NumA (Used in NumMH)
;*  NumPopB              Pop Num_B from the calculator stack
;*  NumPrep              prepare for Mul/Div by unsigning both
;*  NumPushA             Push Num_A onto calculator stack
;*  NumSLA               NUM_A shift left by 1 (*2)
;*  NumSet               Set NUM_A to integer value in AX (lo,Hi)
;*  NumSign              Move sign from mantissa to SGN byte (for mul/div)
;*  NumSpc               blank leading zeroes
;*  NumSub               NumA = NumB - NumA
;*  NumSup               removing leading zeroes
;*  NumUnSign            Move sign from SGN to mantissa (for add/sub)
;*  NumUnpack            SX AA BB CC  =>  XX AA BB CC DD EE FF SS
;*  NumVal               VAL() Get numeric value (NUM_A) from String (STRBUF)
;*  NumZeroA             place zero into NUM_A
;*  NumZeroB             place zero into NUM_B
;*  NumZeroTmp           place zero into NUM_TMP
;*  NumZeroX             zero the number at .X (extend version EXP,1,2,3,4,5,6)
;*m HEX_DUMP(adr)        Print hex dump to IO/Mem [Zptr++]
;*
; ZTmp
; ZPtr
; ZPrFlg
; NUM_A
; NUM_TMP
; NUM_BUF



#ifdef hide
.NOLIST
#endif

; 'Packed' number format
; Sxxx.xxxx AA BB CC			xxx = $40 offset exponent
 		;-- 
; 'UnPacked'
; xxxx.xxxx AA BB CC DD EE FF SGN	xxx = 2's compl exponent
 		;-- 

#define LOAD(val) lda #$40\ sta NUM_AX\ lda #LOW(val)\ sta NUM_AA\ lda #HIGH(val)\ sta NUM_AB\ lda #UPPER(val)\ sta NUM_AC\ lda #0\ sta NUM_AD\ sta NUM_AE\ sta NUM_AF


; HEX_DUMP(adr) Print hex dump to IO/Mem [Zptr++]
#define HEX_DUMP(adr) ZSET(ZPtr,adr) \ jsr HexDump


_Math 		= $
;----------------------------------------------- NumInit 
NumInit: ; Initialise calculator
 		lda 	#0
 		sta 	NUM_SP 		; zero the number stack pointer
 		rts

;----------------------------------------------- NumZeroTmp 
NumZeroTmp: ; place zero into NUM_TMP
 		phx
 		ldx 	#NUM_TMP
 		bra 	NumZeroX
;----------------------------------------------- NumZeroB 
NumZeroB: ; place zero into NUM_B
 		phx
 		ldx 	#NUM_B
 		bra 	NumZeroX
;----------------------------------------------- NumZeroA 
NumZeroA: ; place zero into NUM_A
 		phx
 		ldx 	#NUM_A
 		;-- fall through
NumZeroX: ; zero the number at .X (extend version EXP,1,2,3,4,5,6)
 		lda 	#0 		; zero number
 		sta 	FPX,X
 		sta 	FPA,X
 		sta 	FPB,X
 		sta 	FPC,X
 		sta 	FPD,X
 		sta 	FPE,X
 		sta 	FPF,X
 		sta 	FPS,X
 		plx
 		rts

;----------------------------------------------- NumCpyA2B 
NumCpyA2B: ; Copy NUM_A to NUM_B (8bytes) - preserves X,Y
 		phx
 		ldx 	#7
NumCpyA2BL 	lda 	NUM_A,x
 		sta 	NUM_B,x
 		dex
 		bpl 	NumCpyA2BL
 		plx
 		rts

;----------------------------------------------- NumCpyB2A 
NumCpyB2A: ; Copy NUM_B to NUM_A (8bytes)  - preserves X,Y
 		phx
 		ldx 	#7
NumCpyB2AL 	lda 	NUM_B,x
 		sta 	NUM_A,x
 		dex
 		bpl 	NumCpyB2AL
 		plx
 		rts

;----------------------------------------------- NumPushA 
NumPushA: ; Push Num_A onto calculator stack
 		ldx 	NUM_SP
 		;-- 
 		lda 	NUM_AX
 		sta 	CSTK0,X
 		lda 	NUM_AA
 		sta 	CSTK1,X
 		lda 	NUM_AB
 		sta 	CSTK2,X
 		lda 	NUM_AC
 		sta 	CSTK3,X
 		lda 	NUM_AD
 		sta 	CSTK4,X
 		lda 	NUM_AE
 		sta 	CSTK5,X
 		lda 	NUM_AF
 		sta 	CSTK6,X
 		lda 	NUM_AS
 		sta 	CSTK7,X
 		;-- 
 		inx
 		txa
 		and 	#CSTKMSK
 		sta 	NUM_SP
 		rts
;----------------------------------------------- NumPopB 
NumPopB: ; Pop Num_B from the calculator stack
 		dec 	NUM_SP
 		lda 	NUM_SP
 		and 	#CSTKMSK
 		sta 	NUM_SP
 		tax
 		;-- 
 		lda 	CSTK0,X
 		sta 	NUM_BX
 		lda 	CSTK1,X
 		sta 	NUM_BA
 		lda 	CSTK2,X
 		sta 	NUM_BB
 		lda 	CSTK3,X
 		sta 	NUM_BC
 		lda 	CSTK4,X
 		sta 	NUM_BD
 		lda 	CSTK5,X
 		sta 	NUM_BE
 		lda 	CSTK6,X
 		sta 	NUM_BF
 		lda 	CSTK7,X
 		sta 	NUM_BS
 		;-- 
 		rts

;----------------------------------------------- NumVal 
NumVal: ; VAL() Get numeric value (NUM_A) from String (STRBUF)
 		jsr 	NumZeroA
 		ldy 	#255
NumValL 	iny
 		lda 	NUM_BUF,Y 	; term null
 		beq 	NumValX
 		jsr 	IsDigit 	; messes with A
 		BR_F(NumValX) 		; no more digits
 		;-- ; NUM_A = NUM_A * 10 + .A
 		jsr 	NumDigit
NumValAX 	bra 	NumValL 	; next character
NumValX 	ZCPY4(DBUGNUM,NUM_A) 	; just for me to see it !
 		rts

;----------------------------------------------- NumParse 
NumParse: ;-- parse a number from source into NUM_A - destorys NUM_TMP
 		jsr 	NumZeroA
NumParseL 	lda 	CHRGOT 		; term null
 		beq 	NumParseX
 		jsr 	IsDigit 	; messes with A
 		BR_F(NumParseX) 	; no more digits
 		;-- NUM_A = NUM_A * 10 + .A
 		jsr 	NumDigit
NumParseAX 	jsr 	GetChr 		; next character
 		bra 	NumParseL
NumParseX 	lda 	#$40
 		sta 	NUM_AX
 		rts

;----------------------------------------------- NumDigit 
NumDigit: ; NUM_A = NUM_A * 10 + .A
 		jsr 	NumMT 		; A*=10
 		and 	#$0F
 		clc
 		adc 	NUM_AA
 		sta 	NUM_AA
 		bcc 	NumDigitX
 		inc 	NUM_AB
 		bcc 	NumDigitX
 		inc 	NUM_AC
NumDigitX 	rts

;----------------------------------------------- NumDH 
NumDH: ; NUM_A = NUM_A / 100 (24bit) remainder in A
 		lda 	#100
 		sta 	ZDIV
 		bra 	NumDN
;----------------------------------------------- NumDT 
NumDT: ; NUM_A = NUM_A / 10 (48Bit), remainder in A
 		phx
 		phy
 		lda 	#10
 		sta 	ZDIV 		; set divisor to 10
NumDN: ; NUM_A = NUM_A / ZDIV (48bit), remainder in A [AXY]
 		ldy 	#48 		; 48 bits (6 bytes)
 		lda 	#0
 		clc
NumDTa 		rol 	A
 		cmp 	ZDIV
 		bcc 	NumDTb
 		sbc 	ZDIV
NumDTb 		rol 	NUM_AA 		; L 1
 		rol 	NUM_AB 		; H 2
 		rol 	NUM_AC 		; U 3
 		rol 	NUM_AD 		; 4
 		rol 	NUM_AE 		; 5
 		rol 	NUM_AF 		; 6
 		dey
 		bpl 	NumDTa
 		ply
 		plx
 		rts

;----------------------------------------------- NumMT 
;NumMT: ; NUM_A = NUM_A * 10 (24Bit) - preserves AXY, destroys NUM_TMP
NumMT: ; NUM_A = NUM_A * 10 (48Bit) - preserves AXY, destroys NUM_B
 		pha
 		jsr 	NumCpyA2B 	; NUM_B <= NUM_A
 		jsr 	NumSLA 		; NUM_A << 1       *2
 		jsr 	NumSLA 		;  *4
 		jsr 	NumAdd 		; NUM_A += NUM_B   *5
 		jsr 	NumSLA
 		pla
 		rts

;----------------------------------------------- NumSLA 
NumSLA: ; NUM_A shift left by 1 (*2)
 		asl 	NUM_AA
 		rol 	NUM_AB
 		rol 	NUM_AC
 		rol 	NUM_AD
 		rol 	NUM_AE
 		rol 	NUM_AF
 		rts

;----------------------------------------------- NumPlus 
NumPlus: ; NumB = NumB + NumA (Used in NumMH)
 		clc
 		lda 	NUM_BA
 		adc 	NUM_AA
 		sta 	NUM_BA
 		lda 	NUM_BB
 		adc 	NUM_AB
 		sta 	NUM_BB
 		lda 	NUM_BC
 		adc 	NUM_AC
 		sta 	NUM_BC
 		lda 	NUM_BD
 		adc 	NUM_AD
 		sta 	NUM_BD
 		lda 	NUM_BE
 		adc 	NUM_AE
 		sta 	NUM_BE
 		lda 	NUM_BF
 		adc 	NUM_AF
 		sta 	NUM_BF
 		rts

;----------------------------------------------- NumMH 
NumMH: ; NUM_A = NUM_A * 100 (24bit) - preserves AXY, destroys NUM_TMP
 		pha
 		jsr 	NumCpyA2B 	; B=n
 		jsr 	NumSLA 		; A=2n
 		jsr 	NumSLA 		; A=4n
 		jsr 	NumSLA 		; A=8n
 		jsr 	NumPlus 	; B=9n
 		jsr 	NumSLA 		; A=16n
 		jsr 	NumAdd 		; A+=B = 16n+9n = 25n
 		jsr 	NumSLA 		; A=50n
 		jsr 	NumSLA 		; A=100n
 		pla
 		rts

;----------------------------------------------- NumSign 
NumSign: ; Move sign from mantissa to SGN byte (for mul/div)
 		lda 	FPS,X 		; sign in EXP byte
 		bpl 	NumNegXX 	; positive so nothing to change
 		lda 	#0
 		sta 	FPX,X 		; clear sign byte
 		bra 	NumNegX 	; complement mantissa

;----------------------------------------------- NumUnSign 
NumUnSign: ; Move sign from SGN to mantissa (for add/sub)
 		lda 	FPS,X 		; get sign
 		bmi 	NumNegXX 	; already -ve so leave it alone
 		lda 	FPC,X 		; get hit bit
 		bpl 	NumNegXX 	; positive -> leave it
 		lda 	#$80
 		sta 	FPS,X 		; set sign bit in SGN
 		;-- fall through to complement mantissa
;----------------------------------------------- NumNegX 
NumNegX: ; 2's compliment the mantissa at X
 		lda 	#$FF
 		eor 	FPA,X
 		sta 	FPA,X
 		lda 	#$FF
 		eor 	FPB,X
 		sta 	FPB,X
 		lda 	#$FF
 		eor 	FPC,X
 		sta 	FPC,X
 		inc 	FPA,X
 		bne 	NumNegXX
 		inc 	FPB,X
 		bne 	NumNegXX
 		inc 	FPC,X
NumNegXX 	rts

;----------------------------------------------- NumSet 
NumSet: ; Set NUM_A to integer value in AX (lo,Hi)
 		sta 	NUM_AA
 		stx 	NUM_AB
 		lda 	#0
 		sta 	NUM_AC
 		lda 	#$40 		; + E0
 		sta 	NUM_AX
 		;-- fall through to Unpack it
;----------------------------------------------- NumUnpack 
NumUnpack: ; SX AA BB CC  =>  XX AA BB CC DD EE FF SS
 		lda 	#0
 		sta 	NUM_AD
 		sta 	NUM_AE
 		sta 	NUM_AF
 		sta 	NUM_AS
 		;-- 
 		lda 	NUM_AX
 		bpl 	NumUnpack1
 		and 	#$7F 		; mask the neg flag
 		dec 	NUM_AS 		; SGN=FF
NumUnpack1 	sec 			; remove offset
 		sbc 	#$40
 		sta 	NUM_AX 		; 2s exponent
 		rts

;----------------------------------------------- NumPack 
NumPack: ; SX AA BB CC  <=  XX AA BB CC DD EE FF SS
 		lda 	NUM_AX
 		clc
 		adc 	#$40 		; add offset
 		asl 	a
 		asl 	NUM_AS
 		ror 	a
 		sta 	NUM_AX
 		rts

;----------------------------------------------- NumAdj 
NumAdj: ; try to convert (UNPACKED) NUM_A to integer form with E=0
 		jsr 	NumCpyA2B 	;- save best value so far
 		lda 	NUM_AX
 		bmi 	NumAdjUp
 		bne 	NumAdjDwn
 		rts 			; Success
NumAdjUp 	; /10 incr E
 		jsr 	NumDT 		; /10
 		inc 	NUM_AX 		; X++
 		cmp 	#0 		; remainder = 0?
 		beq 	NumAdj 		; good, we can use this
 		bne 	NumAdjX 	; fail, restore & exit
NumAdjDwn 	; *10 decr E
 		jsr 	NumMT 		; *10
 		dec 	NUM_AX 		; X--
 		lda 	NUM_AD
 		beq 	NumAdj 		; ok, go again
 		;-- overflow, restore & exit
NumAdjX 	jsr 	NumCpyB2A 	; get best result
 		rts

;----------------------------------------------- NumCvt 
NumCvt: ; Convert NUM_A(unpacked) to digits in NUM_BUF
 		ldx 	#NUM_A
 		jsr 	NumUnSign 	; make mantissa positive
 		;-- fill buffer with zeroes
 		ldx 	#NUMSZ-1
 		lda 	#0
 		sta 	NUM_BUF,x 	;u
 		dex
 		sta 	NUM_BUF,x 	;t
 		dex
 		sta 	NUM_BUF,x 	;-
 		dex
 		sta 	NUM_BUF,x 	;E
 		dex
NumCvtL 	;- num/10 remainder .A as digit
 		jsr 	NumDT 		; div NUM_TMP by 10, remainder in A
 		ora 	#'0' 		; convert remainder to a digit
 		sta 	NUM_BUF,X 	; store the digit
 		dex 			; back-up one pos to the left
 		bpl 	NumCvtL 	; loop until done
 		;-- EXP
 		lda 	NUM_AX 		; 2's exp (unpacked)
 		beq 	NumCvtS 	; exp is zero so don't place Exx
 		;-- find first non-zero
 		ldx 	#$FF
NumCvt1 	inx
 		cpx 	#NUMSZ-4 	; incase its all zeroes
 		beq 	NumCvt2
 		lda 	NUM_BUF+1,X
 		cmp 	#'0'
 		beq 	NumCvt1
 		;-- insert the point
NumCvt2 	sta 	NUM_BUF,X
 		lda 	#'.'
 		sta 	NUM_BUF+1,X
 		;-- work out resulting Exp
 		txa
 		eor 	#$ff
 		inc 	A
 		clc
 		adc 	NUM_AX
 		clc
 		adc 	#8
 		sta 	NUM_EXP
 		;-- if E00 then suppress it
 		beq 	NumCvtS
 		tay
 		;-- append the E
 		ldx 	#NUMSZ-4
 		;-- 'E'
 		lda 	#'e'
 		sta 	NUM_BUF,X
 		inx
 		;-- negative exp?
 		tya
 		bpl 	NumCvtE
 		lda 	#'-'
 		sta 	NUM_BUF,X
 		inx
 		;-- complement exp
 		tya
 		eor 	#$ff
 		inc 	a
 		tay
NumCvtE 	;-- exponent as digits
 		tya 			; recal exp
 		phx
 		jsr 	Bin2BCD 	; to bcd in .X .A
 		plx
 		tay 			;Save A for LSD
 		lsr 	a
 		lsr 	a
 		lsr 	a 		; MSD to LSD position
 		lsr 	a
 		ora 	#'0'
 		sta 	NUM_BUF,x
 		inx
 		tya 			; Restore A and then
 		and 	#$0F
 		ora 	#'0'
 		sta 	NUM_BUF,x
 		inx
 		lda 	#0
 		sta 	NUM_BUF,X
NumCvtS 	;-- Place sign in NR[0] based on SGN
 		lda 	#'0' 		; leading zero
 		sta 	NUM_BUF
 		;-- check if negative
 		lda 	NUM_AX
 		bpl 	NumCvtX
 		lda 	#'-' 		; replace by '-' for negative
 		sta 	NUM_BUF 	; place sign at Res[0]
NumCvtX 	rts

;----------------------------------------------- NumFmt 
NumFmt: ; Apply formatting to leading zeroes based on ZPrFlg
 		BR_ZSUP(NumSup) 	; TMP = NUM_A
 		;-- suppress leading zeroes
 		BR_ZSPC(NumSpc) 	; blank leading zeroes
 		rts

;----------------------------------------------- NumSup 
NumSup: ; removing leading zeroes
 		ldx 	#NUMSZ 		; size (to null)
 		dex 			; at least one digit
 		ldy 	#0
NumSupL 	lda 	NUM_BUF,y
 		cmp 	#'0'
 		bne 	NumSupC 	; go copy
 		iny
 		dex
 		bne 	NumSupL
NumSupC 	ldx 	#0
NumSupCL 	lda 	NUM_BUF,y
 		sta 	NUM_BUF,x
 		beq 	NumSupX
 		inx
 		iny
 		bra 	NumSupCL
NumSupX 	rts

;----------------------------------------------- NumSpc 
NumSpc: ; blank leading zeroes
 		ldx 	#NUMSZ 		; size (to null)
 		dex 			; at least one digit
 		ldy 	#0
NumSpcL 	lda 	NUM_BUF,y
 		cmp 	#'0'
 		bne 	NumSpcX 	; go copy
 		lda 	#' '
 		sta 	NUM_BUF,y
 		iny
 		dex
 		bne 	NumSpcL
NumSpcX 	rts

;----------------------------------------------- NumAdd 
NumAdd: ; NumA = NumB + NumA
 		clc
 		lda 	NUM_BA
 		adc 	NUM_AA
 		sta 	NUM_AA
 		lda 	NUM_BB
 		adc 	NUM_AB
 		sta 	NUM_AB
 		lda 	NUM_BC
 		adc 	NUM_AC
 		sta 	NUM_AC
 		lda 	NUM_BD
 		adc 	NUM_AD
 		sta 	NUM_AD
 		lda 	NUM_BE
 		adc 	NUM_AE
 		sta 	NUM_AE
 		lda 	NUM_BF
 		adc 	NUM_AF
 		sta 	NUM_AF
 		RTN_T()

;----------------------------------------------- NumSub 
NumSub: ; NumA = NumB - NumA
 		sec
 		lda 	NUM_BA
 		sbc 	NUM_AA
 		sta 	NUM_AA
 		lda 	NUM_BB
 		sbc 	NUM_AB
 		sta 	NUM_AB
 		lda 	NUM_BC
 		sbc 	NUM_AC
 		sta 	NUM_AC
 		lda 	NUM_BD
 		sbc 	NUM_AD
 		sta 	NUM_AD
 		lda 	NUM_BE
 		sbc 	NUM_AE
 		sta 	NUM_AE
 		lda 	NUM_BF
 		sbc 	NUM_AF
 		sta 	NUM_AF
 		RTN_T()

;----------------------------------------------- NumPrep 
NumPrep: ; prepare for Mul/Div by unsigning both
 		ldx 	#NUM_A
 		jsr 	NumUnSign 	; Sign Man->Exp
 		ldx 	#NUM_B
 		jsr 	NumUnSign 	; Sign Man->Exp
 		;-- work out resultant sign for mul/div
 		lda 	NUM_AS
 		eor 	NUM_BS
 		sta 	NUM_SGN 	; resultant sign
 		;-- 
 		rts

;----------------------------------------------- NumMul 
NumMul: ; NumA = NumB * NumA (in unpacked form)
 		jsr 	NumPrep 	; pull signs out (make both pos)
 		;-- result Exp = ExpB+ExpA
 		clc
 		lda 	NUM_BX
 		adc 	NUM_AX
 		sta 	NUM_EXP 	; save on it's own for now
 		;-- zero extended result
 		lda 	#0
 		sta 	NUM_AD
 		sta 	NUM_AE
 		sta 	NUM_AF
 		ldx 	#24 		;There are 24 bits in NA
 		;-- Shift NA to the right, lowest bit into CY
 		lsr 	NUM_AC
 		ror 	NUM_AB
 		ror 	NUM_AA
 		;-- 
NumMul1 	bcc 	NumMul2 	;0 or 1?
 		;-- bit is 1 so add
 		clc
 		lda 	NUM_BA
 		adc 	NUM_AD
 		sta 	NUM_AD
 		;-- 
 		lda 	NUM_BB
 		adc 	NUM_AE
 		sta 	NUM_AE
 		;-- 
 		lda 	NUM_BC
 		adc 	NUM_AF
 		sta 	NUM_AF
 		;-- 
NumMul2 	;shift result right (equivalent to shift B left )
 		clc
 		ror 	NUM_AF
 		ror 	NUM_AE
 		ror 	NUM_AD
 		ror 	NUM_AC
 		ror 	NUM_AB
 		ror 	NUM_AA
 		;-- loop for each bit
 		dex 			; does not affect CY
 		bne 	NumMul1
 		;-- U H L
 		;-- 6 5 4 3 2 1  0 	NUM_A
 		;-- 00032A5F38D7 XP    Binary fraction
 		;-- adjust to fit

NumMul3 	; adjust NUM_A so extended bytes are zeroed (/10, incr EXP) set EXP byte
 		;-- check for 100s
 		lda 	NUM_AF
 		ora 	NUM_AE
 		beq 	NumMul5 	; no, div10

NumMul4 	;-- div 100
 		jsr 	NumDH 		; divide by 100
 		inc 	NUM_EXP 	; and bump EXP up
 		inc 	NUM_EXP 	; and bump EXP up
 		;-- round 100
 		cmp 	#50
 		bmi 	NumMul3 	; < 0.5
 		jsr 	NumIncA 	; round up
 		bra 	NumMul3

NumMul5 	lda 	NUM_AD
 		beq 	NumMul7
 		cmp 	#$64 		; div by 100 if we can
 		bmi 	NumMul4

NumMul6 	;- check div 10
 		jsr 	NumDT 		; divide by 10
 		inc 	NUM_EXP 	; and bump EXP up
 		;-- half round
 		cmp 	#5
 		bmi 	NumMul5 	; < 0.5
 		jsr 	NumIncA 	; round up
 		bra 	NumMul5

NumMul7 	;- check that high byte bit7 is zero
 		lda 	NUM_AC
 		bpl 	NumMulX 	; ok
 		;-- need one more division
 		jsr 	NumDT 		; divide by 10
 		inc 	NUM_EXP 	; and bump EXP up
 		cmp 	#5
 		bmi 	NumMulX 	; < 0.5
 		jsr 	NumIncA 	; round up

NumMulX 	;-- place 2s exp into A
 		lda 	NUM_EXP
 		sta 	NUM_AX
 		jsr 	NumAdj
 		;-- 
 		RTN_T()
;----------------------------------------------- NumIncA 
NumIncA: ; Increment NUM_A
 		inc 	NUM_AA
 		bne 	NumIncAX
 		inc 	NUM_AB
 		bne 	NumIncAX
 		inc 	NUM_AC
 		bne 	NumIncAX
 		inc 	NUM_AD
 		bne 	NumIncAX
 		inc 	NUM_AE
 		bne 	NumIncAX
 		inc 	NUM_AF
NumIncAX 	rts

;----------------------------------------------- NumDiv 
NumDiv: ; NumA = NumB / NumA
 		jsr 	NumPrep 	; pull signs out (make both pos)
 		;-- result Exp = ExpB - ExpA
 		sec
 		lda 	NUM_B+FPX
 		sbc 	NUM_AX
 		sta 	NUM_EXP 	; save on it's own for now
 		;-- place divisor in NUM_DIV
 		ZCPY4(NUM_DIV,NUM_A)
 		;-- zero result (6 bytes)
 		jsr 	NumZeroA
 		;-- zero TMP
 		sta 	NUM_TMP+FPA
 		sta 	NUM_TMP+FPB
 		sta 	NUM_TMP+FPC
 		;-- 
 		ldx 	#48 		; 48 bit division
NumDivL 	;-- shift a bit from dividend into temp
 		asl 	NUM_BA
 		rol 	NUM_BB
 		rol 	NUM_BC
 		;-- now pull the bit into NUM_TMP
 		rol 	NUM_TMPA
 		rol 	NUM_TMPB
 		rol 	NUM_TMPC
 		;-- try subtract divisor from temp TMP=TMP-DIV
 		sec
 		lda 	NUM_TMPA
 		sbc 	NUM_DIVA
 		sta 	NUM_TMPA
 		lda 	NUM_TMPB
 		sbc 	NUM_DIVB
 		sta 	NUM_TMPB
 		lda 	NUM_TMPC
 		sbc 	NUM_DIVC
 		sta 	NUM_TMPC
 		;-- if ok, shift 1 into result
 		bcs 	NumDiv2 	; continue C=1
 		;-- subtract failed, put it back TMP=TMP+DIV
 		lda 	NUM_TMPA
 		adc 	NUM_DIVA
 		sta 	NUM_TMPA
 		lda 	NUM_TMPB
 		adc 	NUM_DIVB
 		sta 	NUM_TMPB
 		lda 	NUM_TMPC
 		adc 	NUM_DIVC
 		sta 	NUM_TMPC
 		clc
NumDiv2 	; save result bit
 		rol 	NUM_AA
 		rol 	NUM_AB
 		rol 	NUM_AC
 		rol 	NUM_AD
 		rol 	NUM_AE
 		rol 	NUM_AF
 		;-- next bit
 		dex
 		bne 	NumDivL
; 345 46786
 		;-- now normalise and Pack the result
 		ldx 	#5
 		;-- 
NumDiv3 	lda 	NUM_AF
 		bne 	NumDiv7
 		;-- high is zero so mult by 100 and double decr
 		jsr 	NumMH
 		dec 	NUM_AX
 		dec 	NUM_AX
 		dex
 		bpl 	NumDiv3
NumDiv7 	lda 	NUM_AF
 		cmp 	#$F8
 		bpl 	NumDiv8
 		jsr 	NumMT
 		dec 	NUM_AX
 		dex
 		bpl 	NumDiv7
NumDiv8 	;-- round
 		lda 	NUM_AC
 		bpl 	NumDiv9
 		inc 	NUM_AD
 		bne 	NumDiv9
 		inc 	NUM_AE
 		bne 	NumDiv9
 		inc 	NUM_AF
NumDiv9 	lda 	NUM_AD
 		sta 	NUM_AA
 		lda 	NUM_AE
 		sta 	NUM_AB
 		lda 	NUM_AF
 		sta 	NUM_AC
 		lda 	#0
 		sta 	NUM_AD
 		sta 	NUM_AE
 		sta 	NUM_AF
 		;-- 
 		jsr 	NumAdj
 		RTN_T()




.echo "  _Math\t\t"
.echo $-_Math
.echo "\n"
.list
