;=================================================================== STR =============
; String functions
;
;*  EvString             Evuate a string expression -> STRBUF
;*  StrAdd               Append string (ZStr) to STRBUF (Recall)
;*  StrAddChr            Add character .A to STRBUF
;*  StrAddNum            Append the converted numeric (in NUM_BUF) to STRBUF [AXY]
;*  StrClr               Clear STRBUF
;*  StrCpy               Copy STRBUF to memory at ZStr (Store)
;*  StrEnd               Save index and exit
;*  StrHead              Truncate STRBUF at Y
;*  StrLit               Append literal to STRBUF [AX]
;*  StrLower             convert to LOWER case
;*  StrOut               Copy STRBUF to output (Print)
;*  StrOvr               Overflow
;*  StrSubMT             Make string empty
;*  StrTail              Keep from Y onwards
;*  StrTrim              trim leading and trailing blanks
;*  StrUpper             convert to UPPER case
;*
;
; STRSZ			Size for STRBUF
; STRBUF		Buffer space for building up sting results
; Int(ZStr) 		ZStr points to string result
; Short(ZStrLen)	Length of STRBUF used (write index)
;
#ifdef hide
.NOLIST
#endif
_Str 		= $


;-----------------------------------------------
EvString: ; Evuate a string expression -> STRBUF
; return T=OK, F otherwise
 		jsr 	StrClr 		; clear the result

 		;-- for now, just handle one item
EvStrL 		jsr 	EvStrItem
 		;--
 		lda 	CHRGOT
 		cmp 	#'+'
 		bne 	EvStrX
 		jsr 	ChrRd 		; consume the '+'
 		bra 	EvStrL


EvStrX 		RTN_T()




EvStrItem 	; check the token
 		lda 	CHRGOT
 		;-- string Value ?
 		BR_AEQ(T_StrLit,StrLit)
 		;-- BR_AEQ(T_StrVar,RtnTrue)
 		;-- BR_AEQ(T_StrAry,RtnTrue)
 		RTN_F()


EvStrNxt 	;-- next token
 		jsr 	ChrRd
 		bne 	EvStrL
 		rts



;----------------------------------------------- StrClr
StrClr: ; Clear STRBUF
 		ldy 	#0
 		tya
 		sta 	ZStrLen
StrClrL 	sta 	STRBUF,y
 		iny
 		cpy 	#STRSZ
 		bne 	StrClrL
StrRtn 		rts

;----------------------------------------------- StrAddChr
StrAddChr: ; Add character .A to STRBUF
 		ldx 	ZStrLen
 		sta 	STRBUF,x
 		inx
 		lda 	#0
 		sta 	STRBUF,x
 		cpx 	#STRSZ
 		bmi 	StrAddChrX
 		;-- overflow, so back up and null
 		;-- jmp 	StrOvr
StrAddChrX 	stx 	ZStrLen
 		rts

;----------------------------------------------- StrLit
StrLit: ; Append literal to STRBUF [AX]
; uses ChrRd to get next byte from source
; CHRGOT will be T_StrLit
; exits with CHRGOT=Null (terminator of string)
 		ldx 	ZStrLen
StrLitL 	jsr 	ChrRd
 		sta 	STRBUF,X
 		beq 	StrLitX 	; ending null
 		;--
 		inx
 		cpx 	#STRSZ
 		bne 	StrLitL 	; in size
 		;-- overflow, so back up and null
 		jmp 	StrOvr
 		;-- fall through to save index
StrLitX 	stx 	ZStrLen
 		jsr 	ChrRd
 		rts

;----------------------------------------------- StrOut
StrOut: ; Copy STRBUF to output (Print)
 		ldy 	#0
StrOutL 	lda 	STRBUF,y
 		pha
 		jsr 	PutChr 		; A -> mem/io
 		pla
 		beq 	StrOutX 	; null -> done
 		iny
 		beq 	StrOutX 	; max of 256 -> done
 		cpy 	#STRSZ 		; buf size?
 		bne 	StrOutL
 		;-- end reached, force null
 		lda 	#0
 		sta 	(ZStr),y
StrOutX 	rts


;----------------------------------------------- StrCpy
StrCpy: ; Copy STRBUF to memory at ZStr (Store)
 		ldy 	#0
StrCpyL 	lda 	STRBUF,y
 		sta 	(ZStr),y
 		beq 	StrCpyX 	; null -> done
 		iny
 		beq 	StrCpyX 	; max of 256 -> done
 		cpy 	#STRSZ 		; buf size?
 		bne 	StrCpyL
 		;-- end reached, force null
 		lda 	#0
 		sta 	(ZStr),y
StrCpyX 	rts

;----------------------------------------------- StrAddNum
StrAddNum: ; Append the converted numeric (in NUM_BUF) to STRBUF [AXY]
 		ZSET(ZStr,NUM_BUF)

;----------------------------------------------- StrAdd
StrAdd: ; Append string (ZStr) to STRBUF (Recall)
 		ldy 	#0
 		ldx 	ZStrLen
StrAddL 	lda 	(ZStr),y
 		sta 	STRBUF,X
 		beq 	StrEnd 		; ending null
 		;--
 		iny
 		inx
 		cpx 	#STRSZ
 		bne 	StrAddL 	; in size
;----------------------------------------------- StrOvr
StrOvr: ; Overflow
 		dex 			; back up to last char
 		lda 	#0 		; make it null
 		sta 	STRBUF,x
 		;-- fall through to save index
StrEnd: ; Save index and exit
 		stx 	ZStrLen
 		rts

;----------------------------------------------- StrTail
StrTail: ; Keep from Y onwards
 		;-- index is outof range so result is empty
 		cpy 	#STRSZ
 		bpl 	StrSubMT 	; could jmp to StrClr
 		;-- index beyond end so result is empty
 		cpy 	ZStrLen
 		bpl 	StrSubMT 	; could jmp to StrClr
 		;--
 		ldx 	#0
StrSubL 	lda 	STRBUF,y
 		sta 	STRBUF,x
 		beq 	StrEnd 		; save len & exit
 		iny
 		inx
 		cpx 	#STRSZ
 		bne 	StrSubL
 		bra 	StrOvr 		; force stop at max

;----------------------------------------------- StrSubMT
StrSubMT: ;Make string empty
 		lda 	#0
 		sta 	STRBUF
 		sta 	ZStrLen
 		rts

;----------------------------------------------- StrHead
StrHead: ; Truncate STRBUF at Y
 		;-- index is out of range - keep all
 		cpy 	#STRSZ
 		bpl 	StrHeadX 	; keep all
 		;-- index beyond end - keep all
 		cpy 	ZStrLen
 		bpl 	StrHeadX 	; keep all
 		;-- place the nul
 		lda 	#0
 		sta 	STRBUF,Y
 		;-- save new index
 		sty 	ZStrLen
StrHeadX 	rts

;----------------------------------------------- StrTrim
StrTrim: ; trim leading and trailing blanks
 		ldy 	#$FF
 		ldx 	#0
StrTrim1 	iny
 		lda 	STRBUF,Y
 		beq 	StrTrimX 	; null -> done
 		cmp 	#' '
 		beq 	StrTrim1 	; blank -> loop
StrTrim2 	sta 	STRBUF,X 	; save char
 		iny
 		inx
 		lda 	STRBUF,Y
 		bne 	StrTrim2 	; copy up to null
 		sta 	STRBUF,X 	; write the null
 		dex
StrTrim3 	;-- now trim trailing ' '
 		lda 	STRBUF,X
 		cmp 	#' '
 		bne 	StrTrimX 	; non-space -> exit
 		lda 	#0 		; null the space
 		sta 	STRBUF,x
 		dex
 		bne 	StrTrim3
StrTrimX 	rts

;----------------------------------------------- StrUpper
StrUpper: ; convert to UPPER case
 		ldy 	#$FF
StrUpper1 	iny
 		lda 	STRBUF,Y
 		beq 	StrUpperX
 		BR_ALT('a',StrUpper1)
 		BR_AGE('{',StrUpper1)
 		and 	#$DF
 		sta 	STRBUF,Y
 		bra 	StrUpper1
StrUpperX 	rts


;----------------------------------------------- StrLower
StrLower: ; convert to LOWER case
 		ldy 	#$FF
StrLower1 	iny
 		lda 	STRBUF,Y
 		beq 	StrUpperX
 		BR_ALT('A',StrLower1)
 		BR_AGE('[',StrLower1)
 		ora 	#$20
 		sta 	STRBUF,Y
 		bra 	StrLower1
StrLowerX 	rts




.echo "  _Str\t\t"
.echo $-_Str
.echo "\n"
.list

