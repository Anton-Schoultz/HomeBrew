;=================================================================== STR =============
; String functions
;
;*  DB_Str               Debug String values - PtrA LenA PtrB LenB, VEND SEND SLEN ZRd
;*  EvIsStr              Return EQ if A is a string value/function
;*  EvStrFn              evaluate string function FN$($ [,~]* )
;*  EvStrItem            get a single item T_StrLit |T_StrVar| StrFn
;*  EvString             Evaluate a string expression (no comparrisons)
;*  IsStrFn              Return T/F if .A is a string function (A preserved)
;*  StrAppend            Append top two strings (PopB, append)
;*  StrClear             Clear string 'accumulator' ready for  a new string
;*  StrComp              Compare the strings
;*  StrFind              find string .A in table, place it's address in ZPtr
;*  StrFunct             prepare for string manipulation
;*  StrGet               get string at index A  A$..Z$ 1..26
;*  StrInit              VAREND->STR_END, 0->STR_LEN
;*  StrLTrim             trim leading blanks
;*  StrLen               check length of Str_A, set in S_LEN_A
;*  StrLit               Recall a string literal
;*  StrLower             convert to LOWER case
;*  StrOut               Output the resulting string (cut at 255)
;*  StrOvr               Overflow - truncate
;*  StrPoint             (ZPtr)->Object, Exit (ZTgt)->data and ZCnt=Size
;*  StrPop               PopB and swap
;*  StrPush              Push temp string sets up S_PTR_A,S_LEN_A
;*  StrRTrim             trim trailing blanks
;*  StrSet               Store string at index A  A$..Z$ 1..26
;*  StrUpper             convert to UPPER case
;*  StrVar               recall a String variable T_StrVar ID
;*m STROFF()             covert index in .A to an offset in .X based on size of pointer
;*
#ifdef hide 				; Str
.NOLIST
#endif

.list

; STRSZ			Size for STRBUF
; Int(ZStr) 		ZStr points to string result
; Short(ZStrLen)	Length of STRBUF used (write index)

;----------------------------------------------- String
; (Z) ->    LenL|LenH|Characters.....|00|
; Int(STR_PTR) 	; pointer to string
; Int(STR_END) 	; end of string work area
; Int(STR_LEN) 	; no of chars + 3 (1Null+2Len)

; RAMBEG
; BASBEG          BASEND      VAREND        STR_END  ARYBEG  RAMEND
;   |  Program lines | Variables | String work | Free | Arrays |  blank | ROM

; NUM_A has Sgn,Exp, A,B,C...

; re-use NUM_A A,B to point to the top most string
#define S_PTR_A NUM_AA
; re-use NUM_A S,X as the length
#define S_LEN_A NUM_AS

; re-use NUM_B A,B to point to the operand string
#define S_PTR_B NUM_BA
; re-use NUM_B S,X as the length of opperand
#define S_LEN_B NUM_BS

; STROFF()  covert index in .A to an offset in .X based on size of pointer
#define STROFF() asl a\ tax

_Str 		= $

; when storing a sting,
; if the variable's pointer is zero then
;    allocate a new space and set pointer
;    copy the data to the string space checking limit
; otherwise
;    copy data to it, checking limit
 		;--
; ZPtr must point to the memory block

;----------------------------------------------- EvString
EvString: ; Evaluate a string expression (no comparrisons)
; return T=OK, F otherwise
 		jsr 	StrClear 	; create a temp space

 		;-- term counter, dec with each term
 		lda 	#0
 		sta 	EVFLG

EvStrPart 	jsr 	EvStrItem
 		RTN_IFF()

EvStrL 		;-- while '+'
 		lda 	CHRGOT
 		cmp 	#'+'
 		bne 	EvStrX
 		;-- {
 		jsr 	ChrRd 		; consume the '+'
 		jsr 	StrPush 	; push working string
 		jsr 	EvStrItem 	; get next part
 		RTN_IFF() 		; missing term !
 		jsr 	StrAppend 	; append it
 		bra 	EvStrL 		; loop around
 		;-- }

EvStrX 		RTN_T()

;----------------------------------------------- EvStrItem
EvStrItem: ; get a single item T_StrLit |T_StrVar| StrFn
 		lda 	CHRGOT
 		;-- string Value ?
 		CASE(T_StrLit,StrLit)
 		CASE(T_StrVar,StrVar)
 		;-- BR_AEQ(T_StrAry,RtnTrue)
 		jsr 	IsStrFn
 		BR_T(EvStrFn) 		; yes, perform function
 		RTN_F()
EvStrFn: ; evaluate string function FN$($ [,~]* )
 		pha 			; save the FnToken
 		jsr 	ChrRd 		; move on (consume token)
 		jsr 	EvStrPart 	; eval strexpr
 		pla 			; pop token
 		jsr 	StrFnDo 	; execute function
 		;-- back here to check for ')'
 		lda 	#')'
 		jsr 	Match
 		RTN_T()
; RunJump returns to where this was called from
StrFnDo 	jmp 	RunJump 	; dispatch to function to process


;----------------------------------------------- StrVar
StrVar: ; recall a String variable T_StrVar ID
 		jsr 	StrClear 	;AAA
 		jsr 	ChrRd 		; consume T_StrVar, get ID
; 		bpl 	StrVar1
; 		ERROR(ERR_BADVAR) 	; invalid varname
StrVar1 	;-- recall the variable
 		and 	#$1F 		; mask off index
 		pha
 		jsr 	ChrRd 		; consume ID, move on to '+'/end
 		pla
 		;-- drop through to recall
;----------------------------------------------- StrGet
StrGet: ; get string at index A  A$..Z$ 1..26
 		jsr 	StrFind
 		bne 	StrLoad 	; string exists
 		;-- no string data yet
 		ERROR(ERR_UNDEFSTR)

StrLoad 	jsr 	StrPoint 	; (ZPtr)->Object, Exit (ZTgt)->data and ZCnt=Size

 		ZCPY(ZSrc,ZTgt) 	; from hi-mem
 		ZCPY(ZTgt,S_PTR_A)
 		ldy 	#0
 		;-- copy upto and including the null (not whole block)
StrLoadL 	lda 	(ZSrc),y
 		sta 	(S_PTR_A),Y
 		beq 	StrLoadX 	; ending null
 		iny
 		bne 	StrLoadL 	; max out at 255
 		;-- overflow, so back up and null
 		jsr 	StrOvr
 		;-- fall through to save index
StrLoadX 	sty 	S_LEN_A
 		ZCPY(STR_LEN,S_LEN_A)
 		RTN_T()

;----------------------------------------------- StrLit
StrLit: ; Recall a string literal
 		jsr 	StrClear 	;AAA

; CHRGOT is T_StrLit, ChrRd will get the first character

 		ldy 	#0
 		sty 	S_LEN_A+1 	; clear high
StrLitL 	jsr 	ChrRd 		; read literal from code
 		sta 	(S_PTR_A),Y
 		beq 	StrLitX 	; ending null
 		iny
 		bne 	StrLitL 	; max out at 255
 		;-- overflow, so back up and null
 		jsr 	StrOvr
 		;-- fall through to save index
StrLitX 	sty 	S_LEN_A
 		ZCPY(STR_LEN,S_LEN_A)
 		dec 	EVFLG 		; note that we got something
 		;-- move on to next byte in code
 		jsr 	ChrRd
 		RTN_T()

;----------------------------------------------- StrSet
StrSet: ; Store string at index A  A$..Z$ 1..26
 		jsr 	StrFind
 		bne 	StrSave 	; string already exists
 		;-- no string yet, calc size to next 16
 		ZCPY(ZCnt,S_LEN_A) 	; length needed
 		jsr 	EdtAlloc 	; find/create space, overwrites ZPtr
 		;-- save pointer to newly allocated var
 		lda 	VARID
 		STROFF()
 		lda 	ZPtr
 		sta 	VARSTR,X
 		lda 	ZPtr+1
 		sta 	VARSTR+1,X
StrSave 	;- ZPtr points to the string space
 		jsr 	StrPoint
 		ZCPY(ZSrc,S_PTR_A) 	; Src = S_PTR_A
 		jmp 	EdtDwn 		; copy bytes

;----------------------------------------------- StrFind
StrFind: ; find string .A in table, place it's address in ZPtr
 		sta 	VARID
 		STROFF()
 		lda 	VARSTR,X
 		sta 	ZPtr
 		lda 	VARSTR+1,X
 		sta 	ZPtr+1
 		ora 	ZPtr
 		rts

;----------------------------------------------- StrPoint
StrPoint: ; (ZPtr)->Object, Exit (ZTgt)->data and ZCnt=Size
 		ldy 	#0
 		lda 	(ZPtr),y
 		sta 	ZCnt
 		iny
 		lda 	(ZPtr),y
 		sta 	ZCnt+1
 		;-- Tgt = Ptr + 2
		clc
		lda	#2
		adc	ZPtr
		sta	ZTgt
		lda 	#0
		adc	ZPtr+1
		sta	ZTgt+1
 		rts

;----------------------------------------------- EvIsStr
; used by print, which then calls EvString
EvIsStr: ; Return EQ if A is a string value/function
 		BR_AEQ(T_StrLit,StrTrue)
 		BR_AEQ(T_StrVar,StrTrue)
 		BR_AEQ(T_StrAry,StrTrue)
;----------------------------------------------- IsStrFn
IsStrFn: ; Return T/F if .A is a string function (A preserved)
; T_FSTR < A < T_LineNo
 		lda 	CHRGOT
 		BR_AGE(T_LineNo,StrNo) 	; Special token $Fx
 		BR_AGE(T_FSTR,StrTrue)
StrNo 		RTN_F()
StrTrue 	RTN_T()

;----------------------------------------------- StrInit
StrInit: ;VAREND->STR_END, 0->STR_LEN
 		ZCPY(STR_END,VAREND) 	; point to open area
 		ZSET(STR_LEN,0) 	; set length as zero
 		rts

;----------------------------------------------- StrPush
StrPush: ;Push temp string sets up S_PTR_A,S_LEN_A
 		jsr 	NumPushA
 		;--
 		ZADD(STR_END,STR_LEN)
 		;-- fall through to clear new string
;----------------------------------------------- StrClear
StrClear: ; Clear string 'accumulator' ready for  a new string
 		ZCPY(S_PTR_A,STR_END) 	; set pointer
 		ZSET(STR_LEN,0) 	; set length as zero
 		ZSET(S_LEN_A,0) 	; zero length
 		rts

;----------------------------------------------- StrOvr
StrOvr: ; Overflow - truncate
 		dey 			; back up to last char
 		lda 	#0 		; make it null
 		sta 	(S_PTR_A),Y
StrEnd 		sty 	S_LEN_A
 		rts

;----------------------------------------------- StrAppend
StrAppend: ; Append top two strings (PopB, append)
; StrPush sets it up so that the second string is already in the right place
; so just swap data and adjust initial length to add second's length
 		jsr 	NumPopB
 		jsr 	NumSwap
 		;-- fall through to get the new length
;----------------------------------------------- StrLen
StrLen: ; check length of Str_A, set in S_LEN_A
 		ldy 	#0
 		sty 	S_LEN_A+1
StrLenL 	lda 	(S_PTR_A),Y
 		beq 	StrLenX
 		iny
 		bne 	StrLenL
StrLenX 	sty 	S_LEN_A
 		rts

;----------------------------------------------- StrOut
StrOut: ; Output the resulting string (cut at 255)
 		ldy 	#0
StrOutL 	lda 	(S_PTR_A),y
 		pha
 		jsr 	PutChr 		; A -> mem/io
 		pla
 		beq 	StrOutX 	; null -> done
 		iny
 		bne 	StrOutL
StrOutX 	rts

;----------------------------------------------- StrUpper
StrUpper: ; convert to UPPER case
 		ldy 	#$FF
StrUpper1 	iny
 		lda 	(S_PTR_A),Y
 		beq 	StrUpperX
 		BR_ALT('a',StrUpper1)
 		BR_AGE('{',StrUpper1)
 		and 	#$DF
 		sta 	(S_PTR_A),Y
 		bra 	StrUpper1
StrUpperX 	RTN_T()

;----------------------------------------------- StrLower
StrLower: ; convert to LOWER case
 		ldy 	#$FF
StrLower1 	iny
 		lda 	(S_PTR_A),Y
 		beq 	StrUpperX
 		BR_ALT('A',StrLower1)
 		BR_AGE('[',StrLower1)
 		ora 	#$20
 		sta 	(S_PTR_A),Y
 		bra 	StrLower1
StrLowerX 	RTN_T()

;----------------------------------------------- StrLTrim
StrLTrim: ; trim leading blanks
 		;-- find first non blank
 		ldy 	#$FF
StrLTrim1 	iny
 		lda 	(S_PTR_A),Y
 		beq 	StrLTrimX 	; null -> done
 		cmp 	#' '
 		beq 	StrLTrim1 	; blank -> loop
 		;-- non blank
StrLTrim2 	;- Copy down from Yth char (Delete first Y chars)
 		;-- tgt is in place at S_PTR_A
 		ZCPY(ZTgt,S_PTR_A)
 		;-- ZSrc = S_PTR_A + .Y
 		clc
 		tya
 		adc 	S_PTR_A
 		sta 	ZSrc
 		lda 	#0
 		adc 	S_PTR_A+1
 		sta 	ZSrc+1
 		;--
 		ldy 	#$FF
StrLTrim3 	; copy string down
 		iny
 		lda 	(ZSrc),y
 		sta 	(ZTgt),y
 		bne 	StrLTrim3 	; loop until null
 		;-- sta	S_LEN_A		; note new size
StrLTrimX 	RTN_T()

;----------------------------------------------- StrRTrim
StrRTrim: ; trim trailing blanks
 		;-- get the end of the string ,Y->Null
 		jsr 	StrLen
 		;-- empty string?
 		cpy 	#0
 		beq 	StrRTrimX 	; yes -> done
StrRTrim1 	dey
 		lda 	(S_PTR_A),Y
 		cmp 	#' '
 		beq 	StrRTrim1 	; blank -> loop
 		;-- non blank
StrRTrim2 	iny
 		lda 	#0
 		sta 	(S_PTR_A),Y 	; place new null
 		;-- sta	S_LEN_A		; note new size
StrRTrimX 	RTN_T()

;----------------------------------------------- StrFunct
StrFunct: ;prepare for string manipulation
 		jsr 	StrPush 	; push the string
 		lda 	#',' 		; check & skip ','
 		jsr 	Match
 		jsr 	EvInt 		; Eval expr to int in AX lo/hi
StrPop: ; PopB and swap
 		jsr 	NumPopB
 		jmp 	NumSwap

;----------------------------------------------- StrComp
StrComp: ; Compare the strings, sets NUM_FLG
 		LDY 	#0
 		STY 	NUM_FLG 	; clear result flag
StrCompL 	LDA 	(S_PTR_A),y
 		CMP 	(S_PTR_B),y
 		BCC 	StrCompLT
 		BNE 	StrCompGT 	; go set result
 		;-- equal, is it end of strings?
 		CMP 	#0 		; is end of strings?
 		BEQ 	StrCompEQ 	; yes, resultis EQUAL
 		LDA 	#0
 		STA 	(S_PTR_B) 	; make sure StrA is terminated (kill append)
 		;-- test next character
 		iny
 		BNE 	StrCompL
 		ERROR(ERR_RANGE) 	; 'Out Of Range' - string too long

StrCompGT 	SMB2 	NUM_FLG 	; set bit2:GT
 		bra 	StrCompX

StrCompLT 	SMB0 	NUM_FLG 	; set bit0:LT
 		bra 	StrCompX

StrCompEQ 	SMB1 	NUM_FLG 	; set bit1:EQ

StrCompX	rts

; BCS LE the carry flag is set when the value in memory is less than or equal to the accumulator,
; BCC GT reset when it is greater than the accumulator

;======================================================================================

.nolist
#if _DB_STR
;----------------------------------------------- DB_Str
DB_Str: ; Debug String values - PtrA LenA PtrB LenB, VEND SEND SLEN ZRd
 		PUSHALL()
 		PRINTLN("PtrA LenA PtrB LenB")
 		HEX_INT(S_PTR_A)
 		HEX_INT(S_LEN_A)
 		HEX_INT(S_PTR_B)
 		HEX_INT(S_LEN_B)
 		CRLF()
 		PRINTLN("VEND SEND SLEN ZRd")
 		HEX_INT(VAREND)
 		HEX_INT(STR_END)
 		HEX_INT(STR_LEN)
 		HEX_INT(ZRd)
 		CRLF()
 		PAUSE()
 		PULLALL()
 		rts

.export S_PTR_A,S_PTR_B,NUM_FLG

#ifdef _TEST
;----------------------------------------------- StrTest
Hi:  		.DB 	T_StrLit,"HellO ",0
Big 		.DB 	T_StrLit,"BiG ",0
Wo:  		.DB 	T_StrLit,"WorlD.",0
StrTest
 		jsr 	StrInit
 		ZSET(ZRd,Hi)
 		jsr 	StrLit
 		ZSET(ZRd,Big)
 		jsr 	StrLit
 		jsr 	StrUpper
 		ZSET(ZRd,Wo)
 		jsr 	StrLit
 		jsr 	StrLower
 		jsr 	StrAppend
 		jsr 	StrAppend
 		jsr 	StrOut
 		rts
#endif 					;_TEST

#endif 					;_DB_STR
.echo "  _Str\t\t"
.echo $-_Str
.echo "\n"
.list

