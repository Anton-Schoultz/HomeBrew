;=================================================================== MATH_DI ==========

; calculator stack depth & mask
#define CSTKSZ 8
#define CSTKMSK 7

; SGN/EXP,  Low, High, Upper , ...
#define FPX	0
#define FPA	1
#define FPB	2
#define FPC	3
#define FPD	4
#define FPE	5
#define FPF	6
#define FPS	7

#define NUM_AA NUM_A+FPA
#define NUM_AB NUM_A+FPB
#define NUM_AC NUM_A+FPC
#define NUM_AD NUM_A+FPD
#define NUM_AE NUM_A+FPE
#define NUM_AF NUM_A+FPF
#define NUM_AX NUM_A+FPX
#define NUM_AS NUM_A+FPS

#define NUM_BA NUM_B+FPA
#define NUM_BB NUM_B+FPB
#define NUM_BC NUM_B+FPC
#define NUM_BD NUM_B+FPD
#define NUM_BE NUM_B+FPE
#define NUM_BF NUM_B+FPF
#define NUM_BX NUM_B+FPX
#define NUM_BS NUM_B+FPS

#define NUM_TMPA NUM_TMP+FPA
#define NUM_TMPB NUM_TMP+FPB
#define NUM_TMPC NUM_TMP+FPC
#define NUM_TMPD NUM_TMP+FPD
#define NUM_TMPE NUM_TMP+FPE
#define NUM_TMPF NUM_TMP+FPF
#define NUM_TMPX NUM_TMP+FPX
#define NUM_TMPS NUM_TMP+FPS

#define NUM_DIVA NUM_DIV+FPA
#define NUM_DIVB NUM_DIV+FPB
#define NUM_DIVC NUM_DIV+FPC
#define NUM_DIVD NUM_DIV+FPD
#define NUM_DIVE NUM_DIV+FPE
#define NUM_DIVF NUM_DIV+FPF
#define NUM_DIVX NUM_DIV+FPX
#define NUM_DIVS NUM_DIV+FPS


#if ($/256) = 0

PARAGRAPH()
;----------------------------------------------- Numeric
Var(NUM_A,8) 	; 30 Number parsed / Primary accumulator
Var(NUM_TMP,8) 	; 38 Temp number
Var(NUM_B,8) 	; 40 Secondary accumulator

Short(NUM_EXP) 	; exponent
Short(NUM_SGN) 	; sign
Short(NUM_DEC) 	; decimals counter
Short(ZDIV) 	; divisor for short division 10/100
Var(NUM_DIV,4) 	; Scratch divisor

Var(DBUGNUM,8) 	; 50 debug value


PARAGRAPH()
Short(NUM_SP) 	; calculator stack pointer

PARAGRAPH() 	; 90
Var(CSTK0,CSTKSZ) ; C0
Var(CSTK1,CSTKSZ) ; C8
Var(CSTK2,CSTKSZ) ; D0
Var(CSTK3,CSTKSZ) ; D8
Var(CSTK4,CSTKSZ) ; E0
Var(CSTK5,CSTKSZ) ; E8
Var(CSTK6,CSTKSZ) ; F0
Var(CSTK7,CSTKSZ) ; F8-FF

.export NUM_A,NUM_B,CSTK0,DBUGNUM


#endif

; ROM AREA

#if ($/256) > $80
;=================================================================== MATH =============
;*  NumAdd               NumA = NumB + NumA
;*  NumAddMan            NumA = NumB + NumA (Mantissa Only)
;*  NumAdj               try to convert (UNPACKED) NUM_A to integer form with E=0
;*  NumCpyA2B            Copy NUM_A to NUM_B (8bytes) - preserves X,Y
;*  NumCpyA2T            Copy NUM_A to TMP (8bytes) - preserves X,Y
;*  NumCpyB2A            Copy NUM_B to NUM_A (8bytes)  - preserves X,Y
;*  NumCvt               Convert NUM_A(unpacked) to digits in NUM_BUF
;*  NumDH                NUM_A = NUM_A / 100 (24bit) remainder in A
;*  NumDN                NUM_A = NUM_A / ZDIV (48bit), remainder in A [AXY]
;*  NumDN3               NUM_A = NUM_A / ZDIV (48bit), remainder in A [AXY]
;*  NumDT                NUM_A = NUM_A / 10 (48Bit), remainder in A
;*  NumDT3               NUM_A = NUM_A / 10 (24Bit), remainder in A
;*  NumDigit             NUM_A = NUM_A * 10 + .A
;*  NumDiv               NumA = NumB / NumA
;*  NumFmt               Apply formatting to leading zeroes based on ZPrFlg
;*  NumGet              retrieve simple variable [X] and unpack to internal form
;*  NumIncA              Increment NUM_A
;*  NumInit              Initialise calculator
;*  NumLoadFP            Load a FP number from ZPg[X] at offset Y
;*  NumLoadFP_AX         Load & unpack Fp number from address AX
;*  NumLoadInt           Load Integer from ZPg[X],Y
;*  NumMH                NUM_A = NUM_A * 100 (24bit) - preserves AXY, destroys NUM_TMP
;*  NumMT                NUM_A = NUM_A * 10 (48Bit) - preserves AXY, destroys NUM_B
;*  NumMul               NumA = NumB * NumA (in unpacked form)
;*  NumNegX              2's compliment the mantissa at X (All 6 bytes)
;*  NumPack              SX AA BB CC  <=  XX AA BB CC DD EE FF SS
;*  NumParse             -- parse a number from source into NUM_A - destorys NUM_TMP
;*  NumPlus              NumB = NumB + NumA (Used in NumMH)
;*  NumPopB              Pop Num_B from the calculator stack
;*  NumPreAS             Prepare to Add/Subtract - align & sign
;*  NumPreMD             Prepare for Mul/Div by unsigning both
;*  NumPrint             Convert number to string & output (via PutChr mem/io)
;*  NumPushA             Push Num_A onto calculator stack
;*  NumRd                read number from memory using ChrRd & unpack to internal form
;*  NumSLA               NUM_A shift left by 1 (*2)
;*  NumSaveFP            Pack and Save a FP number at Zpg[X],Y
;*  NumSaveFP_AX         Pack & save at address AX
;*  NumSaveInt           Convert to int (or error) and save at ZPg[X],Y
;*  NumSaveInt_AX        Convert to int and save at AX
;*  NumSet               Set NUM_A to integer value in AX (lo,Hi)
;*  NumSign              Move sign from mantissa to SGN byte (for mul/div)
;*  NumSpc               blank leading zeroes
;*  NumSub               NumA = NumB + NumA
;*  NumSubMan            NumA = NumB - NumA (Mantissa Only)
;*  NumSup               removing leading zeroes
;*  NumSwap              Swap NUM_A <-> NUM_B, flip sign based on NUM_SGN (00 +, 80 -)
;*  NumUnSign            Move sign from SGN to mantissa (for add/sub)
;*  NumUnpack            SX AA BB CC  =>  XX AA BB CC DD EE FF SS
;*  NumVal               VAL() Get numeric value (NUM_A) from String (STRBUF)
;*  NumWr                -- write number value to memory via ChrWr
;*  NumWrInt             write int number to memory via ChrWr
;*  NumZeroA             place zero into NUM_A
;*  NumZeroB             place zero into NUM_B
;*  NumZeroTmp           place zero into NUM_TMP
;*  NumZeroX             zero the number at .X (extend version EXP,1,2,3,4,5,6)
;*

#ifdef hide
.NOLIST
#endif
; ZTmp
; ZPtr
; ZPrFlg
; NUM_A
; NUM_TMP
; NUM_BUF

; 'Packed' number format
; Sxxx.xxxx AA BB CC			xxx = $40 offset exponent
 		;--
; 'UnPacked'
; xxxx.xxxx AA BB CC DD EE FF SGN	xxx = 2's compl exponent
 		;--

#define LOAD(val) lda #$40\ sta NUM_AX\ lda #LOW(val)\ sta NUM_AA\ lda #HIGH(val)\ sta NUM_AB\ lda #UPPER(val)\ sta NUM_AC\ lda #0\ sta NUM_AD\ sta NUM_AE\ sta NUM_AF




_Math 		= $
;----------------------------------------------- NumInit
NumInit: ; Initialise calculator
 		lda 	#0
 		sta 	NUM_SP 		; zero the number stack pointer
 		rts

;----------------------------------------------- NumRd
NumRd: ; read number from memory using ChrRd & unpack to internal form
 		jsr 	ChrRd
 		sta 	NUM_AX 		; EXP
 		jsr 	ChrRd
 		sta 	NUM_AA 		; L
 		jsr 	ChrRd
 		sta 	NUM_AB 		; H
 		jsr 	ChrRd
 		sta 	NUM_AC 		; U
 		jsr 	NumUnpack 	; pad with zero, extract SGN & 2s exp
 		rts

;----------------------------------------------- NumWr
NumWr: ;-- write number value to memory via ChrWr
 		;-- pack to external form
 		;-- jsr NumPack
 		;-- then write to memory
 		lda 	NUM_AX
 		jsr 	ChrWr
 		lda 	NUM_AA
 		jsr 	ChrWr
 		lda 	NUM_AB
 		jsr 	ChrWr
 		lda 	NUM_AC
 		jsr 	ChrWr
 		rts
;----------------------------------------------- NumPrint
NumPrint: ; Convert number to string & output (via PutChr mem/io)
 		jsr 	NumCvt
 		jsr 	NumFmt
 		LDAX(NUM_BUF)
 		jmp 	PrStrAX

;----------------------------------------------- NumWrInt
NumWrInt: ; write int number to memory via ChrWr
 		lda 	NUM_A+FPA
 		jsr 	ChrWr
 		lda 	NUM_A+FPB
 		jsr 	ChrWr

;----------------------------------------------- NumGet
NumGet: ; retrieve simple variable [X] and unpack to internal form
 		lda 	VARNUM,X
 		sta 	NUM_AX
 		lda 	VARNUM+1,X
 		sta 	NUM_AA
 		lda 	VARNUM+2,X
 		sta 	NUM_AB
 		lda 	VARNUM+3,X
 		sta 	NUM_AC
 		jsr 	NumUnpack 	; pad with zero, extract SGN & 2s exp
 		rts



;======================================================================================

;----------------------------------------------- NumZeroTmp
NumZeroTmp: ; place zero into NUM_TMP
 		phx
 		ldx 	#NUM_TMP
 		bra 	NumZeroX
;----------------------------------------------- NumZeroB
NumZeroB: ; place zero into NUM_B
 		phx
 		ldx 	#NUM_B
 		bra 	NumZeroX
;----------------------------------------------- NumZeroA
NumZeroA: ; place zero into NUM_A
 		phx
 		ldx 	#NUM_A
 		;-- fall through
NumZeroX: ; zero the number at .X (extend version EXP,1,2,3,4,5,6)
 		lda 	#0 		; zero number
 		sta 	FPX,X
 		sta 	FPA,X
 		sta 	FPB,X
 		sta 	FPC,X
 		sta 	FPD,X
 		sta 	FPE,X
 		sta 	FPF,X
 		sta 	FPS,X
 		plx
 		rts

;----------------------------------------------- NumCpyA2B
NumCpyA2B: ; Copy NUM_A to NUM_B (8bytes) - preserves X,Y
 		phx
 		ldx 	#7
NumCpyA2BL 	lda 	NUM_A,x
 		sta 	NUM_B,x
 		dex
 		bpl 	NumCpyA2BL
 		plx
 		rts

;----------------------------------------------- NumCpyA2T
NumCpyA2T: ; Copy NUM_A to TMP (8bytes) - preserves X,Y
 		phx
 		ldx 	#7
NumCpyA2TL 	lda 	NUM_A,x
 		sta 	NUM_TMP,x
 		dex
 		bpl 	NumCpyA2TL
 		plx
 		rts


;----------------------------------------------- NumCpyB2A
NumCpyB2A: ; Copy NUM_B to NUM_A (8bytes)  - preserves X,Y
 		phx
 		ldx 	#7
NumCpyB2AL 	lda 	NUM_B,x
 		sta 	NUM_A,x
 		dex
 		bpl 	NumCpyB2AL
 		plx
 		rts

;----------------------------------------------- NumPushA
NumPushA: ; Push Num_A onto calculator stack
 		ldx 	NUM_SP
 		;--
 		lda 	NUM_AX
 		sta 	CSTK0,X
 		lda 	NUM_AA
 		sta 	CSTK1,X
 		lda 	NUM_AB
 		sta 	CSTK2,X
 		lda 	NUM_AC
 		sta 	CSTK3,X
 		lda 	NUM_AD
 		sta 	CSTK4,X
 		lda 	NUM_AE
 		sta 	CSTK5,X
 		lda 	NUM_AF
 		sta 	CSTK6,X
 		lda 	NUM_AS
 		sta 	CSTK7,X
 		;--
 		inx
 		txa
 		and 	#CSTKMSK
 		sta 	NUM_SP
 		rts
;----------------------------------------------- NumPopB
NumPopB: ; Pop Num_B from the calculator stack
 		dec 	NUM_SP
 		lda 	NUM_SP
 		and 	#CSTKMSK
 		sta 	NUM_SP
 		tax
 		;--
 		lda 	CSTK0,X
 		sta 	NUM_BX
 		lda 	CSTK1,X
 		sta 	NUM_BA
 		lda 	CSTK2,X
 		sta 	NUM_BB
 		lda 	CSTK3,X
 		sta 	NUM_BC
 		lda 	CSTK4,X
 		sta 	NUM_BD
 		lda 	CSTK5,X
 		sta 	NUM_BE
 		lda 	CSTK6,X
 		sta 	NUM_BF
 		lda 	CSTK7,X
 		sta 	NUM_BS
 		;--
 		rts

;----------------------------------------------- NumVal
NumVal: ; VAL() Get numeric value (NUM_A) from String (STRBUF)
 		jsr 	NumZeroA
 		ldy 	#255
NumValL 	iny
 		lda 	NUM_BUF,Y 	; term null
 		beq 	NumValX
 		jsr 	IsDigit 	; messes with A
 		BR_F(NumValX) 		; no more digits
 		;-- ; NUM_A = NUM_A * 10 + .A
 		jsr 	NumDigit
NumValAX 	bra 	NumValL 	; next character
NumValX 	ZCPY4(DBUGNUM,NUM_A) 	; just for me to see it !
 		rts

;----------------------------------------------- NumParse
NumParse: ;-- parse a number from source into NUM_A - destorys NUM_TMP
 		jsr 	NumZeroA
NumParseL 	lda 	CHRGOT 		; term null
 		beq 	NumParseX
 		jsr 	IsDigit 	; messes with A
 		BR_F(NumParseX) 	; no more digits
 		;-- NUM_A = NUM_A * 10 + .A
 		jsr 	NumDigit
NumParseAX 	jsr 	GetChr 		; next character
 		bra 	NumParseL
NumParseX 	lda 	#$40
 		sta 	NUM_AX
 		rts

;----------------------------------------------- NumDigit
NumDigit: ; NUM_A = NUM_A * 10 + .A
 		jsr 	NumMT 		; A*=10
 		and 	#$0F
 		clc
 		adc 	NUM_AA
 		sta 	NUM_AA
 		bcc 	NumDigitX
 		inc 	NUM_AB
 		bcc 	NumDigitX
 		inc 	NUM_AC
NumDigitX 	rts

;----------------------------------------------- NumDH
NumDH: ; NUM_A = NUM_A / 100 (24bit) remainder in A
 		lda 	#100
 		sta 	ZDIV
 		bra 	NumDN
;----------------------------------------------- NumDT
NumDT: ; NUM_A = NUM_A / 10 (48Bit), remainder in A
 		phx
 		phy
 		lda 	#10
 		sta 	ZDIV 		; set divisor to 10
NumDN: ; NUM_A = NUM_A / ZDIV (48bit), remainder in A [AXY]
 		ldy 	#48 		; 48 bits (6 bytes)
 		lda 	#0
 		clc
NumDTa 		rol 	A
 		cmp 	ZDIV
 		bcc 	NumDTb
 		sbc 	ZDIV
NumDTb 		rol 	NUM_AA 		; L 1
 		rol 	NUM_AB 		; H 2
 		rol 	NUM_AC 		; U 3
 		rol 	NUM_AD 		; 4
 		rol 	NUM_AE 		; 5
 		rol 	NUM_AF 		; 6
 		dey
 		bpl 	NumDTa
 		ply
 		plx
 		rts

;----------------------------------------------- NumDT3
NumDT3: ; NUM_A = NUM_A / 10 (24Bit), remainder in A
 		phx
 		phy
 		lda 	#10
 		sta 	ZDIV 		; set divisor to 10
NumDN3: ; NUM_A = NUM_A / ZDIV (48bit), remainder in A [AXY]
 		ldy 	#24 		; 48 bits (6 bytes)
 		lda 	#0
 		clc
NumDT3a 	rol 	A
 		cmp 	ZDIV
 		bcc 	NumDT3b
 		sbc 	ZDIV
NumDT3b 	rol 	NUM_AA 		; L 1
 		rol 	NUM_AB 		; H 2
 		rol 	NUM_AC 		; U 3
 		dey
 		bpl 	NumDT3a
 		ply
 		plx
 		rts


;----------------------------------------------- NumMT
;NumMT: ; NUM_A = NUM_A * 10 (24Bit) - preserves AXY, destroys NUM_TMP
NumMT: ; NUM_A = NUM_A * 10 (48Bit) - preserves AXY, destroys NUM_B
 		pha
 		jsr 	NumCpyA2T 	; NUM_B <= NUM_A
 		jsr 	NumSLA 		; NUM_A << 1       *2
 		jsr 	NumSLA 		;  *4
 		;-- NUM_A += NUM_TMP
 		clc
 		lda 	NUM_TMPA
 		adc 	NUM_AA
 		sta 	NUM_AA
 		lda 	NUM_TMPB
 		adc 	NUM_AB
 		sta 	NUM_AB
 		lda 	NUM_TMPC
 		adc 	NUM_AC
 		sta 	NUM_AC
 		lda 	NUM_TMPD
 		adc 	NUM_AD
 		sta 	NUM_AD
 		lda 	NUM_TMPE
 		adc 	NUM_AE
 		sta 	NUM_AE
 		lda 	NUM_TMPF
 		adc 	NUM_AF
 		sta 	NUM_AF
 		;--
 		jsr 	NumSLA
 		pla
 		rts

;----------------------------------------------- NumSLA
NumSLA: ; NUM_A shift left by 1 (*2)
 		asl 	NUM_AA
 		rol 	NUM_AB
 		rol 	NUM_AC
 		rol 	NUM_AD
 		rol 	NUM_AE
 		rol 	NUM_AF
 		rts

;----------------------------------------------- NumPlus
NumPlus: ; NumB = NumB + NumA (Used in NumMH)
 		clc
 		lda 	NUM_BA
 		adc 	NUM_AA
 		sta 	NUM_BA
 		lda 	NUM_BB
 		adc 	NUM_AB
 		sta 	NUM_BB
 		lda 	NUM_BC
 		adc 	NUM_AC
 		sta 	NUM_BC
 		lda 	NUM_BD
 		adc 	NUM_AD
 		sta 	NUM_BD
 		lda 	NUM_BE
 		adc 	NUM_AE
 		sta 	NUM_BE
 		lda 	NUM_BF
 		adc 	NUM_AF
 		sta 	NUM_BF
 		rts

;----------------------------------------------- NumMH
NumMH: ; NUM_A = NUM_A * 100 (24bit) - preserves AXY, destroys NUM_TMP
 		pha
 		jsr 	NumCpyA2B 	; B=n
 		jsr 	NumSLA 		; A=2n
 		jsr 	NumSLA 		; A=4n
 		jsr 	NumSLA 		; A=8n
 		jsr 	NumPlus 	; B=9n
 		jsr 	NumSLA 		; A=16n
 		jsr 	NumAddMan 	; A+=B = 16n+9n = 25n
 		jsr 	NumSLA 		; A=50n
 		jsr 	NumSLA 		; A=100n
 		pla
 		rts

;----------------------------------------------- NumSign
NumSign: ; Move sign from mantissa to SGN byte (for mul/div)
 		lda 	FPS,X 		; sign in EXP byte
 		bpl 	NumNegXX 	; positive so nothing to change
 		lda 	#0
 		sta 	FPX,X 		; clear sign byte
 		bra 	NumNegX 	; complement mantissa

;----------------------------------------------- NumUnSign
NumUnSign: ; Move sign from SGN to mantissa (for add/sub)
 		lda 	FPS,X 		; get sign
 		bmi 	NumNegXX 	; already -ve so leave it alone
 		lda 	FPC,X 		; get hit bit
 		bpl 	NumNegXX 	; positive -> leave it
 		lda 	#$80
 		sta 	FPS,X 		; set sign bit in SGN
 		;-- fall through to complement mantissa
;----------------------------------------------- NumNegX
NumNegX: ; 2's compliment the mantissa at X (All 6 bytes)
 		lda 	#$FF
 		eor 	FPA,X
 		sta 	FPA,X
 		lda 	#$FF
 		eor 	FPB,X
 		sta 	FPB,X
 		lda 	#$FF
 		eor 	FPC,X
 		sta 	FPC,X
 		;--
 		lda 	#$FF
 		eor 	FPD,X
 		sta 	FPD,X
 		lda 	#$FF
 		eor 	FPE,X
 		sta 	FPE,X
 		lda 	#$FF
 		eor 	FPF,X
 		sta 	FPF,X
 		;--
 		inc 	FPA,X
 		bne 	NumNegXX
 		inc 	FPB,X
 		bne 	NumNegXX
 		inc 	FPC,X
 		;--
 		bne 	NumNegXX
 		inc 	FPD,X
 		bne 	NumNegXX
 		inc 	FPE,X
 		bne 	NumNegXX
 		inc 	FPF,X
 		;--
NumNegXX 	rts


;----------------------------------------------- NumSaveFP_AX
NumSaveFP_AX: ; Pack & save at address AX
 		sta 	ZPtr
 		stx 	ZPtr+1
 		phy
 		ldy 	#0
 		bra 	NumSaveFP1
;----------------------------------------------- NumSaveFP
NumSaveFP: ; Pack and Save a FP number at Zpg[X],Y
 		;--
 		jsr 	PtrX 		; ZPtr = ZPg[X]
 		;--
 		phy
NumSaveFP1 	jsr 	NumPack 	; pack into 4 byte format
 		;--
 		lda 	NUM_AX
 		sta 	(ZPtr),y
 		iny
 		lda 	NUM_AA
 		sta 	(ZPtr),y
 		iny
 		lda 	NUM_AB
 		sta 	(ZPtr),y
 		iny
 		lda 	NUM_AC
 		sta 	(ZPtr),y
 		;--
 		ply
 		RTN_T()

;----------------------------------------------- NumLoadFP_AX
NumLoadFP_AX: ; Load & unpack Fp number from address AX
 		phy
 		jsr 	PtrAXY
 		bra 	NumLoadFP1
;----------------------------------------------- NumLoaFP
NumLoadFP: ; Load a FP number from ZPg[X] at offset Y
 		jsr 	PtrX 		; ZPtr = ZPg[X]
 		phy
NumLoadFP1 	lda 	(ZPtr),y
 		sta 	NUM_AX
 		iny
 		lda 	(ZPtr),y
 		sta 	NUM_AA
 		iny
 		lda 	(ZPtr),y
 		sta 	NUM_AB
 		iny
 		lda 	(ZPtr),y
 		sta 	NUM_AC
 		jsr 	NumUnpack 	; unpack for internal use
 		ply
 		RTN_T()

;----------------------------------------------- NumSaveInt_AX
NumSaveInt_AX: ; Convert to int and save at AX
 		phy
 		jsr 	PtrAXY
 		bra 	NumSaveInt1
;----------------------------------------------- NumSaveInt
NumSaveInt: ; Convert to int (or error) and save at ZPg[X],Y
 		jsr 	PtrX
 		;--
 		phy 			; store Y
 		;--
NumSaveInt1 	jsr 	NumAdj 		; try to get E=0
 		lda 	NUM_AX
 		bne 	NumSaveIntErr 	; can't get E=0
 		lda 	NUM_AC
 		bne 	NumSaveIntErr 	; overflow error
 		lda 	NUM_AB
 		bmi 	NumSaveInt2 	; treat as if it was U16
 		;-- otherwise as S16
 		jsr 	NumSign 	; get binary as 2's complement
 		;--
NumSaveInt2 	ply 			; restore Y
 		;--
 		lda 	NUM_AA
 		sta 	(ZPtr),y
 		iny
 		lda 	NUM_AB
 		sta 	(ZPtr),y
 		dey
 		rts

; TODO  Stop 'Convert to integer overflow error'
NumSaveIntErr 	Stop(1)


;----------------------------------------------- NumLoadInt
NumLoadInt: ; Load Integer from ZPg[X],Y
 		jsr 	PtrX 		; ZPtr = ZPg[X]
 		phy
 		iny
 		lda 	(ZPtr),y 	; get hi
 		tax
 		dey
 		lda 	(ZPtr),y 	; get lo
 		;-- fall through to NumSet
;----------------------------------------------- NumSet
NumSet: ; Set NUM_A to integer value in AX (lo,Hi)
 		sta 	NUM_AA
 		stx 	NUM_AB
 		lda 	#0
 		sta 	NUM_AC
 		lda 	#$40 		; + E0
 		sta 	NUM_AX
 		;-- fall through to Unpack it
;----------------------------------------------- NumUnpack
NumUnpack: ; SX AA BB CC  =>  XX AA BB CC DD EE FF SS
 		lda 	#0
 		sta 	NUM_AD
 		sta 	NUM_AE
 		sta 	NUM_AF
 		sta 	NUM_AS
 		;--
 		lda 	NUM_AX
 		bpl 	NumUnpack1
 		and 	#$7F 		; mask the neg flag
 		dec 	NUM_AS 		; SGN=FF
NumUnpack1 	sec 			; remove offset
 		sbc 	#$40
 		sta 	NUM_AX 		; 2s exponent
 		rts

;----------------------------------------------- NumPack
NumPack: ; SX AA BB CC  <=  XX AA BB CC DD EE FF SS
 		lda 	NUM_AX
 		clc
 		adc 	#$40 		; add offset
 		asl 	a
 		asl 	NUM_AS
 		ror 	a
 		sta 	NUM_AX
 		rts

;----------------------------------------------- NumAdj
NumAdj: ; try to convert (UNPACKED) NUM_A to integer form with E=0
 		jsr 	NumCpyA2B 	;- save best value so far
 		lda 	NUM_AX
 		bmi 	NumAdjUp
 		bne 	NumAdjDwn
 		rts 			; Success
NumAdjUp 	; /10 incr E
 		jsr 	NumDT 		; /10
 		inc 	NUM_AX 		; X++
 		cmp 	#0 		; remainder = 0?
 		beq 	NumAdj 		; good, we can use this
 		bne 	NumAdjX 	; fail, restore & exit
NumAdjDwn 	; *10 decr E
 		jsr 	NumMT 		; *10
 		dec 	NUM_AX 		; X--
 		lda 	NUM_AD
 		beq 	NumAdj 		; ok, go again
 		;-- overflow, restore & exit
NumAdjX 	jsr 	NumCpyB2A 	; get best result
 		rts

;----------------------------------------------- NumCvt
NumCvt: ; Convert NUM_A(unpacked) to digits in NUM_BUF
 		ldx 	#NUM_A
 		jsr 	NumUnSign 	; make mantissa positive

 		;-- fill buffer with zeroes
 		ldx 	#CVTSZ-1
 		lda 	#0
 		sta 	NUM_BUF,x 	;u
 		dex
 		sta 	NUM_BUF,x 	;t
 		dex
 		sta 	NUM_BUF,x 	;-
 		dex
 		sta 	NUM_BUF,x 	;E
 		dex
NumCvtL 	;- num/10 remainder .A as digit
 		;-- jsr 	NumDT 		; div NUM_TMP by 10, remainder in A
 		jsr 	NumDT3 		; div NUM_TMP by 10, remainder in A

 		ora 	#'0' 		; convert remainder to a digit
 		sta 	NUM_BUF,X 	; store the digit
 		dex 			; back-up one pos to the left
 		bpl 	NumCvtL 	; loop until done
 		;-- EXP
 		lda 	NUM_AX 		; 2's exp (unpacked)
 		beq 	NumCvtS 	; exp is zero so don't place Exx
 		;-- find first non-zero
 		ldx 	#$FF
NumCvt1 	inx
 		cpx 	#CVTSZ-4 	; incase its all zeroes
 		beq 	NumCvt2
 		lda 	NUM_BUF+1,X
 		cmp 	#'0'
 		beq 	NumCvt1
 		;-- insert the point
NumCvt2 	sta 	NUM_BUF,X
 		lda 	#'.'
 		sta 	NUM_BUF+1,X
 		;-- work out resulting Exp
 		txa
 		eor 	#$ff
 		inc 	A
 		clc
 		adc 	NUM_AX
 		clc
 		adc 	#8
 		sta 	NUM_EXP
 		;-- if E00 then suppress it
 		beq 	NumCvtS
 		tay
 		;-- append the E
 		ldx 	#CVTSZ-4
 		;-- 'E'
 		lda 	#'e'
 		sta 	NUM_BUF,X
 		inx
 		;-- negative exp?
 		tya
 		bpl 	NumCvtE
 		lda 	#'-'
 		sta 	NUM_BUF,X
 		inx
 		;-- complement exp
 		tya
 		eor 	#$ff
 		inc 	a
 		tay
NumCvtE 	;-- exponent as digits
 		tya 			; recal exp
 		phx
 		jsr 	Bin2BCD 	; to bcd in .X .A
 		plx
 		tay 			;Save A for LSD
 		lsr 	a
 		lsr 	a
 		lsr 	a 		; MSD to LSD position
 		lsr 	a
 		ora 	#'0'
 		sta 	NUM_BUF,x
 		inx
 		tya 			; Restore A and then
 		and 	#$0F
 		ora 	#'0'
 		sta 	NUM_BUF,x
 		inx
 		lda 	#0
 		sta 	NUM_BUF,X
NumCvtS 	;-- Place sign in NR[0] based on SGN
 		lda 	#'0' 		; leading zero
 		sta 	NUM_BUF
 		;-- check if negative
 		lda 	NUM_AS
 		bpl 	NumCvtX
 		lda 	#'-' 		; replace by '-' for negative
 		sta 	NUM_BUF 	; place sign at Res[0]
NumCvtX 	rts

;----------------------------------------------- NumFmt
NumFmt: ; Apply formatting to leading zeroes based on ZPrFlg
 		BR_ZSUP(NumSup) 	; TMP = NUM_A
 		;-- suppress leading zeroes
 		BR_ZSPC(NumSpc) 	; blank leading zeroes
 		rts

;----------------------------------------------- NumSup
NumSup: ; removing leading zeroes
 		ldx 	#0
 		ldy 	#0
 		lda 	NUM_BUF
 		cmp 	#'-'
 		bne 	NumSupL
 		inx
 		iny

NumSupL 	lda 	NUM_BUF,y
 		cmp 	#'0'
 		bne 	NumSupC 	; go copy
 		iny
 		cpy 	#CVTSZ-1
 		bmi 	NumSupL


NumSupC 	lda 	NUM_BUF,y
 		sta 	NUM_BUF,x
 		beq 	NumSupX
 		inx
 		iny
 		bra 	NumSupC

NumSupX 	rts

;----------------------------------------------- NumSpc
NumSpc: ; blank leading zeroes
 		ldy 	#0
 		lda 	NUM_BUF
 		cmp 	#'-'
 		bne 	NumSpcL
 		iny
NumSpcL 	lda 	NUM_BUF,y
 		cmp 	#'0'
 		bne 	NumSpcX 	; go copy
 		lda 	#' '
 		sta 	NUM_BUF,y
 		iny
 		cpy 	#CVTSZ-1
 		bne 	NumSpcL
NumSpcX 	rts

;----------------------------------------------- NumSwap
NumSwap: ; Swap NUM_A <-> NUM_B, flip sign based on NUM_SGN (00:+, 80:-)
 		ldx 	#7
NumSwapL 	ldy 	NUM_A,x
 		lda 	NUM_B,x
 		sta 	NUM_A,x
 		sty 	NUM_B,x
 		dex
 		bpl 	NumSwapL
 		;--
 		lda 	NUM_SGN
 		eor 	#$80
 		sta 	NUM_SGN

; 		lda 	NUM_AS
; 		eor 	NUM_SGN
; 		sta 	NUM_AS
; 		;--
; 		lda 	NUM_BS
; 		eor 	NUM_SGN
; 		sta 	NUM_BS
 		rts

;----------------------------------------------- NumPreAS
; on entry, set NUM_SGN to 00 for add or $80 for subtract
NumPreAS: ; Prepare to Add/Subtract - align & sign

; 		Stop(1)

NumPreAS1 	sec
 		lda 	NUM_AX 		; 120   E=0 S=0 M=120
 		sbc 	NUM_BX 		; 1.2	E-1 S=0 M=12
 		beq 	NumPreASX 	; already the same
 		;-- need to align 	; A=1 - (-1) = 1
 		bmi 	NumPreAS2
 		;-- need to reduce A.EXP
 		jsr 	NumMT 		; A E=-1 S=0 M=1200
 		dec 	NUM_AX
 		bra 	NumPreAS1 	; 1200+12 = 1212e-1 = 121.2

NumPreAS2 	; BX is bigger, swap A<->B
 		jsr 	NumSwap
 		bra 	NumPreAS1

NumPreASX 	;-- aligned so now apply sign to the mantissas
 		lda 	NUM_SGN
 		bpl 	NumPreAS3
 		jsr 	NumSwap 	; swap back

NumPreAS3 	ldx 	#NUM_A
 		jsr 	NumUnSign 	; move sign to mantissa
 		ldx 	#NUM_B
 		jsr 	NumUnSign
 		rts
;----------------------------------------------- NumAdd
NumAdd: ; NumA = NumB + NumA
 		lda 	#0 		; 00 for Add, 80 for Sub
 		sta 	NUM_SGN
 		jsr 	NumPreAS
 		jsr 	NumAddMan
 		RTN_T()
;----------------------------------------------- NumSub
NumSub: ; NumA = NumB + NumA
; 		lda 	#$80 		; 00 for Add, 80 for Sub
 		lda 	#0
 		sta 	NUM_SGN
 		jsr 	NumPreAS
 		jsr 	NumSubMan
 		RTN_T()


;----------------------------------------------- NumAddMan
NumAddMan: ; NumA = NumB + NumA (Mantissa Only)
 		clc
 		lda 	NUM_BA
 		adc 	NUM_AA
 		sta 	NUM_AA
 		lda 	NUM_BB
 		adc 	NUM_AB
 		sta 	NUM_AB
 		lda 	NUM_BC
 		adc 	NUM_AC
 		sta 	NUM_AC
 		lda 	NUM_BD
 		adc 	NUM_AD
 		sta 	NUM_AD
 		lda 	NUM_BE
 		adc 	NUM_AE
 		sta 	NUM_AE
 		lda 	NUM_BF
 		adc 	NUM_AF
 		sta 	NUM_AF
 		RTN_T()

;----------------------------------------------- NumSubMan
NumSubMan: ; NumA = NumB - NumA (Mantissa Only)
 		sec
 		lda 	NUM_BA
 		sbc 	NUM_AA
 		sta 	NUM_AA
 		lda 	NUM_BB
 		sbc 	NUM_AB
 		sta 	NUM_AB
 		lda 	NUM_BC
 		sbc 	NUM_AC
 		sta 	NUM_AC
 		lda 	NUM_BD
 		sbc 	NUM_AD
 		sta 	NUM_AD
 		lda 	NUM_BE
 		sbc 	NUM_AE
 		sta 	NUM_AE
 		lda 	NUM_BF
 		sbc 	NUM_AF
 		sta 	NUM_AF
 		RTN_T()

;----------------------------------------------- NumPreMD
NumPreMD: ; Prepare for Mul/Div by unsigning both
 		ldx 	#NUM_A
 		jsr 	NumUnSign 	; Sign Man->Exp
 		ldx 	#NUM_B
 		jsr 	NumUnSign 	; Sign Man->Exp
 		;-- work out resultant sign for mul/div
 		lda 	NUM_AS
 		eor 	NUM_BS
 		sta 	NUM_SGN 	; resultant sign
 		;--
 		rts

;----------------------------------------------- NumMul
NumMul: ; NumA = NumB * NumA (in unpacked form)
 		jsr 	NumPreMD 	; pull signs out (make both pos)
 		;-- result Exp = ExpB+ExpA
 		clc
 		lda 	NUM_BX
 		adc 	NUM_AX
 		sta 	NUM_EXP 	; save on it's own for now
 		;-- zero extended result
 		lda 	#0
 		sta 	NUM_AD
 		sta 	NUM_AE
 		sta 	NUM_AF
 		ldx 	#24 		;There are 24 bits in NA
 		;-- Shift NA to the right, lowest bit into CY
 		lsr 	NUM_AC
 		ror 	NUM_AB
 		ror 	NUM_AA
 		;--
NumMul1 	bcc 	NumMul2 	;0 or 1?
 		;-- bit is 1 so add
 		clc
 		lda 	NUM_BA
 		adc 	NUM_AD
 		sta 	NUM_AD
 		;--
 		lda 	NUM_BB
 		adc 	NUM_AE
 		sta 	NUM_AE
 		;--
 		lda 	NUM_BC
 		adc 	NUM_AF
 		sta 	NUM_AF
 		;--
NumMul2 	;shift result right (equivalent to shift B left )
 		clc
 		ror 	NUM_AF
 		ror 	NUM_AE
 		ror 	NUM_AD
 		ror 	NUM_AC
 		ror 	NUM_AB
 		ror 	NUM_AA
 		;-- loop for each bit
 		dex 			; does not affect CY
 		bne 	NumMul1
 		;-- U H L
 		;-- 6 5 4 3 2 1  0 	NUM_A
 		;-- 00032A5F38D7 XP    Binary fraction
 		;-- adjust to fit

NumMul3 	; adjust NUM_A so extended bytes are zeroed (/10, incr EXP) set EXP byte
 		;-- check for 100s
 		lda 	NUM_AF
 		ora 	NUM_AE
 		beq 	NumMul5 	; no, div10

NumMul4 	;-- div 100
 		jsr 	NumDH 		; divide by 100
 		inc 	NUM_EXP 	; and bump EXP up
 		inc 	NUM_EXP 	; and bump EXP up
 		;-- round 100
 		cmp 	#50
 		bmi 	NumMul3 	; < 0.5
 		jsr 	NumIncA 	; round up
 		bra 	NumMul3

NumMul5 	lda 	NUM_AD
 		beq 	NumMul7
 		cmp 	#$64 		; div by 100 if we can
 		bmi 	NumMul4

NumMul6 	;- check div 10
 		jsr 	NumDT 		; divide by 10
 		inc 	NUM_EXP 	; and bump EXP up
 		;-- half round
 		cmp 	#5
 		bmi 	NumMul5 	; < 0.5
 		jsr 	NumIncA 	; round up

 		bra 	NumMul5

NumMul7 	;- check that high byte bit7 is zero
 		lda 	NUM_AC
 		bpl 	NumMulX 	; ok
 		;-- need one more division
 		jsr 	NumDT 		; divide by 10
 		inc 	NUM_EXP 	; and bump EXP up
 		cmp 	#5
 		bmi 	NumMulX 	; < 0.5
 		jsr 	NumIncA 	; round up

NumMulX 	;-- place 2s exp into A
 		lda 	NUM_EXP
 		sta 	NUM_AX
 		lda 	NUM_SGN
 		sta 	NUM_AS
 		jsr 	NumAdj
 		;--
 		RTN_T()
;----------------------------------------------- NumIncA
NumIncA: ; Increment NUM_A
 		inc 	NUM_AA
 		bne 	NumIncAX
 		inc 	NUM_AB
 		bne 	NumIncAX
 		inc 	NUM_AC
 		bne 	NumIncAX
 		inc 	NUM_AD
 		bne 	NumIncAX
 		inc 	NUM_AE
 		bne 	NumIncAX
 		inc 	NUM_AF
NumIncAX 	rts

;----------------------------------------------- NumDiv
NumDiv: ; NumA = NumB / NumA
 		jsr 	NumPreMD 	; pull signs out (make both pos)
 		;-- result Exp = ExpB - ExpA
 		sec
 		lda 	NUM_B+FPX
 		sbc 	NUM_AX
 		sta 	NUM_EXP 	; save on it's own for now
 		;-- place divisor in NUM_DIV
 		ZCPY4(NUM_DIV,NUM_A)
 		;-- zero result (6 bytes)
 		jsr 	NumZeroA
 		;-- zero TMP
 		sta 	NUM_TMP+FPA
 		sta 	NUM_TMP+FPB
 		sta 	NUM_TMP+FPC
 		;--
 		ldx 	#48 		; 48 bit division
NumDivL 	;-- shift a bit from dividend into temp
 		asl 	NUM_BA
 		rol 	NUM_BB
 		rol 	NUM_BC
 		;-- now pull the bit into NUM_TMP
 		rol 	NUM_TMPA
 		rol 	NUM_TMPB
 		rol 	NUM_TMPC
 		;-- try subtract divisor from temp TMP=TMP-DIV
 		sec
 		lda 	NUM_TMPA
 		sbc 	NUM_DIVA
 		sta 	NUM_TMPA
 		lda 	NUM_TMPB
 		sbc 	NUM_DIVB
 		sta 	NUM_TMPB
 		lda 	NUM_TMPC
 		sbc 	NUM_DIVC
 		sta 	NUM_TMPC
 		;-- if ok, shift 1 into result
 		bcs 	NumDiv2 	; continue C=1
 		;-- subtract failed, put it back TMP=TMP+DIV
 		lda 	NUM_TMPA
 		adc 	NUM_DIVA
 		sta 	NUM_TMPA
 		lda 	NUM_TMPB
 		adc 	NUM_DIVB
 		sta 	NUM_TMPB
 		lda 	NUM_TMPC
 		adc 	NUM_DIVC
 		sta 	NUM_TMPC
 		clc
NumDiv2 	; save result bit
 		rol 	NUM_AA
 		rol 	NUM_AB
 		rol 	NUM_AC
 		rol 	NUM_AD
 		rol 	NUM_AE
 		rol 	NUM_AF
 		;-- next bit
 		dex
 		bne 	NumDivL
; 345 46786
 		;-- does it need to be normalised?
 		lda 	NUM_AA
 		ora 	NUM_AB
 		ora 	NUM_AC
 		beq 	NumDiv9

 		;-- now normalise and Pack the result
 		ldx 	#5
 		;--
NumDiv3 	lda 	NUM_AF
 		bne 	NumDiv7
 		;-- high is zero so mult by 100 and double decr
 		jsr 	NumMH
 		dec 	NUM_AX
 		dec 	NUM_AX
 		dex
 		bpl 	NumDiv3
NumDiv7 	lda 	NUM_AF
 		cmp 	#$F8
 		bpl 	NumDiv8
 		jsr 	NumMT
 		dec 	NUM_AX
 		dex
 		bpl 	NumDiv7
NumDiv8 	;-- round
 		lda 	NUM_AC
 		bpl 	NumDiv9
 		inc 	NUM_AD
 		bne 	NumDiv9
 		inc 	NUM_AE
 		bne 	NumDiv9
 		inc 	NUM_AF

NumDiv9 	lda 	NUM_AD
 		sta 	NUM_AA
 		lda 	NUM_AE
 		sta 	NUM_AB
 		lda 	NUM_AF
 		sta 	NUM_AC
 		lda 	#0
 		sta 	NUM_AD
 		sta 	NUM_AE
 		sta 	NUM_AF
 		;--
 		jsr 	NumAdj
 		RTN_T()




.echo "  _Math\t\t"
.echo $-_Math
.echo "\n"
.list
#endif
