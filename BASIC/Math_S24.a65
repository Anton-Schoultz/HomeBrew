#ifdef hide 					; Math_S24
.NOLIST
#endif

;=================================================================== MATH_S24 ========= 
; 24 But signed integer math

#if ($/256) = 0

; these are defined in Vars
; NUMUSZ = size of numeric value once 'unpacked' for calcualtions
; Var(NUM_A,NUMUSZ) 	; Number parsed / Primary accumulator
; Var(NUM_TMP,NUMUSZ) 	; Temp number
; Var(NUM_B,NUMUSZ) 	; Secondary accumulator
; Var(NUM_DIV,NUMUSZ) 	; Scratch divisor
; Short(NUM_SP) 	; calculator stack pointer
; Short(NUM_SGN) 	; sign

#endif

#if ($/256) > $80
;=================================================================== MATH ============= 
;*  DB_Num               Debug Math Registers NUMA, NUMB
;*  NumAdd               NumA = NumB + NumA
;*  NumAnd               AND
;*  NumCvt               Convert NUM_A to digits in NUM_BUF
;*  NumDH                NUM_A = NUM_A / 100  remainder in A
;*  NumDT                NUM_A = NUM_A / 10 (48Bit), remainder in A
;*  NumDiv               NumA = NumB / NumA
;*  NumDivZero           divide by zero error
;*  NumFalse             Place FALSE in NUM_A
;*  NumFlag              set flags bassed on unpacked result
;*  NumFromInt           Set NUMA to 16 bit Int value in AX (lo,hi)
;*  NumGet               Recall and unpack VARNUM[A] .A is (0-31)
;*  NumGetPtr            recall variable from (ZPtr).. and then unpack it
;*  NumMH                NUM_A = NUM_A * 100
;*  NumMT                NUM_A = NUM_A * 10
;*  NumMod               NumA = NumB % NumA
;*  NumMul               NumA = NumB * NumA (in unpacked form)
;*  NumNegX              2's compliment the mantissa at X (All 6 bytes)
;*  NumNot               Negate the true/false result in NUM_A
;*  NumOr                OR
;*  NumPack              Pack NUM_A into memory format for storing
;*  NumParsePtr          Parse a number from (ZParse) into NUM_A
;*  NumPoint             Point ZPtr to the variable indexed by A (0-31)
;*  NumPrint             Convert number to string & output (via PutChr mem/io)
;*  NumRd                Read from memory via (ChrRd) & unpack into NUM_A
;*  NumRnd               Random number 0-32767  -> NUM_AA,B
;*  NumSet               Pack and Store simple VARNUM[A]  .A is (0-31)
;*  NumSetPtr            Pack value and store to (ZPtr)...
;*  NumSign              Move sign from SGN to mantissa (for Add/Sub)
;*  NumSub               NumA = NumB - NumA
;*  NumToInt             Return 16 bit Int value of NUMA in AX (lo,hi) - sets NUM_FLG
;*  NumTrue              Place TRUE in NUM_A
;*  NumUnSign            Move sign from mantissa to SGN byte (for Mul/Div)
;*  NumUnpack            Unpack memory format into calculation format
;*  NumWr                Pack & write to Memory (ChrWr)
;*  NumXor               XOR
;*  NumZeroA             place zero into NUM_A
;*m MATHOFF()            convert index in .A to an offset in .X based on size of numbers
;*

.list
#ifdef hide
.NOLIST
#endif
; ZTmp
; ZPtr
; ZPrFlg
; NUM_A
; NUM_TMP
; NUM_BUF

; MATHOFF()  convert index in .A to an offset in .X based on size of numbers
#define MATHOFF() sta ZTmp\ asl a\ adc ZTmp\ tax

; Int constant for 1
#define NUMONE 1

; 6578 -> 6613 	changed to use ZPtr in preparation of combining FOR/NEXT/GOSUB stacks and arrays

;------------------------------------------------------- NumPoint 
NumPoint: ;  Point ZPtr to the variable indexed by A (0-31)
 		sta 	ZTmp
 		asl 	a 			; high bit of A is zero, so this clears carry
 		adc 	ZTmp 			; offset is in A
 		adc 	#LOW(VARNUM) 		; low address
 		sta 	ZPtr
 		lda 	#0
 		adc 	#HIGH(VARNUM) 		; hi of vars
 		sta 	ZPtr+1
 		rts

;------------------------------------------------------- NumGet 
NumGet: ; Recall and unpack VARNUM[A] .A is (0-31)
 		jsr 	NumPoint 		; (ZPtr)-> VAR[.A]
;------------------------------------------------------- NumGetPtr 
NumGetPtr: ; recall variable from (ZPtr).. and then unpack it
 		ldy 	#0
 		sty 	NUM_AS 			; clear the sign (+ve)
 		;-- 
 		lda 	(ZPtr),y 		; L
 		sta 	NUM_AA
 		iny
 		lda 	(ZPtr),y 		; H
 		sta 	NUM_AB
 		iny
 		lda 	(ZPtr),y 		; U
 		sta 	NUM_AC
 		;-- 
 		jmp 	NumUnpack 		; pad NUMA with zero, extract SGN & 2s exp

;------------------------------------------------------- NumSet 
NumSet: ; Pack and Store simple VARNUM[A]  .A is (0-31)
 		jsr 	NumPoint 		; (ZPtr)-> VAR[.A]
;------------------------------------------------------- NumSetPtr 
NumSetPtr: ; Pack value and store to (ZPtr)...
 		jsr 	NumPack
 		;-- 
 		ldy 	#0
 		lda 	NUM_AA
 		sta 	(ZPtr),Y 		; L
 		iny
 		lda 	NUM_AB
 		sta 	(ZPtr),Y 		; H
 		iny
 		lda 	NUM_AC
 		sta 	(ZPtr),Y 		; U
 		;-- 
 		rts

;------------------------------------------------------- NumUnpack 
NumUnpack: ; Unpack memory format into calculation format
;  for S16 this simply means pulling the sign out
 		ldx 	#NUM_A
 		bra 	NumUnSign

;------------------------------------------------------- NumPack 
NumPack: ; Pack NUM_A into memory format for storing
;  for S16 we just apply the sign to the mantissa
 		ldx 	#NUM_A
 		bra 	NumSign

;------------------------------------------------------- NumToInt 
NumToInt: ;Return 16 bit Int value of NUMA in AX (lo,hi) - sets NUM_FLG
 		jsr 	NumFlag 		; set flags >,=,<
 		jsr 	NumPack
 		lda 	NUM_AA 			; lo->.A
 		ldx 	NUM_AB 			; hi->.X
 		rts

;------------------------------------------------------- NumFromInt 
NumFromInt: ;Set NUMA to 16 bit Int value in AX (lo,hi)
 		sta 	NUM_AA
 		stx 	NUM_AB
 		lda 	#0
 		sta 	NUM_AS 			; assume +v
 		sta 	NUM_AC 			; clear upper byte
 		bra 	NumUnpack

;------------------------------------------------------- NumSign 
NumSign: ; Move sign from SGN to mantissa (for Add/Sub)
 		lda 	FPS,X 			; sign byte
 		bpl 	NumNegXX 		; positive so nothing to change
 		lda 	#0
 		sta 	FPS,X 			; clear sign byte
 		bra 	NumNegX 		; complement mantissa

;------------------------------------------------------- NumUnSign 
NumUnSign: ; Move sign from mantissa to SGN byte (for Mul/Div)
 		lda 	FPS,X 			; get sign
 		bmi 	NumNegXX 		; already -ve so leave it alone
 		;-- 
 		lda 	FPC,X 			; get high bit C.7		<== 16/24
 		bpl 	NumNegXX 		; positive -> leave it
 		;-- 
 		lda 	#$FF
 		sta 	FPS,X 			; set sign bit in SGN
 		;-- fall through to complement mantissa
;------------------------------------------------------- NumNegX 
NumNegX: ; 	; 2's compliment the mantissa at X (All 6 bytes)
 		;-- compliment
 		lda 	#$FF
 		eor 	FPA,X
 		sta 	FPA,X
 		lda 	#$FF
 		eor 	FPB,X
 		sta 	FPB,X
 		lda 	#$FF
 		eor 	FPC,X
 		sta 	FPC,X
 		;-- increment
 		inc 	FPA,X
 		bne 	NumNegXX
 		inc 	FPB,X
 		bne 	NumNegXX
 		inc 	FPC,X
 		;-- 
NumNegXX 	RTN_T()

;------------------------------------------------------- NumParsePtr 
NumParsePtr: ;  Parse a number from (ZParse) into NUM_A
; Returns Y as offest to char after the number
; for S16 use NumParse = Parse Integer from source to NUM_AA (returns value in AX)
 		lda 	#0
 		tay 				; Y=0
 		sta 	NUM_AS
 		lda 	(ZParse),Y
 		cmp 	#'-'
 		bne 	NumParse0
 		dec 	NUM_AS 			; make it $FF
 		;-- read over the '-'
 		iny
 		;-- parse number from input
NumParse0 	lda 	#0
 		sta 	NUM_AA
 		sta 	NUM_AB
 		sta 	NUM_AC
 		sta 	NUM_AD
NumParseL 	;- term NULL ?
 		lda 	(ZParse),Y
 		beq 	NumParseX 		; yes -> done
NumParse1 	jsr 	IsDigit 		; A is preserved
 		BR_F(NumParseX) 		; no more digits
 		and 	#$0F 			; convert digit to value
 		;-- NUM_AA = NUM_AA * 10 (preserves AXY)
 		;-- store AXY
 		phx
 		phy
 		pha
 		;-- 
 		jsr 	NumMT
 		;-- 
 		;-- restore AXY
 		pla
 		ply
 		plx
 		;-- now add the digit value
 		clc 				; and add to NUM_AA
 		adc 	NUM_AA
 		sta 	NUM_AA
 		bcc 	NumParseAX
 		inc 	NUM_AB
 		bcc 	NumParseAX
 		inc 	NUM_AC
NumParseAX 	;- next character
 		iny
 		lda 	(ZParse),Y
 		sta 	CHRGOT
 		bra 	NumParseL
NumParseX 	rts

;------------------------------------------------------- NumMH 
NumMH: ; NUM_A = NUM_A * 100
 		jsr 	NumMT
;------------------------------------------------------- NumMT 
NumMT: ; NUM_A = NUM_A * 10
 		;-- TMP = A
 		lda 	NUM_AA
 		sta 	NUM_TMPA
 		lda 	NUM_AB
 		sta 	NUM_TMPB
 		lda 	NUM_AC
 		sta 	NUM_TMPC
 		;-- A<<1 (2n)
 		asl 	NUM_AA
 		rol 	NUM_AB
 		rol 	NUM_AC
 		;-- A<<1 (4n)
 		asl 	NUM_AA
 		rol 	NUM_AB
 		rol 	NUM_AC
 		;-- add TMP (5n)
 		clc
 		lda 	NUM_AA
 		adc 	NUM_TMPA
 		sta 	NUM_AA
 		;-- 
 		lda 	NUM_AB
 		adc 	NUM_TMPB
 		sta 	NUM_AB
 		;-- 
 		lda 	NUM_AC
 		adc 	NUM_TMPC
 		sta 	NUM_AC
 		;-- A<<1 (10n)
 		asl 	NUM_AA
 		rol 	NUM_AB
 		rol 	NUM_AC
 		;-- =====
 		rts
;------------------------------------------------------- NumCvt 
NumCvt: ; Convert NUM_A to digits in NUM_BUF
; NUM should be in unpacked form (with sign extracted)
; -########e##.		DIGITS=8
; 0123456789abcdef
 		ldx 	#NUM_A
 		jsr 	NumUnSign 		; extract sign
 		;-- null at the end
 		ldx 	#DIGITS
 		lda 	#0
 		sta 	NUM_BUF+1,X 		; (for e##, use +4)
 		;-- fill buffer with '0's
 		lda 	#'0'
NumCvtClr 	sta 	NUM_BUF,X
 		dex
 		bpl 	NumCvtClr
 		;-- conversion results starts at [digit] and works backwards
 		ldx 	#DIGITS
NumCvtL 	;- num/100 remainder .A as 0-99
 		phx 				; save X
 		jsr 	NumDH 			; div NUM_A by 100, remainder in A
 		tax 				; convert A to BCD
 		lda 	BinTbl,x 		; via look up
 		plx 				; recall X
 		;-- BCD to digits
 		pha 				; save BCD
 		and 	#$f 			; mask low digit
 		ora 	#'0' 			; to ascii
 		sta 	NUM_BUF,X 		; into the buffer
 		dex 				; back-up one pos to the left
 		pla 				; recall BCD
 		lsr 	a 			; get high digit into lower bits
 		lsr 	a
 		lsr 	a
 		lsr 	a
 		ora 	#'0' 			; to ascii
 		sta 	NUM_BUF,X 		; store the digit
 		dex 				; back-up one pos to the left
 		;-- loop until X <= 0
 		beq 	NumCvtS
 		bpl 	NumCvtL
 		;-- BUF[0] is for sign
NumCvtS 	;-- Place sign in NR[0] based on SGN
 		lda 	#'0' 			; leading zero
 		sta 	NUM_BUF
 		;-- check if negative
 		lda 	NUM_AS 			; extracted sign +:00 -:FF
 		beq 	NumCvtX
 		lda 	#'-' 			; replace by '-' for negative
 		sta 	NUM_BUF 		; place sign at Res[0]
NumCvtX 	rts

;------------------------------------------------------- NumDH 
NumDH: ; NUM_A = NUM_A / 100  remainder in A
 		phy
 		lda 	#100
 		sta 	ZDIV
 		bra 	NumDN
;------------------------------------------------------- NumDT 
NumDT: ; NUM_A = NUM_A / 10 (48Bit), remainder in A
 		phy
 		lda 	#10
 		sta 	ZDIV 			; set divisor to 10

NumDN 		; NUM_A = NUM_A / ZDIV (24bit), remainder in A [AXY]
 		ldy 	#24 			; no of bits	<== 16/24
 		lda 	#0
 		clc
NumDN1 		rol 	A
 		cmp 	ZDIV
 		bcc 	NumDN2
 		sbc 	ZDIV
NumDN2 		rol 	NUM_AA 			; L 1
 		rol 	NUM_AB 			; H 2
 		rol 	NUM_AC 			; U 3		<== 16/24
 		dey 				; NZ
 		bpl 	NumDN1 			; br if bit7=0

 		ply
 		rts

;------------------------------------------------------- NumRd 
NumRd: ; Read from memory via (ChrRd) & unpack into NUM_A
; ZRd points to the token before this value
 		lda 	#0
 		sta 	NUM_AS 			; clear sign (+ve)
 		jsr 	ChrRd
 		sta 	NUM_AA 			; L
 		jsr 	ChrRd
 		sta 	NUM_AB 			; H
 		jsr 	ChrRd
 		sta 	NUM_AC 			; U
NumRdX 		rts

;------------------------------------------------------- NumWr 
NumWr: ; Pack & write to Memory (ChrWr)
 		lda 	NUM_AS
 		bpl 	NumWr1
 		;-- apply -ve to the 16 bit valuen in NUM_A
 		ldx 	#NUM_A
 		jsr 	NumSign
 		;-- write to memory
NumWr1 		lda 	NUM_AA
 		jsr 	ChrWr
 		lda 	NUM_AB
 		jsr 	ChrWr
 		lda 	NUM_AC
 		jsr 	ChrWr
 		rts
;------------------------------------------------------- NumPrint 
NumPrint: ; Convert number to string & output (via PutChr mem/io)
 		jsr 	NumCvt 			; NUM_A to string in NUM_BUF
 		jsr 	NumFmt
 		LDAX(NUM_BUF)
 		jmp 	PrStrAX

;------------------------------------------------------- NumFlag 
NumFlag: ; set flags bassed on unpacked result
 		;-- Comparisson flags .2> .1= .0<
 		lda 	#0 			; clear all flags
 		sta 	NUM_FLG
 		;-- 
 		lda 	NUM_AS
 		bpl 	NumFlagGE
 		SMB0 	NUM_FLG 		; set bit0:LT
 		bra 	NumFlagX 		; done

NumFlagGE 	lda 	NUM_AA
 		ora 	NUM_AB
 		ora 	NUM_AC
 		beq 	NumFlagEQ
 		;-- Not zero, so positive
 		SMB2 	NUM_FLG 		; set bit2:GT
 		bra 	NumFlagX

 		;-- equal
NumFlagEQ 	SMB1 	NUM_FLG 		; set bit1:EQ

NumFlagX 	;-- exit
 		lda 	NUM_FLG 		; EQ:2
 		cmp 	#2 			; sets Z,C,N
 		rts 				; done

;------------------------------------------------------- NumPreAS 
NumPreAS 	; Prepare to Add/Subtract - align & sign
 		ldx 	#NUM_A
 		jsr 	NumSign 		; move sign to mantissa
 		ldx 	#NUM_B
 		jmp 	NumSign

;------------------------------------------------------- NumAdd 
NumAdd: ; NumA = NumB + NumA
 		jsr 	NumPreAS 		; sign the mantissas
 		clc
 		;-- this could be looped, but only saves 4 bytes and adds cycles ...
 		lda 	NUM_BA
 		adc 	NUM_AA
 		sta 	NUM_AA
 		lda 	NUM_BB
 		adc 	NUM_AB
 		sta 	NUM_AB
 		lda 	NUM_BC
 		adc 	NUM_AC
 		sta 	NUM_AC
 		ldx 	#NUM_A
 		jmp 	NumUnSign 		; extract sign again

;------------------------------------------------------- NumSub 
NumSub: ; NumA = NumB - NumA
 		jsr 	NumPreAS 		; sign the mantissas
 		sec
 		;-- this could be looped, but only saves 4 bytes and adds cycles ...
 		lda 	NUM_BA
 		sbc 	NUM_AA
 		sta 	NUM_AA
 		lda 	NUM_BB
 		sbc 	NUM_AB
 		sta 	NUM_AB
 		lda 	NUM_BC
 		sbc 	NUM_AC
 		sta 	NUM_AC
 		;-- 
 		ldx 	#NUM_A
 		jmp 	NumUnSign 		; extract sign again

;------------------------------------------------------- NumPreMD 
NumPreMD 	; Prepare for Mul/Div by unsigning both
 		ldx 	#NUM_A
 		jsr 	NumUnSign 		; Sign Man->Exp
 		ldx 	#NUM_B
 		jsr 	NumUnSign 		; Sign Man->Exp
 		;-- work out resultant sign for mul/div
 		lda 	NUM_AS
 		eor 	NUM_BS
 		sta 	NUM_SGN 		; resultant sign
 		;-- 
 		rts

;------------------------------------------------------- NumMul 
NumMul: ; NumA = NumB * NumA (in unpacked form)
 		jsr 	NumPreMD 		; pull signs out (make both pos)
 		;-- zero extended result
 		lda 	#0
 		sta 	NUM_AD
 		sta 	NUM_AE
 		sta 	NUM_AF
 		ldx 	#24 			; bits in NA
 		;-- Shift NA to the right, lowest bit into CY
 		lsr 	NUM_AC
 		ror 	NUM_AB
 		ror 	NUM_AA
 		;-- 
NumMul1 	bcc 	NumMul2 		;0 or 1?
 		;-- bit is 1 so add to DEF
 		clc
 		lda 	NUM_BA
 		adc 	NUM_AD
 		sta 	NUM_AD
 		;-- 
 		lda 	NUM_BB
 		adc 	NUM_AE
 		sta 	NUM_AE
 		;-- 
 		lda 	NUM_BC
 		adc 	NUM_AF
 		sta 	NUM_AF
NumMul2 	;shift result right (equivalent to shift B left )
 		clc
 		ror 	NUM_AF
 		ror 	NUM_AE
 		ror 	NUM_AD
 		ror 	NUM_AC
 		ror 	NUM_AB
 		ror 	NUM_AA
 		;-- loop for each bit
 		dex 				; does not affect CY
 		bne 	NumMul1
 		;-- place thes sign
 		lda 	NUM_SGN
 		sta 	NUM_AS
 		RTN_T()

;------------------------------------------------------- NumIncA 
NumIncA 	; Increment NUM_A
 		inc 	NUM_AA
 		bne 	NumIncAX
 		inc 	NUM_AB
 		bne 	NumIncAX
 		inc 	NUM_AC
 		bne 	NumIncAX
 		inc 	NUM_AD
 		bne 	NumIncAX
NumIncAX 	rts

;------------------------------------------------------- NumMod 
NumMod: ; NumA = NumB % NumA
 		jsr 	NumDiv
 		lda 	NUM_TMPA
 		sta 	NUM_AA
 		lda 	NUM_TMPB
 		sta 	NUM_AB
 		lda 	NUM_TMPC
 		sta 	NUM_AC
 		RTN_T()

;------------------------------------------------------- NumDivZero 
NumDivZero: ; divide by zero error
 		ERROR(ERR_DIV0)

;------------------------------------------------------- NumDiv 
NumDiv: ; NumA = NumB / NumA
 		jsr 	NumPreMD 		; pull signs out (make both pos)
 		;-- place divisor in NUM_DIV
 		ZCPY6(NUM_DIV,NUM_A)
 		;-- check divide by zero
 		lda 	NUM_DIV+FPA
 		ora 	NUM_DIV+FPB
 		ora 	NUM_DIV+FPC
 		beq 	NumDivZero
 		;-- zero result (6 bytes)
 		jsr 	NumZeroA
 		;-- zero TMP
 		sta 	NUM_TMP+FPA
 		sta 	NUM_TMP+FPB
 		sta 	NUM_TMP+FPC
 		;-- 
 		ldx 	#24 			; bits to divide
NumDivL 	;-- shift a bit from dividend into temp
 		asl 	NUM_BA
 		rol 	NUM_BB
 		rol 	NUM_BC
 		;-- now pull the bit into NUM_TMP
 		rol 	NUM_TMPA
 		rol 	NUM_TMPB
 		rol 	NUM_TMPC
 		;-- try subtract divisor from temp TMP=TMP-DIV
 		sec
 		lda 	NUM_TMPA
 		sbc 	NUM_DIVA
 		sta 	NUM_TMPA
 		;-- 
 		lda 	NUM_TMPB
 		sbc 	NUM_DIVB
 		sta 	NUM_TMPB
 		;-- 
 		lda 	NUM_TMPC
 		sbc 	NUM_DIVC
 		sta 	NUM_TMPC
 		;-- if ok, shift 1 into result
 		bcs 	NumDiv2 		; continue C=1
 		;-- subtract failed, put it back TMP=TMP+DIV
 		lda 	NUM_TMPA
 		adc 	NUM_DIVA
 		sta 	NUM_TMPA
 		;-- 
 		lda 	NUM_TMPB
 		adc 	NUM_DIVB
 		sta 	NUM_TMPB
 		;-- 
 		lda 	NUM_TMPC
 		adc 	NUM_DIVC
 		sta 	NUM_TMPC
 		clc
NumDiv2 	; save result bit
 		rol 	NUM_AA
 		rol 	NUM_AB
 		rol 	NUM_AC
 		;-- next bit
 		dex
 		bne 	NumDivL
NumDiv8 	;-- round ?
 		;-- place the sign
 		lda 	NUM_SGN
 		sta 	NUM_AS
 		RTN_T()

;------------------------------------------------------- NumAnd 
NumAnd: ; AND
 		lda 	NUM_AA
 		and 	NUM_BA
 		sta 	NUM_AA
 		;-- 
 		lda 	NUM_AB
 		and 	NUM_BB
 		sta 	NUM_AB
 		;-- 
 		lda 	NUM_AC
 		and 	NUM_BC
 		sta 	NUM_AC
 		;-- 
 		rts

;------------------------------------------------------- NumOr 
NumOr: ; OR
 		lda 	NUM_AA
 		ora 	NUM_BA
 		sta 	NUM_AA
 		;-- 
 		lda 	NUM_AB
 		ora 	NUM_BB
 		sta 	NUM_AB
 		;-- 
 		lda 	NUM_AC
 		ora 	NUM_BC
 		sta 	NUM_AC
 		;-- 
 		rts

;------------------------------------------------------- NumXor 
NumXor: ; XOR
 		lda 	NUM_AA
 		eor 	NUM_BA
 		sta 	NUM_AA
 		;-- 
 		lda 	NUM_AB
 		eor 	NUM_BB
 		sta 	NUM_AB
 		;-- 
 		lda 	NUM_AC
 		eor 	NUM_BC
 		sta 	NUM_AC
 		;-- 
 		rts


;------------------------------------------------------- NumNot 
NumNot: ; Negate the true/false result in NUM_A
 		lda 	NUM_AA
 		bne 	NumFalse
NumTrue: ; Place TRUE in NUM_A
 		phx
 		ldx 	#NUM_A
 		lda 	#$FF
 		jmp 	NumPreSet 		; set as FF FFFF

;------------------------------------------------------- NumZeroTmp 
NumZeroTmp 	; place zero into NUM_TMP
 		phx
 		ldx 	#NUM_TMP
 		bra 	NumZeroX
;------------------------------------------------------- NumZeroB 
NumZeroB 	; place zero into NUM_B
 		phx
 		ldx 	#NUM_B
 		bra 	NumZeroX
;------------------------------------------------------- NumZeroA 
NumZeroA: ; place zero into NUM_A
NumFalse: ; Place FALSE in NUM_A
 		phx
 		ldx 	#NUM_A
 		;-- fall through
NumZeroX 	; zero the number at .X (extend version EXP,1,2,3,4,5,6)
 		lda 	#0 			; zero 00 0000
NumPreSet 	sta 	FPA,X
 		sta 	FPB,X
 		sta 	FPC,X
 		sta 	FPS,X
 		plx
 		rts

;------------------------------------------------------- NumRnd 
NumRnd: ; Random number 0-32767  -> NUM_AA,B
; for 16 bit version randomise in memory, then fetch it
; https://codebase64.org/doku.php?id=base:small_fast_16-bit_prng
; 2048 'magic' numbers, I'm using $ca65
#define rand VARNUM
#define RANDH $ca
#define RANDL $65
 		;-- random sequence in rand,rand+1 = VAR[0}
 		lda 	rand
 		beq 	NumRnd1
 		asl 	rand
 		lda 	rand+1
 		rol 	a
 		bcc 	NumRnd2
NumRnd0 	eor 	#RANDH
 		sta 	rand+1
 		lda 	rand
 		eor 	#RANDL
 		sta 	rand
 		bra 	NumRndX
NumRnd1 	lda 	rand+1
 		beq 	NumRnd0
 		asl 	a
 		beq 	NumRnd2
 		bcs 	NumRnd0
NumRnd2 	sta 	rand+1
 		;-- ora	rand 		; exclude zero
 		;-- beq	NumRnd
NumRndX 	;-- get as a number
 		lda 	rand
 		ldx 	rand+1
 		jmp 	NumFromInt

#if _DB_NUM
;=================================================================== DBUG ============= 
DB_Num: ; Debug Math Registers NUMA, NUMB
 		PUSHALL()

 		PRINT("NUMA:s")
 		HEX_SHORT(NUM_AS)
 		lda 	#'x'
 		jsr 	ChrOut
 		HEX_SHORT(NUM_AX)
 		lda 	#'#'
 		jsr 	ChrOut
 		HEX_SHORT(NUM_AC)
 		HEX_SHORT(NUM_AB)
 		HEX_SHORT(NUM_AA)
 		jsr 	PrNL

; 		PRINT("NUMB:")
; 		HEX_SHORT(NUM_BS)
; 		HEX_SHORT(NUM_BX)
; 		HEX_INT(NUM_BC)
; 		HEX_INT(NUM_BA)
; 		jsr 	PrNL

 		PULLALL()
 		PAUSE()
 		rts
#endif

.list

#endif
