#ifdef hide 					; Util
.NOLIST
#endif
;=================================================================== UTIL =============
;*  Hex2Nib              '0..9A..F' -> to nibble in A (C=1 Valid) [A]
;*  HexDump              hex dump memory (ZPtr) to output io/mem
;*  IntDH                Divide ZTMP by 10, remainder in A (trash X)
;*  IntDH_AX             Divide AX by 10, result in ZTMP, remainder in A
;*  IntDT                Divide TMP by 10, remainder in A
;*  IntPrint             Print integer (U16) AX to mem/io via PutChr
;*  IntPrintZX           copy ZPg[x] to TMP and print it
;*  PrADec2              Print A as decimal digits 00-99
;*  PrAHex               Print A as Hex digits (send/write) [A]
;*  PrAXHex              Print AX(lo/hi) as 4 hex digits [A]
;*  PrNL                 print CR,LF to ChrOut -> io
;*  PrNib                Convert hex nibble and Print it (preserves XY)
;*  PtrAX                set ZPtr to valkue in AX (lo,hi)
;*  PtrAXY               set ZPtr to AX (lo,hi) and set Y to zero
;*  PtrX                 Set ZPtr from ZPg[.X]
;*  _PrHexInt            print int .A.X as hex value with space
;*  _PrHexShort          print int .A.X as hex value with space
;*  _Print_              Print in-line string
;*m DBUG(str,adr)        print sting and data value
;*m HEX_DUMP(adr)        Print hex dump to IO/Mem [Zptr++]
;*m HEX_INT(adr)         print hex value
;*m HEX_SHORT(adr)       print hex value
;*m PRINT(str)           echo str to output
;*m PRINT(str)           echo str to output, with CR,LF
;*

#if _DBUG
; HEX_DUMP(adr) Print hex dump to IO/Mem [Zptr++]
#define HEX_DUMP(adr) ZSET(ZPtr,adr) \ jsr HexDump
; PRINT(str) echo str to output
#define PRINT(str) jsr _Print_ \ .db str,0
; PRINT(str) echo str to output, with CR,LF
#define PRINTLN(str) jsr _Print_ \ .db str,0 \ jsr PrNL
; DBUG(str,adr) print sting and data value
#define DBUG(str,adr) jsr _Print_ \ .db str,$80 \ .dw adr \ jsr PrNL
; HEX_INT(adr) print hex value
#define HEX_INT(adr)  GETAX(adr) \ jsr _PrHexInt
; HEX_SHORT(adr) print hex value
#define HEX_SHORT(adr)  lda adr \ jsr _PrHexShort

#endif

#define CRLF() jsr PrNL


_Util 		= $

BinTbl
.db $00,$01,$02,$03,$04,$05,$06,$07,$08,$09
.db $10,$11,$12,$13,$14,$15,$16,$17,$18,$19
.db $20,$21,$22,$23,$24,$25,$26,$27,$28,$29
.db $30,$31,$32,$33,$34,$35,$36,$37,$38,$39
.db $40,$41,$42,$43,$44,$45,$46,$47,$48,$49
.db $50,$51,$52,$53,$54,$55,$56,$57,$58,$59
.db $60,$61,$62,$63,$64,$65,$66,$67,$68,$69
.db $70,$71,$72,$73,$74,$75,$76,$77,$78,$79
.db $80,$81,$82,$83,$84,$85,$86,$87,$88,$89
.db $90,$91,$92,$93,$94,$95,$96,$97,$98,$99

 		;-- Bin2BCDTbl
 		;-- .byte	$63,$31,$15,$07,$03,$01,$00

Nib2HexTbl
;    ____ BCD:0______
.db "0123456789ABCDEF"

;------------------------------------------------------- IntPrintX
IntPrintZX: ; copy ZPg[x] to TMP and print it
 		lda 	0,X
 		sta 	TMP
 		lda 	0,X
 		sta 	TMP+1
 		bra 	IntPrintTMP

;------------------------------------------------------- IntPrint
IntPrint: ; Print integer (U16) AX to mem/io via PutChr
; 65535:2276c, 10000:2246, 1000:1781 - div 10 method
 		sta 	TMP
 		stx 	TMP+1
IntPrintTMP 	ldy 	#$FF
 		phy 				; marker on the stack
IntPrint1 	jsr 	IntDT 			; ZTMP /= 10, remainder in A
 		ora 	#'0'
 		pha 				; push the digit
 		lda 	TMP 			; done?
 		ora 	TMP+1
 		bne 	IntPrint1 		; no- loop
IntPrint2 	;- now pop & print the digits
 		pla
 		bmi 	IntPrintX 		; found the marker so exit
 		jsr 	ChrOut
 		bra 	IntPrint2
IntPrintX 	rts

;------------------------------------------------------- IntDH_AX
IntDH_AX: ; Divide AX by 10, result in ZTMP, remainder in A
 		sta 	TMP
 		stx 	TMP+1
 		;-- fall through
;------------------------------------------------------- IntDH
IntDH: ; Divide ZTMP by 10, remainder in A (trash X)
 		ldx 	#16
 		lda 	#0
IntDH_AX1 	asl 	TMP
 		rol 	TMP+1
 		rol 	a
 		cmp 	#100
 		bcc 	IntDH_AX2
 		sbc 	#100
 		inc 	TMP
IntDH_AX2 	dex
 		bne 	IntDH_AX1
 		rts

;------------------------------------------------------- IntDT_AX
;IntDT_AX: ; Divide AX by 10, result in TMP, remainder in A
; 		sta 	TMP
; 		stx 	TMP+1
 		;-- fall through
;------------------------------------------------------- IntDT
IntDT: ; Divide TMP by 10, remainder in A
; used by IntPrint
 		ldx 	#16
 		lda 	#0
IntDT_AX1 	asl 	TMP
 		rol 	TMP+1
 		rol 	a
 		cmp 	#10
 		bcc 	IntDT_AX2
 		sbc 	#10
 		inc 	TMP
IntDT_AX2 	dex
 		bne 	IntDT_AX1
 		rts

;=================================================================== UTIL_PTR =========
;------------------------------------------------------- PtrX
PtrX: ; Set ZPtr from ZPg[.X]
 		;-- get base pointer into ZPtr
 		lda 	0,X
 		sta 	ZPtr
 		lda 	1,X
 		sta 	ZPtr+1
 		rts

;------------------------------------------------------- PtrAXY
PtrAXY: ; set ZPtr to AX (lo,hi) and set Y to zero
 		ldy 	#0
;------------------------------------------------------- PtrAX
PtrAX: ; set ZPtr to valkue in AX (lo,hi)
 		sta 	ZPtr
 		stx 	ZPtr+1
 		rts

;------------------------------------------------------- PrNL
PrNL: ; print CR,LF to ChrOut -> io
 		lda 	#CR
 		jsr 	ChrOut
 		lda 	#LF
 		jmp 	ChrOut

;=================================================================== UTIL_HEX =========

;------------------------------------------------------- PrAXHex
PrAXHex: ; Print AX(lo/hi) as 4 hex digits [A]
 		pha 				; save ZTmp
 		txa 				; get high
 		jsr 	PrAHex 			; print hi as hex digits
 		pla 				; restore ZTmp
 		;-- fall through to print ZTmp as hex digits
;------------------------------------------------------- PrAHex
PrAHex: ; Print A as Hex digits (send/write) [A]
 		pha 				;Save A for LSD
 		lsr 	a
 		lsr 	a
 		lsr 	a 			; MSD to LSD position
 		lsr 	a
 		jsr 	PrNib 			; Output hex digit
 		pla 				; Restore A and then
 		;-- fall through to print hex routine
;------------------------------------------------------- PrNib
PrNib: ; Convert hex nibble and Print it (preserves XY)
 		phx 				; save X
 		and 	#$0F 			; Mask LSD for hex print
; 		BR_NBCD(PrNibX) 	; non-bcd -> PrNibX
; 		;-- BCD so add 16 for second part of table
; 		clc
; 		adc 	#$10 		; add 16 for BCD part of table
PrNibX 		tax
 		lda 	Nib2HexTbl,X 		; Look Up
 		plx
 		jmp 	ChrOut 			; Write/Send

;------------------------------------------------------- Hex2Nib
Hex2Nib: ; '0..9A..F' -> to nibble in A (C=1:Valid) [A]
 		eor 	#'0' 			; Map digits to 0-9
 		cmp 	#9+1 			; Is it a decimal digit?
 		bcc 	Hex2Nib9 		; Yes!
 		adc 	#$08 			; Map letter "A"-"F" to $FA-FF
 		cmp 	#$7A 			; Hex letter?
 		bcc 	Hex2NibFPX 		; No! Character not hex
Hex2Nib9 	sec 				; set carry flag to indicate valid
Hex2NibFPX 	and 	#$0F
 		rts 				; carry clear if invalid char


#if _DBUG
;=================================================================== UTIL-DBUG ========
;------------------------------------------------------- _Print_
; PSEUDO-CODE
_Print_: ;Print in-line string
 		jsr 	RegSave 		; save registers
 		;-- pop the return address from the jsr call
 		pla
 		plx
 		;-- set up to print from there (ZPtr)
 		SETAX(ZDPtr) 			; [0] is part of call [1] is data
 		ldy 	#0
_Print_L 	iny 				; next char
 		lda 	(ZDPtr),y
 		beq 	_Print_X 		; zero -> exit
 		bmi 	_Print_HX
 		jsr 	ChrOut 			; print character
 		bra 	_Print_L 		; loop back (no more than 255 chars)
_Print_HX 	; print hex data
 		iny
 		lda 	(ZDPtr),y 		; lo
 		sta 	ZDBug
 		iny
 		lda 	(ZDPtr),y 		; lo
 		sta 	ZDBug+1
 		iny
 		phy
 		;--
 		lda 	#'='
 		jsr 	ChrOut
 		lda 	#'$'
 		jsr 	ChrOut
 		;--
 		ldy 	#1
 		lda 	(ZDBug),y 		; hi data
 		jsr 	PrAHex
 		dey
 		lda 	(ZDBug),y 		; lo data
 		jsr 	PrAHex
 		jsr 	PrNL
 		;--
 		ply
 		;--
 		;-- Calculate the return address
_Print_X 	tya 				; y is offset to the null
 		sec 				; adjust one more
 		adc 	ZDPtr 			; + Len
 		sta 	ZDPtr 			; -> lo
 		lda 	#0
 		adc 	ZDPtr+1
 		sta 	ZDPtr+1
 		;-- restore registers
 		jsr 	RegLoad
_PrintFPX 	jmp 	(ZDPtr) 		; jump to code after the in-line string

;------------------------------------------------------- _PrHexShort
_PrHexShort: ; print int .A.X as hex value with space
 		jsr 	PrAHex
 		lda 	#' '
 		jmp 	ChrOut

;------------------------------------------------------- _PrHexInt
_PrHexInt: ; print int .A.X as hex value with space
 		jsr 	PrAXHex
 		lda 	#' '
 		jmp 	ChrOut

;------------------------------------------------------- HexDump
HexDump: ; hex dump memory (ZPtr) to output io/mem
 		lda 	ZPtr+1
 		jsr 	PrAHex
 		lda 	ZPtr
 		jsr 	PrAHex
 		lda 	#' '
 		jsr 	ChrOut
 		ldy 	#0
HexDumpL 	; dump a line of bytes
 		lda 	(ZPtr),y
 		jsr 	PrAHex
 		lda 	#' '
 		jsr 	ChrOut
 		iny
 		cpy 	#HEXSZ
 		bne 	HexDumpL
 		ldy 	#0
HexDumpL1 	; dump a line of bytes
 		lda 	(ZPtr),y
 		BR_ALT(32,HexDump1) 		; a<' '?
 		BR_AGT(127,HexDump1)
 		jsr 	ChrOut 			;printable
 		bra 	HexDump2
HexDump1 	; non printable
 		lda 	#'.'
 		jsr 	ChrOut
HexDump2 	iny
 		cpy 	#HEXSZ
 		bne 	HexDumpL1
 		jsr 	PrNL
 		;-- move ZPtr to next line
 		clc
 		lda 	#HEXSZ
 		adc 	ZPtr
 		sta 	ZPtr
 		bcc 	HexDumpX
 		inc 	ZPtr+1
HexDumpX 	rts
#endif

;=================================================================== UTIL_BCD =========
;------------------------------------------------------- PrADec2
PrADec2: ; Print A as decimal digits 00-99  (Preserves X,Y)
 		phx
 		tax
 		lda 	BinTbl,x
 		jsr 	PrAHex
 		plx
 		rts

#if _LEVEL >= _DETAIL
.echo "  _Util\t\t"
.echo $-_Util
.echo "\n"
#endif

.LIST
