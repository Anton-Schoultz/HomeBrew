#ifdef hide	; Util
.NOLIST
#endif

;=================================================================== UTIL =============
;*  Bin2BCD              Convert binary value in A (0-99) into BCD in A, (high digit in X)
;*  Hex2Nib              '0..9A..F' -> to nibble in A (C=1 Valid) [A]
;*  HexDump              hex dump memory (ZPtr) to output io/mem
;*  IntAXx10             AX * 10 -> AX (uses TMP)
;*  IntDH                Divide ZTMP by 10, remainder in A (trash X)
;*  IntDH_AX             Divide AX by 10, result in ZTMP, remainder in A
;*  IntDT                Divide TMP by 10, remainder in A
;*  IntDT_AX             Divide AX by 10, result in TMP, remainder in A
;*  IntParse             Parse Integer from source (GetChr) to TMP  (returns U16 in AX)
;*  IntPrint             Print integer (U16) AX to mem/io via PutChr
;*  IntPrintZX           copy ZPg[x] to TMP and print it
;*  IntTmpMT             TMP = TMP * 10 (preserves AXY)
;*  PrADec2              Print A as decimal digits 00-99
;*  PrADec3              Print A as decimal digits 000-255
;*  PrAHex               Print A as Hex digits (send/write) [A]
;*  PrAXHex              Print AX(lo/hi) as 4 hex digits [A]
;*  PrNL                 print CR,LF to PutChr -> mem/io
;*  PrNib                Convert hex nibble and Print it (preserves XY)
;*  PtrAX                set ZPtr to valkue in AX (lo,hi)
;*  PtrAXY               set ZPtr to AX (lo,hi) and set Y to zero
;*  PtrX                 Set ZPtr from ZPg[.X]
;*  _PrHexInt            print int .A.X as hex value with space
;*  _PrHexShort          print int .A.X as hex value with space
;*  _Print_              Print in-line string
;*m DBUG(str,adr)        print sting and data value
;*m HEX_DUMP(adr)        Print hex dump to IO/Mem [Zptr++]
;*m HEX_INT(adr)         print hex value
;*m HEX_SHORT(adr)       print hex value
;*m PRINT(str)           echo str to output
;*m PRINT(str)           echo str to output, with CR,LF
;*

#if _DBUG
; HEX_DUMP(adr) Print hex dump to IO/Mem [Zptr++]
#define HEX_DUMP(adr) ZSET(ZPtr,adr) \ jsr HexDump
; PRINT(str) echo str to output
#define PRINT(str) jsr _Print_ \ .db str,0
; PRINT(str) echo str to output, with CR,LF
#define PRINTLN(str) jsr _Print_ \ .db str,0 \ jsr PrNL
; DBUG(str,adr) print sting and data value
#define DBUG(str,adr) jsr _Print_ \ .db str,$80 \ .dw adr \ jsr PrNL
; HEX_INT(adr) print hex value
#define HEX_INT(adr)  GETAX(adr) \ jsr _PrHexInt
; HEX_SHORT(adr) print hex value
#define HEX_SHORT(adr)  lda adr \ jsr _PrHexShort

#endif

#define CRLF() jsr PrNL


_Util 		= $

;=================================================================== UTIL_INT =========

; === This method is faster, but works with pairs of digits so suppression is a bit funny
;  ;----------------------------------------------- IntPrint
;  IntPrint: ; Print integer AX to mem/io via PutChr
;  ;              10000:2084		- using /100 & BCD print
;  ; 65535:1741   10000:1717	1151	- using 100 byte table
;   		sta 	TMP
;   		stx 	TMP+1
;   		lda 	#$FF 		; marker
;   		pha 			; -> on the stack
;  IntPrint1 	jsr 	IntDH 		; ZTMP /= 10, remainder in A
;   		pha 			; push remainder as digit pair 0-99
;   		lda 	TMP 		; done?
;   		ora 	TMP+1
;   		bne 	IntPrint1 	; no- loop
;  IntPrint2 	;- now pop & print the digits
;   		pla
;   		cmp 	#$FF 		; marker?
;   		beq 	IntPrintX 	; found the marker so exit
;   		jsr 	PrADec2
;   		bra 	IntPrint2
;  IntPrintX 	rts

;----------------------------------------------- IntPrintX
IntPrintZX: ; copy ZPg[x] to TMP and print it
 		lda 	0,X
 		sta 	TMP
 		lda 	0,X
 		sta 	TMP+1
 		bra 	IntPrintTMP

;----------------------------------------------- IntPrint
IntPrint: ; Print integer (U16) AX to mem/io via PutChr
; 65535:2276c, 10000:2246, 1000:1781 - div 10 method
 		sta 	TMP
 		stx 	TMP+1
IntPrintTMP 	ldy 	#$FF
 		phy 			; marker on the stack
IntPrint1 	jsr 	IntDT 		; ZTMP /= 10, remainder in A
 		ora 	#'0'
 		pha 			; push the digit
 		lda 	TMP 		; done?
 		ora 	TMP+1
 		bne 	IntPrint1 	; no- loop
 		;--
IntPrint2 	;- now pop & print the digits
 		pla
 		bmi 	IntPrintX 	; found the marker so exit
 		jsr 	PutChr
 		bra 	IntPrint2
IntPrintX 	rts

;----------------------------------------------- IntDH_AX
IntDH_AX: ; Divide AX by 10, result in ZTMP, remainder in A
 		sta 	TMP
 		stx 	TMP+1
 		;-- fall through
;----------------------------------------------- IntDH
IntDH: ; Divide ZTMP by 10, remainder in A (trash X)
 		ldx 	#16
 		lda 	#0
IntDH_AX1 	asl 	TMP
 		rol 	TMP+1
 		rol 	a
 		cmp 	#100
 		bcc 	IntDH_AX2
 		sbc 	#100
 		inc 	TMP
IntDH_AX2 	dex
 		bne 	IntDH_AX1
 		rts

;----------------------------------------------- IntParse
IntParse: ; Parse Integer from source (GetChr) to TMP  (returns U16 in AX)
; DO NOT PARSE '-'
 		lda 	#0
 		sta 	TMP
 		sta 	TMP+1
 		sta 	NUM_SGN
IntParseL 	lda 	CHRGOT 		; term null
 		beq 	IntParseX
IntParse1 	jsr 	IsDigit 	; messes with A
 		BR_F(IntParseX) 	; no more digits
 		and 	#$0F 		; convert digit to value
 		jsr 	IntTmpMT 	; TMP *= 10
 		clc 			; and add to TMP
 		adc 	TMP
 		sta 	TMP
 		bcc 	IntParseAX
 		inc 	TMP+1
IntParseAX 	jsr 	GetChr 		; next character
 		bra 	IntParseL
IntParseX 	lda 	TMP
 		ldx 	TMP+1
 		rts


;----------------------------------------------- IntAXx10
IntAXx10: ; AX * 10 -> AX (uses TMP)
 		sta 	TMP
 		stx 	TMP+1
 		jsr 	IntTmpMT
 		lda 	TMP
 		ldx 	TMP+1
 		rts

;----------------------------------------------- IntTmpMT
IntTmpMT: ; TMP = TMP * 10 (preserves AXY)
 		phx
 		pha
 		;--
 		lda 	TMP 		; AX <= n
 		ldx 	TMP+1
 		;--
 		asl 	TMP
 		rol 	TMP+1 		; 2n
 		asl 	TMP
 		rol 	TMP+1 		; 4n
 		;-- TMP + AX => TMP (5n)
 		clc
 		adc 	TMP
 		sta 	TMP
 		txa
 		adc 	TMP+1
 		sta 	TMP+1
 		;-- x2 = 10n
 		asl 	TMP
 		rol 	TMP+1
 		;--
 		pla
 		plx
 		rts



;----------------------------------------------- IntDT_AX
IntDT_AX: ; Divide AX by 10, result in TMP, remainder in A
 		sta 	TMP
 		stx 	TMP+1
 		;-- fall through
;----------------------------------------------- IntDT
IntDT: ; Divide TMP by 10, remainder in A
 		ldx 	#16
 		lda 	#0
IntDT_AX1 	asl 	TMP
 		rol 	TMP+1
 		rol 	a
 		cmp 	#10
 		bcc 	IntDT_AX2
 		sbc 	#10
 		inc 	TMP
IntDT_AX2 	dex
 		bne 	IntDT_AX1
 		rts

;=================================================================== UTIL_PTR =========
;----------------------------------------------- PtrX
PtrX: ; Set ZPtr from ZPg[.X]
 		;-- get base pointer into ZPtr	(extract to subrtn)
 		lda 	0,X
 		sta 	ZPtr
 		lda 	1,X
 		sta 	ZPtr+1
 		rts

;----------------------------------------------- PtrAXY
PtrAXY: ; set ZPtr to AX (lo,hi) and set Y to zero
 		ldy 	#0
;----------------------------------------------- PtrAX
PtrAX: ; set ZPtr to valkue in AX (lo,hi)
 		sta 	ZPtr
 		stx 	ZPtr+1
 		rts

;=================================================================== UTIL_PRINT =======

.nolist
#if _DBUG
;----------------------------------------------- _Print_
; PSEUDO-CODE
_Print_: ;Print in-line string
 		;-- pop the return address from the jsr call
 		pla
 		plx
 		;-- set up to print from there (ZPtr)
 		SETAX(ZDPtr) 		; [0] is part of call [1] is data
 		ldy 	#0
_Print_L 	iny 			; next char
 		lda 	(ZDPtr),y
 		beq 	_Print_X 	; zero -> exit
 		bmi 	_Print_HX
 		jsr 	PutChr 		; print character
 		bra 	_Print_L 	; loop back (no more than 255 chars)
_Print_HX 	; print hex data
 		iny
 		lda 	(ZDPtr),y 	; lo
 		sta 	ZDBug
 		iny
 		lda 	(ZDPtr),y 	; lo
 		sta 	ZDBug+1
 		iny
 		phy
 		;--
 		lda 	#'='
 		jsr 	PutChr
 		lda 	#'$'
 		jsr 	PutChr
 		;--
 		ldy 	#1
 		lda 	(ZDBug),y 	; hi data
 		jsr 	PrAHex
 		dey
 		lda 	(ZDBug),y 	; lo data
 		jsr 	PrAHex
 		jsr 	PrNL
 		;--
 		ply
 		;--
 		;-- Calculate the return address
_Print_X 	tya 			; y is offset to the null
 		sec 			; adjust one more
 		adc 	ZDPtr 		; + Len
 		sta 	ZDPtr 		; -> lo
 		lda 	#0
 		ADC 	ZDPtr+1
 		sta 	ZDPtr+1
_PrintFPX 	jmp 	(ZDPtr) 	; jump to code after the in-line string

;----------------------------------------------- _PrHexShort
_PrHexShort: ; print int .A.X as hex value with space
 		jsr 	PrAHex
 		lda 	#' '
 		jmp 	PutChr

;----------------------------------------------- _PrHexInt
_PrHexInt: ; print int .A.X as hex value with space
 		jsr 	PrAXHex
 		lda 	#' '
 		jmp 	PutChr

#endif

;----------------------------------------------- PrNL
PrNL: ; print CR,LF to PutChr -> mem/io
 		lda 	#CR
 		jsr 	PutChr
 		lda 	#LF
 		jmp 	PutChr

;=================================================================== UTIL_HEX =========
Nib2HexTbl
;    ____ BCD:0______===== BCD:1 ====
.db "0123456789ABCDEF0123456789+-e.E "
;   "0123456789ABCDEF0123456789abcdef"

;----------------------------------------------- PrAXHex
PrAXHex: ; Print AX(lo/hi) as 4 hex digits [A]
 		pha 			; save ZTmp
 		txa 			; get high
 		jsr 	PrAHex 		; print hi as hex digits
 		pla 			; restore ZTmp
 		;-- fall through to print ZTmp as hex digits
;----------------------------------------------- PrAHex
PrAHex: ; Print A as Hex digits (send/write) [A]
 		pha 			;Save A for LSD
 		lsr 	a
 		lsr 	a
 		lsr 	a 		; MSD to LSD position
 		lsr 	a
 		jsr 	PrNib 		; Output hex digit
 		pla 			; Restore A and then
 		;-- fall through to print hex routine
;----------------------------------------------- PrNib
PrNib: ; Convert hex nibble and Print it (preserves XY)
 		phx 			; save X
 		and 	#$0F 		; Mask LSD for hex print
 		BR_NBCD(PrNibX) 	; non-bcd -> PrNibX
 		;-- BCD so add 16 for second part of table
 		clc
 		adc 	#$10 		; add 16 for BCD part of table
PrNibX 		tax
 		lda 	Nib2HexTbl,X 	; Look Up
 		plx
 		jmp 	PutChr 		; Write/Send

;----------------------------------------------- Hex2Nib
Hex2Nib: ; '0..9A..F' -> to nibble in A (C=1:Valid) [A]
 		eor 	#'0' 		; Map digits to 0-9
 		cmp 	#9+1 		; Is it a decimal digit?
 		bcc 	Hex2Nib9 	; Yes!
 		adc 	#$08 		; Map letter "A"-"F" to $FA-FF
 		cmp 	#$7A 		; Hex letter?
 		bcc 	Hex2NibFPX 	; No! Character not hex
Hex2Nib9 	sec 			; set carry flag to indicate valid
Hex2NibFPX 	and 	#$0F
 		rts 			; carry clear if invalid char

;----------------------------------------------- HexDump
HexDump: ; hex dump memory (ZPtr) to output io/mem
 		lda 	ZPtr+1
 		jsr 	PrAHex
 		lda 	ZPtr
 		jsr 	PrAHex
 		lda 	#' '
 		jsr 	PutChr
 		ldy 	#0
HexDumpL 	; dump a line of bytes
 		lda 	(ZPtr),y
 		jsr 	PrAHex
 		lda 	#' '
 		jsr 	PutChr
 		iny
 		cpy 	#HEXSZ
 		bne 	HexDumpL
 		ldy 	#0
HexDumpL1 	; dump a line of bytes
 		lda 	(ZPtr),y
 		BR_ALT(32,HexDump1) 	; a<' '?
 		BR_AGT(127,HexDump1)
 		jsr 	PutChr 		;printable
 		bra 	HexDump2
HexDump1 	; non printable
 		lda 	#'.'
 		jsr 	PutChr
HexDump2 	iny
 		cpy 	#HEXSZ
 		bne 	HexDumpL1
 		jsr 	PrNL
 		;-- move ZPtr to next line
 		clc
 		lda 	#HEXSZ
 		adc 	ZPtr
 		sta 	ZPtr
 		bcc 	HexDumpX
 		inc 	ZPtr+1
HexDumpX 	rts

PARAGRAPH()
;=================================================================== UTIL_BCD =========
BinTbl
.db $00,$01,$02,$03,$04,$05,$06,$07,$08,$09
.db $10,$11,$12,$13,$14,$15,$16,$17,$18,$19
.db $20,$21,$22,$23,$24,$25,$26,$27,$28,$29
.db $30,$31,$32,$33,$34,$35,$36,$37,$38,$39
.db $40,$41,$42,$43,$44,$45,$46,$47,$48,$49
.db $50,$51,$52,$53,$54,$55,$56,$57,$58,$59
.db $60,$61,$62,$63,$64,$65,$66,$67,$68,$69
.db $70,$71,$72,$73,$74,$75,$76,$77,$78,$79
.db $80,$81,$82,$83,$84,$85,$86,$87,$88,$89
.db $90,$91,$92,$93,$94,$95,$96,$97,$98,$99


Bin2BCDTbl
.byte	$63,$31,$15,$07,$03,$01,$00

;----------------------------------------------- PrADec2
PrADec2: ; Print A as decimal digits 00-99
 		phx
 		tax
 		lda 	BinTbl,x
 		jsr 	PrAHex
 		plx
 		rts

;----------------------------------------------- PrADec2
PrADec3: ; Print A as decimal digits 000-255
 		jsr 	Bin2BCD
 		pha
 		txa
 		jsr 	PrNib 		; hundreds
 		pla
 		jmp 	PrAHex 		; Tens,Unit

;----------------------------------------------- Bin2BCD
Bin2BCD: ; Convert binary value in A (0-99) into BCD in A, (high digit in X)
 		sed 			; all adds in decimal mode
 		sta 	ZTmp 		; save A
 		lda 	#$00 		; clear A
 		ldx 	#$07 		; set bit count
Bin2BCDL 	lsr 	ZTmp 		; bit to carry
 		bcc 	Bin2BCD1 	; branch if no add
 		adc 	Bin2BCDTbl-1,X 	; else add BCD value
Bin2BCD1 	dex 			; decrement bit count
 		bne 	Bin2BCDL 	; loop if more to do

; 3digit {  (high digit in X)
 		bcc 	Bin2BCD2 	; branch if no 100's carry
 		;-- if Cb set here (and can only be set by the
 		;-- last loop add) then there was a carry into
 		inx 			; the 100's so add 100's carry to the high byte
Bin2BCD2 	;-- now check the 2^7 (128) bit
 		lsr 	ZTmp 		; bit 7 to carry
 		bcc 	Bin2BCD3 	; branch if no add
 		inx 			; else effectively add 100 part of 128
 		adc 	#$27 		; and then add 128 (-1) part of 128
 		bcc 	Bin2BCD3 	; branch if no further carry
 		inx 			; else add 200's carry
Bin2BCD3
; }

 		sta 	ZTmp 		; save result ZTmp byte
 		cld 			; clear decimal mode
 		rts

; ;----------------------------------------------- DivA10
; DivA10: ;Divide .A by 10
;  		;-- 17 bytes, 30 cycles
;  		lsr 	a
;  		sta 	ZTmp
;  		lsr 	a
;  		adc 	ZTmp
;  		ror 	a
;  		lsr 	a
;  		lsr 	a
;  		adc 	ZTmp
;  		ror 	a
;  		adc 	ZTmp
;  		ror 	a
;  		lsr 	a
;  		lsr 	a
;  		rts



.echo "  _Util\t\t"
.echo $-_Util
.echo "\n"

.LIST
