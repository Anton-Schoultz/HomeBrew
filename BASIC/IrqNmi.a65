;=================================================================== IRQ ============== 
;*  Irq                  Interrupt Request service routine
;*  IrqBrk               Handle BRK interrupt
;*  IrqRtn               Restore registers and return from IRQ
;*  Nmi                  Non-Maskable interrupt service handler
;*
; Interrupt handler for BRK, IRQ and NMI
;
; BRK interrupt goes via vector V_IRQBRK,
; IRQ is handled via vector V_IRQ
; NMI is handled via vector V_NMI
#ifdef hide
.NOLIST
#endif
#ifndef _Irq
#define _Irq

;----------------------------------------------- IRQ 
Irq: ; Interrupt Request service routine
; Interrupt low level, reset the source as early as posible
; PC & Status are pushed, then cpu comes here
 		;-- 
 		;-- Save registers
 		PUSHAXY() 		; Y,X,Z,S,PC

 		;-- Test to see if it is an IRQ or a BRK
 		tsx
 		lda 	$0104,x 	; get the pushed status
 		and 	#$10 		; check the BRK bit
 		bne 	IrqBrk 		; BREAK -> IrqBrk

 		;-- jsr 	IrqDo

;----------------------------------------------- IrqRtn 
IrqRtn: ; Restore registers and return from IRQ
 		PULLAXY()
 		rti 			; pop status & PC, return, re-enabling IRQ

;----------------------------------------------- IrqBrk 
; fetch the post byte and store it in ERRNO, then return from interrupt
IrqBrk: ; Handle BRK interrupt
 		lda 	$105,X 		;
 		sta 	Z_IrqPtr
 		lda 	$106,X
 		sta 	Z_IrqPtr+1
 		lda 	Z_IrqPtr 	; if low ..
 		bne 	IrqBrk0 	; .. is zero
 		dec 	Z_IrqPtr+1 	; .. decr high
IrqBrk0 	dec 	Z_IrqPtr 	; decr low
 		lda 	(Z_IrqPtr) 	; get the byte after the BRK (post byte)
 		sta 	HLTFLG 		; save it

 		;-- save print flag
 		lda 	ZPrFlg
 		pha

 		;-- force IO output (screen)
 		PR_WR_IO()
 		jsr 	PrNL
 		lda 	#'*'
 		jsr 	ChrOut

 		;-- print Address where BRK is from
 		ZDEC(Z_IrqPtr)
 		GETAX(Z_IrqPtr)
 		jsr 	PrAXHex

 		;-- print error code
 		lda 	#':'
 		jsr 	ChrOut
 		lda 	HLTFLG
 		jsr 	PrAHex
 		lda 	#'*'
 		jsr 	ChrOut
 		jsr 	PrNL

 		;-- restore print flags
 		pla
 		sta 	ZPrFlg

 		ldx 	#0
IrqWait 	lda 	HLTFLG 		; check flag value
 		beq 	IrqRtn 		; cleared by NMI so exit
 		dex 			; count down
 		bne 	IrqWait 	;

IrqWait2 	lda 	HLTFLG 		; check flag value
 		beq 	IrqRtn 		; cleared by NMI so exit
 		dex 			; count down
 		bne 	IrqWait2 	;

 		bra 	IrqRtn 		; exit from interrupt

 		;-- IrqBrkDo 	JMP 	(V_BRK) 	; the rts in the body goes back to caller
 		;-- IrqDo: 	JMP 	(V_IRQ) 	; the rts in the body goes back to caller

;----------------------------------------------- NMI 
Nmi: ; Non-Maskable interrupt service handler
; Negative-edge triggered interrupt
; use this for timer interrupts straight from binary divider ?
 		;-- Save registers
 		PUSHAXY() 		; Push axy

 		lda 	#0
 		sta 	HLTFLG

NmiRtn 		;-- Restore registers and return
 		PULLAXY() 		; Pop yxa
 		rti

 		;-- NmiDo: ; handle NMI via vector at V_NMI
 		;-- jmp 	(V_NMI)

 		;-- IrqNOP: ; Empty IRQ service
; 		rts


 		;-- .echo $-Irq
 		;-- .echo " bytes for Irq.a65\r"

.echo "  _IrqNmi\t"
.echo $-Irq
.echo "\n"

#endif
