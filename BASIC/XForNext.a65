#ifdef hide
.NOLIST
#endif
#if (($/256)>=PG_ROM) & (($/256)<PG_KEY)
;=================================================================== FOR ==============
;*  DB_For               Debug For values - STP  LIM  ADR  IX SP
;*  ForPop               Pop for info from stack to inner vars
;*  ForPush              Push FOR structure onto the stack
;*  X_For                FOR #V = ##From TO ##Limit [STEP ##Step]~Start of FOR/NEXT Loop
;*
_For 		= $

;----------------------------------------------- For/Next
; Data structure is 12 bytes, allowing up to 4 bytes for numeric values
; 1	FOR_ID		0		$xC  (low nibble is size)
; 1	VarNdx		1
; 2	NxtAddr		2,3
; 4	Step		4,5,6,7
; 4 	Limit		8,9,A,B

;----------------------------------------------- For/Next
; FOR values are stored immediately after the A-Z, so access with index 27,28
;FOR_DATA 	;-- DATA
;Var(FOR_STP,NUMPKSZ) ; [27] Step size
;Var(FOR_LIM,NUMPKSZ) ; [28] Limit
;Int(FOR_ADR) 	; Address of loop line (after the FOR line)
;Short(FOR_NDX) 	; Loop variable number (1-26)
;#define FOR_STP_X 27
;#define FOR_LIM_X 28
;
;; Size of FOR block = NUMPKSZ+NUMPKSZ+2+1 = STP,LIM, ADR,IX
;FORSZ = NUMPKSZ * 2 + 3
;.echo "FOR SIZE = "
;.echo FORSZ
;.echo "\n"

;----------------------------------------------- FOR stack
; STACK	FOR nesting depth FORDEEP=8 (CBM has 9)
;Var(FORSTK,8*FORDEEP)

;----------------------------------------------- X_For
X_For: ; FOR #V = ##From TO ##Limit [STEP ##Step]~Start of FOR/NEXT Loop
 		;-- Push
 		jsr 	ForPush
 		;-- handle assignment
 		jsr 	ChrRd 		; consume token
 		jsr 	X_LetDo 	; returns index in X
 		;-- store var index
 		lda 	VARID
 		sta 	FOR_NDX 	; save index
 		;-- save return address
 		ZCPY(FOR_ADR,LN_NXT)
 		;-- TO
 		lda 	#T_TO 		; TO
 		jsr 	Match 		; check for and skip over 'TO'

 		;-- limit
 		jsr 	EvNumeric	; evaluate, result in NUM_A...
 		ZSET(ZPtr,FOR_LIM)	; point to the limit
 		jsr	NumSetPtr	; save value
; 		jsr 	NumToInt 	; num as AX l/h
; 		sta 	FOR_LIM
; 		stx 	FOR_LIM+1

 		;-- STEP?
 		ZSET(FOR_STP,1) 	; default step is 1
 		lda 	CHRGOT
 		beq 	X_ForX 		; STEP ommitted -> done
 		;-- evaluate step size & save it
 		lda 	#T_STEP 	; STEP
 		jsr 	Match 		; check for and skip over 'TO'

 		;-- step
 		jsr 	EvNumeric
 		ZSET(ZPtr,FOR_STP)	; point to the step
 		jsr	NumSetPtr	; save value
; 		jsr 	NumToInt 	; num as AX l/h
; 		sta 	FOR_STP
; 		stx 	FOR_STP+1

 		jsr DB_For

X_ForX 		rts

;----------------------------------------------- ForPush
ForPush: ; Push FOR structure onto the stack
 		lda 	FOR_SP
 		asl 	a
 		asl 	a
 		asl 	a 		; a = 8 * sp
 		tay
 		ldx 	#0
 		;-- copy to stack area
ForPushL 	lda 	FOR_DATA,X
 		sta 	FORSTK,y
 		iny
 		inx
 		cpx 	#FORSZ
 		bne 	ForPushL
 		;-- update stack pointer
 		lda 	FOR_SP
 		inc 	a
 		cmp 	#FORDEEP
 		bpl 	ForErr 		; stack overflow
 		sta 	FOR_SP
 		rts

;----------------------------------------------- ForOvr
ForErr 		ERROR(ERR_FOR)

;----------------------------------------------- ForPop
ForPop: ; Pop for info from stack to inner vars
 		;-- decr for stack pointer
 		lda 	FOR_SP
 		dec 	a
 		bmi 	ForErr 		; stack underflow
 		sta 	FOR_SP
 		;-- calc offset in stack
 		asl 	a
 		asl 	a
 		asl 	a 		; a = 8 * sp
 		tay
 		ldx 	#0
 		;-- copy from stack area
ForPopL 	lda 	FORSTK,y
 		sta 	FOR_DATA,x
 		iny
 		inx
 		cpx 	#FORSZ
 		bne 	ForPopL
 		rts

;== NEXT

;----------------------------------------------- X_Next
X_Next: ; NEXT {Var}~End of FOR/NEXT loop
 		jsr 	ChrRd 		; consume token
 		;-- loop var
 		BR_AEQ(T_NumVar,X_Next1)
X_NextErr 	ERROR(ERR_VAR) 		; "Expected Variable"

X_Next1 	jsr 	ChrRd 		; get first char of variable name
 		bpl 	X_NextErr 	; long var name -> Expected Variable
 		and 	#$1F 		; get var index
 		sta 	VARID 		; save it
 		;-- check that it matches
 		cmp 	FOR_NDX
 		beq 	X_Next2
 		ERROR(ERR_FOR) 		; 'FOR/NEXT error'

X_Next2 	; Retrieve step from VARNUM and unpack to internal form

; 		lda 	#FOR_STP_X
; 		jsr 	NumGet
 		ZSET(ZPtr,FOR_STP)	; point to the step size
 		jsr	NumGetPtr	; fetch from (ZPtr)

 		lda 	NUM_AS 		; get the sign of the step
 		sta 	NUM_SGN 	; save sign of step (up/down)
 		jsr 	NumPushA
 		;-- get loop var value
 		lda 	VARID
 		jsr 	NumGet
 		;-- add the step
 		jsr 	NumPopB
 		jsr 	NumAdd
 		;-- save value in loop var
 		lda 	VARID
 		jsr 	NumSet
 		;-- test the limit

; 		lda 	#FOR_LIM_X
; 		jsr 	NumGet 		; RCL limit
 		ZSET(ZPtr,FOR_LIM)	; point to the limit
 		jsr	NumGetPtr	; fetch from (ZPtr)

 		jsr 	NumPushA 	; ^
 		lda 	VARID
 		jsr 	NumGet 		; RCL var
 		jsr 	NumPopB
 		jsr 	NumSub 		; Limit-Value
 		jsr 	NumFlag 	; check < = >
 		beq 	X_NextLoop 	; if equal then last iteration
 		;-- account for direction
 		eor 	NUM_SGN
 		and 	#4 		; 4< 2= 1>
 		bne 	X_NextLoop
 		;-- loop is done so pop
 		jmp 	ForPop

X_NextLoop 	; loop by going back to the loop line
 		lda 	FOR_ADR
 		sta 	LN_NXT
 		lda 	FOR_ADR+1
 		sta 	LN_NXT+1
 		rts

;  NUM_FLG ; Comparison flags 4:< 2:= 1:>




#if _DB_FOR
;=================================================================== DBUG =============
DB_For: ; Debug For values - STP  LIM  ADR  IX SP
 		PUSHALL()
 		jsr 	PrNL
 		PRINT("STEP ")
 		HEX_SHORT(FOR_STP+2)
 		HEX_SHORT(FOR_STP+1)
 		HEX_SHORT(FOR_STP+0)

 		jsr 	PrNL
 		PRINT("LIM  ")
 		HEX_SHORT(FOR_LIM+2)
 		HEX_SHORT(FOR_LIM+1)
 		HEX_SHORT(FOR_LIM+0)

 		jsr 	PrNL
 		PRINTLN("ADR  IX SP")
 		HEX_INT(FOR_ADR)
 		HEX_SHORT(FOR_NDX)
 		HEX_SHORT(FOR_SP)
 		jsr 	PrNL
 		PULLALL()
 		PAUSE()
 		rts
#endif


#if _LEVEL >= _KEYWORDS
.echo "  _FOR_NEXT\t"
.echo $-_For
.echo "\n"
#endif

.nolist
#endif

;----------------------------------------------- keyword
#if ($/256) = PG_KEY
.list
W_For 		.DB 	"FO",'R'+$80
W_Next 		.DB 	"NEX",'T'+$80

.nolist
#endif
;----------------------------------------------- run
#if ($/256) = PG_RUN
.list
T_For 		= LOW($)+$80
.DW 	X_For

T_NEXT 		= LOW($)+$80
.DW 	X_Next

.nolist
#endif

.list 					; end of For
