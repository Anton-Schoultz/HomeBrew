;=================================================================== VARIABLES ========
;*

;----------------------------------------------- ZPg Code	$000x
; ZRd		ChrRd  address to read next char from
; ZWr		ChrWr  address to send char to
;----------------------------------------------- Vectors	$001x
; VCHRIN	ChrIn  Read character from input device
; VCHROUT 	ChrOut Send character to output device
;
;----------------------------------------------- ZPage		$002x
; ZBuf 		pointer to a buffer
; ZPtr 		general pointer
; ZPrFlg	Print/convert mode  - See ChrStr for details
; ZTmp		Temp byte

;----------------------------------------------- STACK		$01xx
; Calculator stack at the bottom, CPU stack at the top
;----------------------------------------------- SysVars	$02xx
; STRBUF	String buffer
; TOKBUF	Token buffer
;----------------------------------------------- IO Dev		$03xx
#ifdef hide
 		;-- .NOLIST
#endif
.list
;=================================================================== CONSTANTS ========

; BUFSZ() Size for INBUF,TOKBUF
#define BUFSZ() 64
; STRSZ Size for STRBUF
#define STRSZ 128

; bytes per line of Hex Dump
#define HEXSZ 8


;=================================================================== CHRRD, VECTORS ===
.org 0

; $0000 16 bytes for z-pg code
ZPgCode 	.BLOCK 	16

; $0010 8 Vectors
.org $0010
; 8 vectors here
Int(VCHRIN) 	; Read character from input device (Keyboard, serial..)
Int(VCHROUT) 	; Send character to output device (Screen, serial..)

;=================================================================== ZVARS ============
; Zero page variables
.org $0020
Int(ZBuf) 	; ZBuf pointer to a buffer
Int(ZPtr) 	; ZPtr general pointer
Int(ZStr) 	; ZStr points to string result
;----------------------------------------------- Printing (send to mem/io)
Short(ZPrFlg) 	; Print/convert mode  - See ChrStr for details
Short(ZTmp) 	; Temp byte
Short(ZStrLen) 	; length of STRBUF used (write index)
;----------------------------------------------- Code Lines
Int(LN_NUM) 	; Line number
Int(LN_NXT) 	; address of next line
Short(LNFPAEN) 	; length of tokenised line in TOKBUF (for editor)
Short(TOKNO) 	; Token number
Short(VARID) 	; Variable ID 0$(nnnnn nnnnn=1-26 for A-Z

; flags used for comparissons
Short(NUM_FLG) 	; flags 4:<0 2:=0 1:>0   3:GE 5:NE ect

;----------------------------------------------- Irq / Nmi
Int(Z_IrqPtr) 	; used in IRQ code


;----------------------------------------------- Numeric common vars
PARAGRAPH()
Int(TMP)

#include "Math.a65" 			; Math module ZeroPage

;=================================================================== STACK ============
; cpu stack grows down from 01FF..0100
.org $0100

#include "Math.a65" 			; Math module Page 1


;=================================================================== SYSVARS ==========
.org $0200
;----------------------------------------------- Basic Editing
Var(INBUF,BUFSZ) ; buffer for input
Var(TOKBUF,BUFSZ) ; buffer for tokenized input
;----------------------------------------------- String
.org $0280
Var(STRBUF,STRSZ) ; buffer for strings





;======================================================================================
; reserved space for memory mapped IO devices
.org $0300


;=================================================================== SIMPLE VARIABLES =
.org $0400

Var(VARTAB,128) ; 32 x 4 bytes vars

.export STRBUF,TOKBUF,INBUF
 		;-- .export VCHROUT,VCHRIN,
 		;-- .export TMP

.LIST 					;-- End of Vars

