;=================================================================== VARIABLES ========
;*

;----------------------------------------------- ZPg Code	$000x
; ZRd		ChrRd  address to read next char from
; ZWr		ChrWr  address to send char to
;----------------------------------------------- Vectors	$001x
; VIN0	ChrIn  Read character from input device
; VOUT0 	ChrOut Send character to output device
;
;----------------------------------------------- ZPage		$002x
; ZBuf 		pointer to a buffer
; ZPtr 		general pointer
; ZPrFlg	Print/convert mode  - See ChrStr for details
; ZTmp		Temp byte

;----------------------------------------------- STACK		$01xx
; Calculator stack at the bottom, CPU stack at the top
;----------------------------------------------- SysVars	$02xx
; STRBUF	String buffer
; TOKBUF	Token buffer
;----------------------------------------------- IO Dev		$03xx
#ifdef hide
.NOLIST
#endif


;=================================================================== CHRRD, VECTORS ===
.org 0

; $0000 16 bytes for z-pg code
ZPgCode 	.BLOCK 	16

.org $0010
; 8 vectors here - initialised along with z-pg code
VEC_IN
Int(VIN0) 	; Read character from input device (Keyboard, serial..)
Int(VIN1)
Int(VIN2)
Int(VIN3)

VEC_OUT
Int(VOUT0) 	; Send character to output device (Screen, serial..)
Int(VOUT1)
Int(VOUT2)
Int(VOUT3)

;=================================================================== ZVARS ============
; Zero page variables
.org $0020
; Device numbers - initialised along with z-pg code
Short(DEV_IN)	; input device no (0-3)
Short(DEV_OUT)	; output device no (0-3)


Int(ZSrc) 	; Source for copy/move
Int(ZTgt) 	; Destination for copy/move
Int(ZCnt) 	; Number of bytes to copy/move

Int(ZDBug) 	; debug usage
Int(ZDPtr)

Int(ZBuf) 	; ZBuf pointer to a buffer
Int(ZPtr) 	; ZPtr general pointer

Int(ZParse) 	; Parse pointer

Int(ERR_ADR) 	; Address where error was detected

;----------------------------------------------- Printing (send to mem/io)
Short(ZPrFlg) 	; Print/convert mode  - See ChrStr for details
Short(ZTmp) 	; Temp byte
Short(ZRegA) 	; Save register A (used in Msg)
Short(ZRegX) 	; Save register X (used in Msg)
Short(ZRegY) 	; Save register Y (used in Msg)
Short(ZRegP) 	; Save register P (used in Msg)

;----------------------------------------------- Code Lines
PARAGRAPH()
Int(LN_NUM) 	; Current Line number
Int(LN_ADR) 	; Current Line address
Int(LN_NXT) 	; Adress of next line
Int(LN_LEN) 	; length of tokenised line in TOKBUF (for editor)
Int(LN_FND) 	; Line number to look for
Int(TOK_LEN) 	; length of tok buffer
Short(LN_FLG) 	; direction to search
Short(TOKNO) 	; Token number
Short(VARID) 	; Variable ID 0$(nnnnn nnnnn=1-26 for A-Z
;----------------------------------------------- BASIC program
Int(RAMBEG) 	; Start of user ram area (set with cold start)
Int(RAMEND) 	; End of user ram area (set at cold start)
Int(BASBEG) 	; Start of BASIC program
Int(BASEND) 	; end of program, start of variables
Int(VAREND) 	; end of variables
Int(ARYBEG) 	; Start of array Space

Short(RTNSP) 	; Gosub/Return stack pointer	RTNSZ x2
Short(FOR_SP) 	; FOR/NEXT stack pointer  	FORSZ x8

;----------------------------------------------- Irq / Nmi
Int(Z_IrqPtr) 	; used in IRQ code

;----------------------------------------------- Numeric common vars
Int(TMP) 	; Temp 16 bit value (line nos)
; NUMUSZ = size of numeric value once 'unpacked' for calcualtions
Var(NUM_A,NUMUSZ) ; Number parsed / Primary accumulator
Var(NUM_TMP,NUMUSZ) ; Temp number
Var(NUM_B,NUMUSZ) ; Secondary accumulator
Var(NUM_DIV,NUMUSZ) ; Scratch divisor

Short(NUM_FLG) 	; Comparisson flags 4:> 2:= 1:<
Short(NUM_SP) 	; calculator stack pointer
Short(NUM_SGN) 	; sign

Var(TIMER,3) 	; timer value


;----------------------------------------------- String
; (Z) ->    LenL|LenH|Characters.....|00|
Int(STR_PTR) 	; pointer to string
Int(STR_END) 	; end of string work area
Int(STR_LEN) 	; no of chars + 3 (1Null+2Len)

;-- COM port sinmulator - read/write memory)
Int(COM_RD)
Int(COM_WR)

PARAGRAPH()
#include "Math.a65" 			; Math module ZeroPage

.echo "  _ZeroPage\t"
.echo $
.echo "/256\n"

;=================================================================== STACK ============
; cpu stack grows down from 01FF..0100
.org $0100

#include "Math.a65" 			; Math module Page 1


;=================================================================== SYSVARS ==========
.org $0200
;----------------------------------------------- Basic Editing
Var(INBUF,BUFSZ) ; buffer for input
Var(TOKBUF,BUFSZ) ; buffer for tokenized input

;----------------------------------------------- GOSUB stack 32x2 = 64
; Gosub to depth of RTNSZ=32  (CBM has ~23)
; return value is the address of the line following the GOSUB (2bytes)
Var(RTNSTK,RTNSZ*2) ; 32 x 2byte return line address
#define RTNSTK_L RTNSTK
#define RTNSTK_H RTNSTK+RTNSZ

.echo "  _Buffers\t"
.echo $-$200
.echo "/256\t(incl. FOR/GOSUB stack)\n"

;======================================================================================
; reserved space for memory mapped IO devices
.org $0300


;=================================================================== SIMPLE VARIABLES =
.org $0400
VARTAB

;----------------------------------------------- String Vars A-Z
Var(VARSTR,27*2) ; ( Plo,Phi ) ->  LenL,LenH,Data....

Var(VARARY,27*2) ; ( Plo,Phi ) ->  LenL,LenH,Data....


;----------------------------------------------- Numeric Vars 27 x NUMPKSZ
; Vars stored as sequence of bytes, [Exp] Low...Hi
; index 0 is for RND, 1-26 for A-Z => 27 slots
Var(VARNUM,27*NUMPKSZ)
;----------------------------------------------- For/Next
; FOR values are stored immediately after the A-Z, so access with index 27,28
FOR_DATA 	;-- DATA
Var(FOR_STP,NUMPKSZ) ; [27] Step size
Var(FOR_LIM,NUMPKSZ) ; [28] Limit
Int(FOR_ADR) 	; Address of loop line (after the FOR line)
Short(FOR_NDX) 	; Loop variable number (1-26)
#define FOR_STP_X 27
#define FOR_LIM_X 28

; Size of FOR block = NUMPKSZ+NUMPKSZ+2+1 = STP,LIM, ADR,IX
FORSZ = NUMPKSZ * 2 + 3
.echo "FOR SIZE = "
.echo FORSZ
.echo "\n"

;----------------------------------------------- FOR stack
; STACK	FOR nesting depth FORDEEP=8 (CBM has 9)
Var(FORSTK,8*FORDEEP)



.echo "  SysRAM ($400)\t"
.echo $-VARTAB
.echo "\t1024-"
.echo $
.echo " (first 255 cleared by CLEAR/EdtClear)\n"

.LIST

