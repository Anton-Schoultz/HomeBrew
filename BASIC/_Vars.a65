;=================================================================== VARIABLES ========
;*

;----------------------------------------------- ZPg Code	$000x
; ZRd		ChrRd  address to read next char from
; ZWr		ChrWr  address to send char to
;----------------------------------------------- Vectors	$001x
; VCHRIN	ChrIn  Read character from input device
; VCHROUT 	ChrOut Send character to output device
;
;----------------------------------------------- ZPage		$002x
; ZBuf 		pointer to a buffer
; ZPtr 		general pointer
; ZPrFlg	Print/convert mode  - See ChrStr for details
; ZTmp		Temp byte

;----------------------------------------------- STACK		$01xx
; Calculator stack at the bottom, CPU stack at the top
;----------------------------------------------- SysVars	$02xx
; STRBUF	String buffer
; TOKBUF	Token buffer
;----------------------------------------------- IO Dev		$03xx
#ifdef hide
.NOLIST
#endif


;=================================================================== CHRRD, VECTORS ===
.org 0

; $0000 16 bytes for z-pg code
ZPgCode 	.BLOCK 	16

.org $0010
; 8 vectors here
Int(VCHRIN) 	; Read character from input device (Keyboard, serial..)
Int(VCHROUT) 	; Send character to output device (Screen, serial..)
Int(V2)
Int(V3)
Int(V4)
Int(V5)
Int(V6)
Int(V7)

;=================================================================== ZVARS ============
; Zero page variables
.org $0020
Int(ZSrc) 	; Source for copy/move
Int(ZTgt) 	; Destination for copy/move
Int(ZCnt) 	; Number of bytes to copy/move
Int(ZDBug) 	; debug usage

Int(ZBuf) 	; ZBuf pointer to a buffer
Int(ZPtr) 	; ZPtr general pointer
Int(ZStr) 	; ZStr points to string result

;----------------------------------------------- Printing (send to mem/io)
Short(ZPrFlg) 	; Print/convert mode  - See ChrStr for details
Short(ZTmp) 	; Temp byte
Short(ZStrLen) 	; length of STRBUF used (write index)
Short(ZRegA) 	; Save register A (used in Msg)
Short(ZRegX) 	; Save register X (used in Msg)
Short(ZRegY) 	; Save register Y (used in Msg)

;----------------------------------------------- Code Lines
;  PARAGRAPH()
Int(LN_NUM) 	; Current Line number
Int(LN_ADR) 	; Current Line address
Int(LN_NXT) 	; Adress of next line
Int(LN_LEN) 	; length of tokenised line in TOKBUF (for editor)
Int(LN_FND) 	; Line number to look for

Short(TOKNO) 	; Token number
Short(VARID) 	; Variable ID 0$(nnnnn nnnnn=1-26 for A-Z
;----------------------------------------------- BASIC program
Int(RAMBEG) 	; Start of user ram area (set with cold start)
Int(RAMEND) 	; End of user ram area (set at cold start)
Int(BASBEG) 	; Start of BASIC program
Int(BASEND) 	; end of program, start of variables
Int(VAREND) 	; end of variables
Int(STREND) 	; end of string work area
Int(ARYBEG) 	; Start of array Space

;----------------------------------------------- Irq / Nmi
Int(Z_IrqPtr) 	; used in IRQ code

;----------------------------------------------- Numeric common vars
Short(NUM_FLG) 	; Comparisson flags 4:< 2:= 1:>
Var(NUM_BUF,NUMSZ) ; Conversion work area NUMSZ=14
Int(TMP) 	; Temp 16 bit value (line nos)

.export LN_NUM

#include "Math.a65" 			; Math module ZeroPage

.echo "  _ZeroPage\t"
.echo $
.echo "/256\n"

;=================================================================== STACK ============
; cpu stack grows down from 01FF..0100
.org $0100

#include "Math.a65" 			; Math module Page 1


;=================================================================== SYSVARS ==========
.org $0200
;----------------------------------------------- Basic Editing
Var(INBUF,BUFSZ) ; buffer for input
Var(TOKBUF,BUFSZ) ; buffer for tokenized input
;----------------------------------------------- String
Var(STRBUF,STRSZ) ; buffer for strings

.echo "  _Buffers\t"
.echo $-$200
.echo "/256\t(see BUFSZ,STRSZ)\n"



;======================================================================================
; reserved space for memory mapped IO devices
.org $0300


;=================================================================== SIMPLE VARIABLES =
.org $0400
Var(VARTAB,128) ; 32 x 4 bytes vars

#define VARTAB_A VARTAB
#define VARTAB_B VARTAB+32
#define VARTAB_C VARTAB+64
#define VARTAB_D VARTAB+96

.LIST

