;=================================================================== VARIABLES ========
;*
;----------------------------------------------- ZPg Code	$000x
; ZRd		ChrRd  address to read next char from
; ZWr		ChrWr  address to send char to
;----------------------------------------------- Vectors	$001x
; VCHRIN	ChrIn  Read character from input device
; VCHROUT 	ChrOut Send character to output device
;
;----------------------------------------------- ZPage		$002x
; ZBuf 		pointer to a buffer
; ZPtr 		general pointer
; ZPrFlg	Print/convert mode  - See ChrStr for details
; ZTmp		Temp byte

;----------------------------------------------- STACK		$01xx
; Calculator stack at the bottom, CPU stack at the top
;----------------------------------------------- SysVars	$02xx
; STRBUF	String buffer
; TOKBUF	Token buffer
;----------------------------------------------- IO Dev		$03xx
#ifdef hide
.NOLIST
#endif

.org 0
; $0000 16 bytes for z-pg code
ZPgCode 	.BLOCK 	16

; $0010 8 Vectors
.org $0010
; 8 vectors here
Int(VCHRIN) 	; Read character from input device (Keyboard, serial..)
Int(VCHROUT) 	; Send character to output device (Screen, serial..)
.export VCHROUT,VCHRIN,


;=================================================================== ZVARS ============
; Zero page variables, calculator work area etc
.org $0020
Int(ZBuf) 	; ZBuf pointer to a buffer
Int(ZPtr) 	; ZPtr general pointer

 		;--
.org $0030
Short(ZPrFlg) 	; Print/convert mode  - See ChrStr for details
Short(ZTmp) 	; Temp byte

.org $0040
Int(LNNUM) 	; Line number
Int(NXTLN) 	; address of next line
Short(LNLEN)	; length of tokenised line in TOKBUF (for editor)
Short(TOKNO) 	; Token number
Short(VARID)	; Variable ID 0$(nnnnn nnnnn=1-26 for A-Z

.org $48
Var(DBUGNUM,6)

.org $0050
Var(CVTBUF,8) 	; Conversion work area
Var(NUMTMP,4) 	; Temp number
Var(NUMBER,4) 	; Number parsed

.org $60
Int(Z_IrqPtr)	; used in IRQ code

.export LNNUM,NXTLN,NUMTMP,NUMBER,CVTBUF,DBUGNUM


;=================================================================== STACK ============
.org $0100
; calc stack at bottom, cpu stack at the top

;=================================================================== SYSVARS ==========
.org $0200
Var(INBUF,BUFSZ) ; buffer for input
Var(TOKBUF,BUFSZ) ; buffer for tokenized input
Var(STRBUF,BUFSZ) ; buffer for strings

.export STRBUF,TOKBUF,INBUF

;======================================================================================
; reserved space for memory mapped IO devices
.org $0300

.LIST 					;-- End of Vars

