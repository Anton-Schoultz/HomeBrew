#ifdef hide
.NOLIST
#endif

#if (($/256)>=PG_ROM) & (($/256)<PG_KEY)
;=================================================================== FLOW =============
;*  X_Gosub              GOSUB #expr~Call subroutine at LineNo
;*  X_Goto               GOTO #NumExpr~Goto LineNo
;*  X_Return             RETURN~Return control to after the GOSUB
;*

;=================================================================== GOTO ============== 
_Goto 		= $

;----------------------------------------------- X_Goto 
X_Goto: ;  GOTO #NumExpr~Goto LineNo
 		jsr 	ChrRd 		; consume token
 		jsr 	EvInt 		; Evaluate expression as integer value AX Lo,Hi
 		stx 	LN_FND+1
 		sta 	LN_FND
 		jsr 	LnGo
 		;-- return will go to next line, so back up
 		ZCPY(LN_NXT,LN_ADR)
 		rts

#if _LEVEL >= _KEYWORDS
.echo "  _GOTO\t\t"
.echo $-_Goto
.echo "\n"
#endif

;=================================================================== GOSUB ============ 
_Gosub 		= $

;----------------------------------------------- X_Gosub 
X_Gosub: ; GOSUB #expr~Call subroutine at LineNo
 		;-- push return line address onto RTNSTK
 		ldx 	RTNSP
 		lda 	LN_NXT
 		sta 	RTNSTK_L
 		lda 	LN_NXT+1
 		sta 	RTNSTK_H
 		;-- bump stack pointer & check stack overflow
 		inx
 		cmp 	#RTNSZ
 		bpl 	GosubOvr
 		stx 	RTNSP
; Evaluate numeric expression as target line no and jump
 		jmp 	X_Goto

GosubOvr 	ERROR(ERR_GOSUB)

#if _LEVEL >= _KEYWORDS
.echo "  _GOSUB\t"
.echo $-_Gosub
.echo "\n"
#endif

;=================================================================== RETURN =========== 
_Return 	= $

;----------------------------------------------- X_Return 
X_Return: ; RETURN~Return control to after the GOSUB
 		jsr 	ChrRd 		; consume token
 		;-- pop return
 		ldx 	RTNSP
 		dex
 		bmi 	RtnOver
 		lda 	RTNSTK_L
 		sta 	LN_NXT
 		lda 	RTNSTK_H
 		sta 	LN_NXT+1
 		rts
RtnOver 	ERROR(ERR_GOSUB)


#if _LEVEL >= _KEYWORDS
.echo "  _RETURN\t"
.echo $-_Return
.echo "\n"
#endif



.nolist
#endif

;----------------------------------------------- keyword 
#if ($/256) = PG_KEY
.list
W_Goto 		.DB 	"GOT",'O'+$80
W_Gosub 	.DB 	"GOSU",'B'+$80
W_Return 	.DB 	"RETUR",'N'+$80
.nolist
#endif
;----------------------------------------------- run 
#if ($/256) = PG_RUN
.list
T_Goto 		= LOW($)+$80
.DW 	X_Goto
T_Gosub 	= LOW($)+$80
.DW 	X_Gosub
T_Return 	= LOW($)+$80
.DW 	X_Return
.nolist
#endif

.list 					; end of Goto
