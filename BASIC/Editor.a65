;=================================================================== EDITOR =========== 
;*  DB_EdtLine           Debug editor line - NUM  ADR  NXT  LEN  FND
;*  DB_EdtMem            Debug BASIC vars - BBeg BEnd VEnd SEnd ABeg
;*  DB_EdtMove           Debug memory moves - ZPtr ZCnt ZSrc ZTgt
;*  EdtAdd               Append TOKBUF line to end of program
;*  EdtAlloc             TODO Allocate space - reuse old space otherwise create new space
;*  EdtClear             Clear variables and arrays
;*  EdtCpy               Copy from TOKBUF->(ZTgt)
;*  EdtDel               Delete line and fall through to Insert
;*  EdtDwn               Move bytes down (Delete)
;*  EdtFresh             Allocate fresh space - payload size in ZCnt, Returns pointer in ZPtr,AX
;*  EdtIns               Insert line, provided it is not an 'empty' line (length <5)
;*  EdtNew               NEW = clear program, variables etc.
;*  EdtOpn               Move memory up
;*  EdtUpd               Update program with line in TOKBUF
;*
.LIST
#ifdef hide 				; Editor
.NOLIST
#endif

#if (($/256)>=PG_ROM) & (($/256)<PG_KEY)

; $0400	VARNUM	32 x 4 for A-Z vars
 		;-- 

;  Int(RAMBEG)	; Start of user ram area (set with cold start)	$0800
;  Int(RAMEND)	; End of user ram area (set at cold start)	$8000
;  Int(BASBEG)	; Start of BASIC program
;  Int(BASEND)	; end of program, start of variables
;  Int(VAREND)	; end of variables
;  Int(STR_END)  ; end of string work area
;  Int(ARYBEG)  ; Start of array Space

; RAMBEG
; BASBEG          BASEND      VAREND        STR_END  ARYBEG  RAMEND
;   |  Program lines | Variables | String work | Free | Arrays |  blank | ROM

;-----------------------------------------------
; X_LineNo: ; Get LN_NUM & Set up LN_NXT
; enters with A=CHRGOT=T_LineNo, exit with CHRGOT after the line data
; sets LN_NUM=line number and LN_NXT=address of next line




_Edt 		= $

;----------------------------------------------- EdtNew 
EdtNew: ; NEW = clear program, variables etc.
 		;-- Start Basic at start of RAM
 		ZCPY(BASBEG,RAMBEG)
 		ZCPY(ZWr,BASBEG) 	; prepare to write to memory
 		;-- Null terminate Program
 		lda 	#0
 		jsr 	ChrWr 		; Write Character to memory  A -> (ZWr++) , 00->(ZWr)
 		;-- jsr 	ChrWr
 		ZCPY(BASEND,ZWr) 	; Set BASEND

 		;-- wipe program
 		lda 	#0
 		tay
EdtNewL 	STA 	(BASBEG),y 	; clear first page of program space
 		iny
 		BNE 	EdtNewL

EdtClear: ; Clear variables and arrays
 		ZCPY(ZWr,BASEND) 	; end of code
 		;-- clear variables
 		lda 	#0
 		jsr 	ChrWr
 		jsr 	ChrWr
 		ZCPY(VAREND,ZWr) 	; Set VAREND
 		ZCPY(STR_END,ZWr) 	; Set STR_END
 		;-- clear arrays
 		ZCPY(ARYBEG,RAMEND)
 		ZDEC(ARYBEG) 		; top the last ram byte
 		lda 	#0
 		sta 	(ARYBEG)

 		;-- clear vartable (nums, strings, stacks)
 		tay
EdtWipe 	sta 	VARTAB,y 	; clear VARTAB, Gosub,For/Next
 		;-- sta	(BASBEG),y	; clear first page of program space
 		iny
 		bne 	EdtWipe
 		RTN_T()

;----------------------------------------------- EdtUpdate 
EdtUpd: ; Update program with line in TOKBUF
; LN_FND has line no from tokbuf
; TOK_LEN is length of the line in tokbuf
;  Search for LN_FND, EQ=Match NE=Insert MI=EOF/Error
 		jsr 	LnSeekTop 	; seek from top of program
 		bcc 	EdtAdd 		; EOF/Error -> Append
 		beq 	EdtDel 		; Update = Del then Ins
 		bra 	EdtIns
EdtAdd: ; Append TOKBUF line to end of program
 		ZCPY(ZTgt,ZRd) 		; where we read the terminating null
 		ZADD(BASEND,TOK_LEN) 	; BASEND += Len
 		jmp 	EdtCpy

EdtDel: ; Delete line and fall through to Insert
 		ZCPY(ZTgt,LN_ADR)
 		ZCPY(ZSrc,LN_NXT)
 		ZCPY(ZCnt,BASEND)
 		ZSUB(ZCnt,LN_ADR)
 		ZSUB(BASEND,ZSrc) 	; BASEND -= Len
 		ZADD(BASEND,ZTgt)
 		jsr 	EdtDwn

EdtIns: ; Insert line, provided it is not an 'empty' line (length <5)
 		lda 	#5
 		cmp 	TOK_LEN
 		bpl 	EdtInsX 	; Empty Line -> exit
 		;-- ZSrc = LN_ADR
 		ZCPY(ZSrc,LN_ADR)
 		;-- ZTgt=LN_ADR+TOK_LEN
 		ZCPY(ZTgt,LN_ADR)
 		ZADD(ZTgt,TOK_LEN)
 		;-- ZCnt = BASEND - LN_ADR
 		ZCPY(ZCnt,BASEND)
 		ZSUB(ZCnt,LN_ADR) 	; ZSUB(r,n)	r = r-n
 		ZADD(BASEND,TOK_LEN) 	; BASEND += Len
 		;-- copy up to make space
 		jsr 	EdtOpn
 		;-- copy line from TOKBUF to program
 		ZCPY(ZTgt,LN_ADR)
 		jmp 	EdtCpy
EdtInsX 	rts 			; Done

;----------------------------------------------- EdtCpy 
EdtCpy: ; Copy from TOKBUF->(ZTgt)
 		ZSET(ZSrc,TOKBUF) 	; from the token buffer
 		ZCPY(ZCnt,TOK_LEN)
 		ldy 	ZCnt
 		dey 			; zero base
EdtCpyL 	lda 	(ZSrc),y
 		sta 	(ZTgt),y
 		dey
 		bpl 	EdtCpyL
 		ZCPY(VAREND,BASEND) 	; track end of code in VAREND
 		rts

;=================================================================== MEM-ALLOC ======== 

;----------------------------------------------- EdtAlloc 
EdtAlloc: ; TODO Allocate space - reuse old space otherwise create new space
; payload size in ZCnt, Returns pointer in ZPtr

;----------------------------------------------- EdtFresh 
EdtFresh: ; Allocate fresh space - payload size in ZCnt, Returns pointer in ZPtr,AX
; payload size in ZCnt, Returns pointer in ZPtr & AX (points to the length bytes)
; Move ARYBEG down
 		ZCPY(ZPtr,ZCnt) 	; data size
 		;-- add space for the block size & null
 		clc
 		lda 	#3 		; 2:Len, 1:Null
 		adc 	ZPtr
 		sta 	ZPtr
 		lda 	#0
 		adc 	ZPtr+1
 		sta 	ZPtr+1
 		;-- 
 		ZSUB(ARYBEG,ZPtr) 	; reduce ARYBEG
 		;-- TODO check out-of-memory, throw if error
 		ZCPY(ZPtr,ARYBEG) 	; place in ZPtr
 		;-- copy the block size
 		ldy 	#0
 		lda 	ZCnt
 		tax
 		sta 	(ZPtr),y
 		iny
 		lda 	ZCnt+1
 		sta 	(ZPtr),y
 		lda 	#0
EdtFreshClr 	iny
 		sta 	(ZPtr),y
 		dex
 		bpl 	EdtFreshClr
 		lda 	ZPtr
 		ldx 	ZPtr+1
 		rts

;=================================================================== INS/DEL ========== 

;----------------------------------------------- EdtDwn 
; Move bytes down (Delete)
; ZSrc = source start address		Changed
; ZTgt = destination start address	Changed
; ZCnt = number of bytes to move	Preserved
EdtDwn: ;Move bytes down (Delete)
 		ldy 	#0
 		ldx 	ZCnt+1
 		beq 	EdtDwn2
EdtDwn1 	lda 	(ZSrc),Y 	; move a page at a time
 		sta 	(ZTgt),Y
 		iny
 		bne 	EdtDwn1
 		inc 	ZSrc+1
 		inc 	ZTgt+1
 		dex
 		bne 	EdtDwn1
EdtDwn2 	ldx 	ZCnt
 		beq 	EdtDwn4
EdtDwn3 	lda 	(ZSrc),Y 	; move the remaining bytes
 		sta 	(ZTgt),Y
 		iny
 		dex
 		bne 	EdtDwn3
EdtDwn4 	rts

;----------------------------------------------- EdtOpn 
; Move memory up (open up a space)
; ZSrc = source start address		Changed
; ZTgt = destination start address	Changed
; ZCnt = number of bytes to move	Preseved
;
EdtOpn: ; Move memory up
 		ldx 	ZCnt+1 		; the last byte must be moved first
 		clc 			; start at the final pages of ZSrc and ZTgt
 		txa
 		adc 	ZSrc+1
 		sta 	ZSrc+1
 		clc
 		txa
 		adc 	ZTgt+1
 		sta 	ZTgt+1
 		inx 			; allows the use of BNE after the DEX below
 		ldy 	ZCnt
 		beq 	EdtOpn3
 		dey 			; move bytes on the last page first
 		beq 	EdtOpn2
EdtOpn1 	lda 	(ZSrc),Y
 		sta 	(ZTgt),Y
 		dey
 		bne 	EdtOpn1
EdtOpn2 	lda 	(ZSrc),Y 	; handle Y = 0 separately
 		sta 	(ZTgt),Y
EdtOpn3 	dey
 		dec 	ZSrc+1 		; move the next page (if any)
 		dec 	ZTgt+1
 		dex
 		bne 	EdtOpn1
 		rts


#if _DB_EDT
;=================================================================== DBUG ============= 
;----------------------------------------------- DB_EdtLine 
DB_EdtLine: ; Debug editor line - NUM  ADR  NXT  LEN  FND
 		PUSHALL()
 		PRINTLN("NUM  ADR  NXT  LEN  FND")
 		HEX_INT(LN_NUM)
 		HEX_INT(LN_ADR)
 		HEX_INT(LN_NXT)
 		HEX_INT(LN_LEN)
 		HEX_INT(LN_FND)
 		CRLF()
; 		PAUSE()
 		PULLALL()
 		rts

;----------------------------------------------- DB_EdtMem 
DB_EdtMem: ; Debug BASIC vars - BBeg BEnd VEnd SEnd ABeg
; RAMBEG
; BASBEG          BASEND      VAREND        STR_END  ARYBEG  RAMEND
;   |  Program lines | Variables | String work | Free | Arrays |  blank | ROM
 		PUSHALL()
 		PRINTLN("BBeg BEnd VEnd SEnd ABeg")
 		HEX_INT(BASBEG)
 		HEX_INT(BASEND)
 		HEX_INT(VAREND)
 		HEX_INT(STR_END)
 		HEX_INT(ARYBEG)
 		CRLF()
; 		PAUSE()
 		PULLALL()
 		rts
;----------------------------------------------- DB_EdtMove 
DB_EdtMove: ; Debug memory moves - ZPtr ZCnt ZSrc ZTgt
 		PUSHALL()
 		PRINTLN("ZPtr ZCnt ZSrc ZTgt")
 		HEX_INT(ZPtr)
 		HEX_INT(ZCnt)
 		HEX_INT(ZSrc)
 		HEX_INT(ZTgt)
 		CRLF()
; 		PAUSE()
 		PULLALL()
 		rts

#endif


.echo "  _Edtor\t"
.echo $-_Edt
.echo "\n"
.list
#endif
