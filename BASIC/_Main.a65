; _MAIN

#define BUFSZ 64

; #define hide


#include "Macros.a65"
#include "_Vars.a65"


.org $1000
_ROM 		=$
.LIST
;======================================================================================
; 		START OF ROM
 		JMP 	Reset


#include "ConSim.a65" 			; Console Implementation
#include "ChrStr.a65" 			; Base IO (incl macros)
#include "Math.a65" 			; Number code


;=================================================================== MAIN CODE ========
;*  Reset               Reset (Cold start)
;*  Warm                Warm Start entry point
;*
;----------------------------------------------- Reset
Reset: ;Reset (Cold start)
 		;-- Halt IRQs
 		SEI
 		;-- Set Stack pointer to top of the stack space $0100-01FF
 		LDX 	#$ff
 		TXS
 		;-- Binary mode
 		CLD
;----------------------------------------------- Warm
Warm: ;Warm Start entry point
 		;-- Copy ZPage Code
 		JSR 	ChrInit

 		;-- input a line of text until RETURN
 		JSR 	InputIOEcho
 		JSR 	PrNL

 		JSR 	Parse 		; parse line into TOKBUF

 		PR_WR_IO()

 		PRINTLN("--") 		;
 		JSR 	PrNL

 		JSR 	List
 		JSR 	PrNL

		; check the LineNo size
		ZSET(ZRd,TOKBUF-1) 	; read memory from TOKBUF
 		PR_RD_MEM() 		; read from memory (ZRd)
		;
		PR_WR_IO()		; write to IO (screen)
		;
		JSR 	ChrRd		; TOK[LineNo]
		jsr 	X_LineNo	; 'execute' set LNNUM and NXTLN address
		;
		GETAX(LNNUM)
		jsr PrAXHex		; line no as hex
		lda #' '
		jsr PrCh		; space
		GETAX(NXTLN)
		jsr PrAXHex		; address as hex
 		JSR 	PrNL

.export LNNUM,NXTLN


 		BRK

#include "Tables.a65"
#include "Tok.a65"

.echo $-_ROM
.echo " Total Bytes used\n"

.end
