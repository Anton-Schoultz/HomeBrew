#define hide

; E000-FFFF = 8k
#define _ROM $E000
;			; Aprox.Size
_DB_STR		= 0	; 144
_DB_MAIN	= 0	;  92
_DB_EDT		= 0	; 395
_DB_EVAL	= 0	; 143
_DB_LINE	= 0	; 188
_DB_NUM		= 0	; 114
_DB_FOR		= 0	; 150
_DB_LIST	= 0	; 147
_DB_PRINT	= 0
_DBUG 		= _DB_MAIN+_DB_STR+_DB_EDT+_DB_EVAL+_DB_LINE+_DB_NUM+_DB_FOR+_DB_LIST+_DB_PRINT
; _DBUG ~ 146

#if _DBUG
.echo "\t+--------------+\n"
.echo "\t| DEBUG Active |\n"
.echo "\t+--------------+\n\n"
#endif

.echo "\tROM at $E000-$FFFF (8k)\r"
; .echo "\t\tROM at $C000-$FFFF (16k)\r"

#include "Constants.a65"
#include "Macros.a65"
#include "_Vars.a65"

;=================================================================== MAIN =============
;*  Main                 Warm Start entry point
;*  MainLoop             Main Loop
;*  MainProg             Dump start of Program space
;*  MainTokBuf           Dump TOKBUF
;*  Reset                Reset (Cold start)
;*
#ifdef hide
.NOLIST
#endif

.org _ROM
.LIST
;----------------------------------------------- START OF ROM
; 		START OF ROM
 		jmp 	Reset

#include "ConSim.a65" 			; Console Implementation
#include "ChrStr.a65" 			; Base IO (incl macros)
#include "Util.a65" 			; utilities for general use
#include "Error.a65" 			; Error/token expansion

#include "Str.a65" 			; String code

#include "Math.a65" 			; Number code
#include "Eval.a65" 			; Evaluator

#include "Line.a65"			; Line control


Greet .db _FF,"Anton's basic",CR,LF,0

;----------------------------------------------- Reset
Reset: ;Reset (Cold start)
 		sei 			; Halt IRQs
 		ldx 	#$ff 		; Set Stack pointer
 		txs
 		cld 			; Binary mode
; RAMBEG    BASBEG          BASEND      VAREND        STR_END  ARYBEG  RAMEND
;   | A-Z Vars | Program lines | Variables | String work | Free | Arrays |  blank | ROM
 		LDAX($800)
 		SETAX(RAMBEG)

 		;LDAX($8000) 		; end of 32K RAM
 		LDAX($0A00)
 		SETAX(RAMEND)

 		jsr 	ChrInit 	; Set up ZPage Code & vectors
 		jsr 	EdtNew 		; NEW

 		LDAX(Greet)
 		jsr	PrStrAX



;----------------------------------------------- Main
Main: ;Warm Start entry point
		;-- reset the stack
 		sei 			; Halt IRQs
 		ldx 	#$ff 		; Set Stack pointer
 		txs
 		cld 			; Binary mode
 		cli

 		;-- Copy ZPage Code
 		jsr 	ChrInit 	; set up mem rd
 		jsr 	NumInit 	; init calc stack pointer
 		jsr	StrInit		; init string stack etc
 		;-- Gosub/Rtn, Forn/Next
 		lda 	#0
 		sta	RTNSP
 		sta	FOR_SP
 		sta	FOR_ADR		; mark end of for next stack with zero address
 		sta 	FOR_ADR+1

 		PR_WR_IO()

;----------------------------------------------- MainLoop
MainLoop: ; Main Loop
 		PR_WR_IO()
 		lda 	#'>'
 		jsr 	ConOut
 		jsr 	InputIOEcho 	; Read from Mem/IO and place in INBUF, until CR
 		jsr 	PrNL
 		jsr 	Parse 		; Parse INBUF into TOKBUF

#if _DBUG
	jsr MainTokBuf
#endif

#if _DB_MAIN
 	ZSET(ZRd,TOKBUF+3) 	; where to run from
 	jsr ChrRd
 	jsr RunInit 		; set I/O, Zero suppress etc
 	jsr EvNumeric
 	jsr DB_EvStr
;	jsr MainList
	jmp MainLoop
#endif

 		;-- immediate command ? (No line number)
 		lda 	TOKBUF
 		cmp 	#T_LineNo
 		bne 	MainCmd
 		;-- has line number so update the program
 		jsr 	EdtUpd
 		;-- back to main loop
 		jmp 	MainLoop

;----------------------------------------------- MainCmd
MainCmd 	;-- Run command line
 		jsr 	PrNL
 		jsr 	RunCmd
 		jsr 	PrNL
 		bra 	MainLoop

.nolist
#if _DBUG
.list
;=================================================================== DBUG =============
MainTokBuf: ; Dump TOKBUF
 		PR_WR_IO()
  		HEX_DUMP(TOKBUF) 	; dump 8
  		jsr 	HexDump 	; dump next 8
  		jsr 	HexDump 	; dump next 8
  		jmp 	PrNL

MainList:; list TOKBUF
		ZSET(ZRd,TOKBUF)
		lda (ZRd)
		sta CHRGOT
		jmp ListLnL



MainProg: ; Dump start of Program space
 		HEX_DUMP($0800)
 		jsr 	HexDump 	; dump next 8
 		jsr 	HexDump 	; dump next 8
 		jsr 	HexDump 	; dump next 8
 		jsr 	HexDump 	; dump next 8
 		jsr 	HexDump 	; dump next 8
 		jmp 	PrNL
#endif


#include "Variables.a65" 		; Variable parse/list

#include "All.a65" 			; include all keywords
#include "Tok.a65" 			; Genral Parse/List
#include "Editor.a65" 			; Program editor

#include "IrqNmi.a65" 			; Interrupt handlers

ROMEND 		= $


;----------------------------------------------- TblKeyword
; Include for the keyword table ..
.org TblKeyword
#include "All.a65"
.echo "\tWords\t"
.echo $-TblKeyword
.echo "/256\n"

;----------------------------------------------- TblRun
; Include for the jump/run table
.org TblRun
.nolist
#include "All.a65"
T_Max 		= LOW($)+$80
.echo "\tTokens\t"
.echo (T_Max-$80)/2
.echo "/64 \t("
.echo $-TblRun
.echo "/256)\n"

#if T_Max > $F0
.echo " Too many tokens"
#endif
.echo "\n"
.dw 0
.list


;----------------------------------------------- hardware vectors
; FFFA,B	NMI
; FFFC,D	Reset
; FFFE,F	IRQ
.org $FFFA
.dw Nmi 				; FFFA,B=> NMI		Points to Non-Maskable Interrupt handler
.dw Reset 				; FFFC,D=> NRET	Points to Reset address (cold start)
.dw Irq 				; FFFE,F=> IRQ		Points to Interrupt handler

.echo "\nEPROM "
.echo ROMEND - _ROM + 512
.echo " bytes used (~"
.echo (ROMEND - _ROM + 512) * 100 / 8192
.echo "%)  "
.echo ($FF00 - ROMEND)
.echo " bytes remaining.\n\n"

.export T_FNUM,T_FSTR

.end
