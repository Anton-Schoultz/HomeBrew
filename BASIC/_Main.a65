#define hide

#include "Macros.a65"
#include "_Vars.a65"

;=================================================================== MAIN =============
;*  Main                MAIN code
;*  Reset               Reset (Cold start)
;*  Warm                Warm Start entry point
;*
#ifdef hide
; .NOLIST
#endif


.org $F000
_ROM 		=$
.LIST
;----------------------------------------------- START OF ROM
; 		START OF ROM
 		jmp 	Reset


#include "ConSim.a65" 			; Console Implementation
#include "ChrStr.a65" 			; Base IO (incl macros)
#include "Math.a65" 			; Number code
#include "Str.a65" 			; String code
#include "Eval.a65" 			; Evaluator

ALIGN(16)
Src020
.DB "PRINT 1234,456,9,"
.db QT,"Hi",QT
.db " 					;12"
; .db ",VAR=123"
.db 0
 		;-- 0123456789a
Text 		.DB 	"  Hello  1234  ",0
Text1 		.DB 	" - Happy days",0

.export Src020

;----------------------------------------------- Reset
Reset: ;Reset (Cold start)
 		sei 			; Halt IRQs
 		ldx 	#$ff 		; Set Stack pointer
 		txs
 		cld 			; Binary mode
 		cli 			; Enable irqs

;----------------------------------------------- Warm
Warm: ;Warm Start entry point
 		;-- Copy ZPage Code
 		jsr 	ChrInit

;----------------------------------------------- Main
Main: ; MAIN code
 		CLS()

 		jsr 	StrClr 		; wipe it

 		ZSET(ZStr,Text) 	; point to text
 		jsr 	StrAdd 		; append

 		jsr 	StrOut
 		lda 	#'|'
 		jsr 	ChrOut
 		jsr 	PrNL

 		jsr 	StrLower

 		jsr 	StrOut
 		lda 	#'|'
 		jsr 	ChrOut
 		jsr 	PrNL

 		HALT()


; 		PR_RD_MEM() 		; read from memory (ZRd)
; 		PR_ECHO_OFF() 		; don't echo it
; 		;-- write to TOKBUF
; 		ZSET(ZWr,TOKBUF) 	; point to TOKBUF
; 		PR_WR_MEM() 		; write to memory
 		;--
; 		CLS()
 		;--
; 		;-- parse the tets source line
; 		ZSET(ZRd,Src020-1 ) 	; read memory from Src010
 		;--
; 		jsr 	ParseIn 	;parse from input (memory)
; 		lda 	#0
; 		jsr 	ChrWr 		; end of program
 		;--
; 		;-- dump TOKBUF
; 		PR_WR_IO()
; 		HEX_DUMP(TOKBUF) 	; dump 8
; 		jsr 	HexDump 	; dump next 8
; 		jsr 	HexDump 	; dump next 8
; 		jsr 	HexDump 	; dump next 8
; 		jsr 	HexDump 	; dump next 8
; 		jsr 	HexDump 	; dump next 8
 		;--
; 		HEX_DUMP(LNNUM) 	; LNNUM, NXTLN, LNLEN, TOKNO, VARID
 		;--
; 		PR_ZSUP_ON()
 		;--
; 		;-- List the line in TOKBUF
; 		jsr 	List
 		;--
; 		lda 	#'_'
; 		jsr 	PutChr
 		;--
; 		BREAK($30)
; 		PR_ZSUP_OFF()
; 		jsr 	Run

 		HALT()

#include "Tables.a65"
#include "Tok.a65"
#include "IrqNmi.a65"

ROMEND 		= $

.echo "  TOTAL "
.echo $-_ROM
.echo " Bytes used\n"



;----------------------------------------------- hardware vectors
; FFFA,B	NMI
; FFFC,D	Reset
; FFFE,F	IRQ
.org $FFFA
.dw Nmi 				; FFFA,B=> NMI		Points to Non-Maskable Interrupt handler
.dw Reset 				; FFFC,D=> NRET	Points to Reset address (cold start)
.dw Irq 				; FFFE,F=> IRQ		Points to Interrupt handler

.echo "  "
.echo ($FFFA - ROMEND) / 256
.echo "/16 pages (x256) available in the 4k ROM. F000-FFFF\r"
 		;-- .echo "/32 pages (x256) available in the 4k ROM. E000-FFFF\r"



.end
