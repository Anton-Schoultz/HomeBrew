; #define hide

; E000-FFFF = 8k
#define _ROM $E000

#include "Macros.a65"
#include "_Vars.a65"

;=================================================================== MAIN =============
;*  CopyLine             copy TestSrc into INBUF
;*  Main                 MAIN code
;*  Reset                Reset (Cold start)
;*  TblRun               Table of addresses to execute keyword
;*  Warm                 Warm Start entry point
;*
#ifdef hide
; .NOLIST
#endif


 		;-- .echo "ROM at $F000-$FFFF (4k)\r"
.echo "ROM at $E000-$FFFF (8k)\r"
; .echo "ROM at $C000-$FFFF (16k)\r"

.org _ROM
.LIST
;----------------------------------------------- START OF ROM
; 		START OF ROM
 		jmp 	Reset

.db DATE
.db TIME

#include "ConSim.a65" 			; Console Implementation
#include "ChrStr.a65" 			; Base IO (incl macros)

#include "Util.a65" 			; utilities for general use

#include "Str.a65" 			; String code
#include "Math.a65" 			; Number code
#include "Eval.a65" 			; Evaluator


TestSrc
; .DB "10  PRINT 12/(3+2)"	;  2.4 ok
; .DB "10  PRINT 12/10+120"	;  1.212e02 =  121.2 ok
; .DB "10  PRINT 120+12/10"	;  1.212e02 =  121.2 ok
; .DB "10  PRINT 12/10-120"	; -1.188e02 = -118.8 ok
; .DB "10  PRINT 120-12/10"     ;  1.188e02 =  118.8 ok

; .db "10 PRINT 1234/1000"	;  1.234 ok
.db "10 PRINT 1234+1"

; .db "10 PRINT 12345+1234/1000"	; 4.433450e3 = 4433.45 FAIL 12346.234

 		;-- .DB "10 PRINT 12/5"

 		;-- .db QT,"xyz",QT
 		;-- .db ",123"
.db 0


Str1234 	.DB 	"1234",0
StrNeg123 	.DB 	"-123",0

 		;-- .DB "PRINT 1234,456,9,"
 		;-- .db QT,"Hi",QT
 		;-- .db " 					;12"
 		;-- .db 0

 		;-- 0123456789a
Text 		.DB 	"  Hello  1234  ",0
Text1 		.DB 	" - Happy days",0

;----------------------------------------------- Reset
Reset: ;Reset (Cold start)
 		sei 			; Halt IRQs
 		ldx 	#$ff 		; Set Stack pointer
 		txs
 		cld 			; Binary mode
 		cli 			; Enable irqs

;----------------------------------------------- Warm
Warm: ;Warm Start entry point
 		;-- Copy ZPage Code
 		jsr 	ChrInit

;----------------------------------------------- Main
Main: ; MAIN code
 		CLS()


 		PR_RD_MEM() 		; divert GetChr to ChrRd
 		ZSET(ZRd,Str1234-1)
 		jsr 	GetChr 		; get first char into CHRGOT
 		jsr 	NumParse
 		HEX_DUMP(NUM_A)		; 1234
		jsr	NumPushA


 		ZSET(ZRd,StrNeg123-1)
 		jsr 	GetChr 		; get first char into CHRGOT
 		jsr 	NumParse
 		HEX_DUMP(NUM_A)		; -123

		jsr	NumPopB

		jsr PrNL
 		HEX_DUMP(NUM_A)		; -123	FF7B00
 		HEX_DUMP(NUM_B)		; 1234  00D204
		jsr PrNL


;		jsr	NumAdd		; 1234 + (-123) = 1111
		jsr	NumSub		; 1234 - (-123) = 1357


		PR_ZSUP_ON()
 		jsr 	NumPrint


; 		jsr	IntPrint
; 		HALT()

; 		LOAD(12345)
; 		jsr 	NumPushA
; 		LOAD(12345)
; 		jsr 	NumPopB
 		;--
 		;-- ; 12345 / 123 => 000064.5DA895	0058 00 95 A8 5D 64 00 00 xx
 		;-- ; 12345 * 123 => 000000 172B63  0058 40 63 2B 17 00 00 00 xx
 		;--
 		;-- ; 12345 * 12345 = 152,399,025   0058 42 16 41 17 00 00 00  => 1.523990E8 => 152,399,000
 		;--
; 		HEX_DUMP(NUM_B) 	; NUMB(4) NUM_TMP(4)
; 		jsr 	HexDump 	; NUM_A(8)
; 		jsr 	HexDump 	; NUM_DIV(4),EXP,SGN,DEC,ZDIV
; 		jsr 	PrNL
 		;--
; 		jsr 	NumDiv
 		;--
; 		HEX_DUMP(NUM_B) 	; NUMB(4) NUM_TMP(4)
; 		jsr 	HexDump 	; NUM_A(8)
; 		jsr 	HexDump 	; NUM_DIV(4),EXP,SGN,DEC,ZDIV
; 		jsr 	PrNL
 		;--
 		;--
; 		PR_ZSUP_ON()
; 		jsr 	X_PrNum
 		;--
 		;--
; 		HALT()




MainLoop 	;-- Prompt and input

; 		PR_WR_IO()
; 		jsr 	PrNL
; 		lda 	#'>'
; 		jsr 	ConOut
; 		jsr 	InputIOEcho 	; Read from Mem/IO and place in INBUF, until CR
 		;--
; 		jsr 	CopyLine
 		;--
; 		;-- clear screen
; 		CLS()
 		;--
; 		;-- display input text
; 		LDAX(INBUF)
; 		jsr 	PrStrAX 	; display source line
; 		jsr 	PrNL
 		;--
; 		;-- parse input
; 		jsr 	Parse 		; Parse INBUF into TOKBUF
; 		lda 	#0
; 		jsr 	ChrWr 		; end of program
 		;--
; 		;-- dump TOKBUF
; 		PR_WR_IO()
; 		HEX_DUMP(TOKBUF) 	; dump 8
; 		jsr 	HexDump 	; dump next 8
; 		jsr 	HexDump 	; dump next 8
; 		jsr 	HexDump 	; dump next 8
; 		;--
; 		PR_ZSUP_ON()
; 		;-- List the line in TOKBUF
; 		jsr 	List
 		;--
; 		;-- Run
; 		lda 	#':'
; 		jsr 	PutChr
; 		PR_ZSUP_ON()
 		;-- ; 		PR_ZSPC_OFF()
; 		jsr 	Run

 		;-- loop back and do it again
; 		bra 	MainLoop

 		HALT()

;----------------------------------------------- CopyLine
CopyLine: ; copy TestSrc into INBUF
 		;-- Copy test source into INBUF
 		ldy 	#$FF
CopyLineL 	iny
 		lda 	TestSrc,y
 		sta 	INBUF,y
 		cmp 	#0
 		bne 	CopyLineL
 		rts


#include "Tables.a65"

#include "Variables.a65"

#include "Tok.a65"
#include "IrqNmi.a65"

ROMEND 		= $

.echo "  _EPROM used \t"
.echo $- _ROM
.echo "\n"

.echo "  _EPROM Avail\t"
.echo ($FF00 - ROMEND)
.echo "\n"

;----------------------------------------------- TblRun
.org $FF00 				; PAGE()

TblRun: ; Table of addresses to execute keyword
.nolist
BLD 		= BLD_TBL_RUN
#include "All.a65"
T_Max 		= LOW($)+$80

#if T_Max > $F6
.echo "Too many tokens\r"
#endif

.dw 0
.list


;----------------------------------------------- hardware vectors
; FFFA,B	NMI
; FFFC,D	Reset
; FFFE,F	IRQ
.org $FFFA
.dw Nmi 				; FFFA,B=> NMI		Points to Non-Maskable Interrupt handler
.dw Reset 				; FFFC,D=> NRET	Points to Reset address (cold start)
.dw Irq 				; FFFE,F=> IRQ		Points to Interrupt handler

 		;-- .echo "/32 pages (x256) available in the 4k ROM. E000-FFFF\r"



.end
