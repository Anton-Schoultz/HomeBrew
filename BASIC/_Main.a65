#define xhide

; 6502 Simulator equivalent to aprox 1.7Mhz clock on my machine

;=================================================================== BASIC ============
; ABS(##)
;    Return absolute value of numeric expression ##
; ASC($$)
;    Return numeric value of the first character of String $$
; CHR$(##)
;    Return string with a character for the given value
; CLEAR
;    Clear variables
; CLS
;    Clear Screen
; DEEK(##)
;    Return the contents of memory word at address
; DIM  a$(##size) [,b$(##size)]*
;    Dimension Strings
; DOKE ##Address,##word
;    Poke word of data to the address
; FOR #V = ##From TO ##Limit [STEP ##Step]
;    Start of FOR/NEXT Loop
; FRE(##)
;    Return number of bytes available in free memory
; STR$(##Value)
;    Return string representation of the value
; GOSUB #expr
;    Call subroutine at LineNo
; GOTO #NumExpr
;    Goto LineNo
; IF ?? THEN {Statment}
;    Execute statement if condition ?? is true
; do string comparison
; INPUT ("prompt"|,|NumVar|StrVar)*
;    Input values with optional prompts
; LEFT$($$,##)
;    Keep left most chars of string [Head]
; Len($$)
;    Return the length of the string expression
; LET {var}={expr}
;    Assign value to a variable
; LIST [##From] [- [##To]]
;    List program (optional range of lines)
; List lines in range LST_BEG to LST_END
; LOAD
;    Load program
; LOWER($$)
;    Convert string to Lower case
; LTRIM($$)
;    Trim leading spaces from string
; MID$($$,##From,##Len)
;    Return substring of Len chars from position From
; NEW
;    Clear program and data
; NEXT {Var}
;    End of FOR/NEXT loop
; PEEK(##Address)
;    Return the byte at address
; POKE ##Address,##value
;    Poke byte of data to the address
; PRINT (##|$$| |,)*
;    Print sequence of values
; REM {comment}
;    Program remarks/comments
; RETURN
;    Return control to after the GOSUB
; RIGHT$($$,##N)
;    Keep right most N chars of string [Tail]
; RND(##Max)
;    Return random number 0..(##Max-)
; RTRIM$($$)
;    Trim trailing spaces from string
; RUN [#LineNo]
;    Execute the program, optionally from line number
; SAVE
;    Save program
; SGN(##Value)
;    Return sign of the value as  -1, 0 or 1
; SQR(##Val)
;    Return the Square of Val
; STOP
;    Stop executing the program
; TRIM$($$)
;    Trim leading and trailing spaces from the string
; UPPER$($$)
;    Convert string to upper case
; VAL($$)
;    Evaluate the string and return it's numeric value

; RAMBEG
; BASBEG          BASEND      VAREND        STR_END  ARYBEG  RAMEND
;   |  Program lines | Variables | String work | Free | Arrays |  blank | ROM

;=================================================================== TODO =============
; GET v		Stores KeyPress value into var v
;
; POS(#)	Return column no of screen cursor
; TAB(n)	Set screen column number
;
; SPC(n)	Return string of n spaces
;
; SYS(adr)	Execute machine code at address
;
; TIME(#)	Timer value
;
; ON <expr> GOTO/GOSUB LinNum,... 	?
;
; CONT
; DATA, READ, RESTORE
; INT(v),
;
;======================================================================================


; E000-FFFF = 8k
#define _ROM $E000

#define _RAM_BAS_BEG	$0800
#define _RAM_BAS_END	$1000

 		;-- ; Aprox.Size
_DB_STR 	= 0 				; 144
_DB_MAIN 	= 0 				;  92
_DB_EDT 	= 0 				; 395
_DB_EVAL 	= 0 				; 143
_DB_LINE 	= 0 				; 188
_DB_NUM 	= 0 				; 114
_DB_FOR 	= 0 				; 150
_DB_LIST 	= 0 				; 147
_DB_PRINT 	= 0
_DBUG 		= _DB_MAIN+_DB_STR+_DB_EDT+_DB_EVAL+_DB_LINE+_DB_NUM+_DB_FOR+_DB_LIST+_DB_PRINT
 		;-- _DBUG = 154	; 6077-5923

#if _DBUG
.echo "\t+--------------+\n"
.echo "\t| DEBUG Active |\n"
.echo "\t+--------------+\n\n"
#endif

_DETAIL 	= 2
_KEYWORDS 	= 1
_SUMMARY 	= 0

_LEVEL 		= _KEYWORDS

.echo "\tROM at $E000-$FFFF (8k)\r"
; .echo "\t\tROM at $C000-$FFFF (16k)\r"

#include "Constants.a65"

MathModule 	= MATH_MOD_S24 			;6651 -> 6578
 		;-- MathModule = MATH_MOD_S16	;6534 -> 6431

#include "Macros.a65"
#include "_Vars.a65"

;=================================================================== MAIN =============
;*  Main                 Warm Start = Reset Stack,Init Chr,Str,Calc,Devices
;*  MainList             list TOKBUF
;*  MainLoop             Main Loop
;*  MainProg             Dump start of Program space
;*  MainTokBuf           Dump TOKBUF
;*  Reset                Reset (Cold start)
;*
#ifdef hide
.NOLIST
#endif

.org _ROM
.LIST
;------------------------------------------------------- START OF ROM
; 		START OF ROM
 		jmp 	Reset

#if MathModule = MATH_MOD_S24
Greet 		.DB 	_FF,"Minimal BASIC S24",CR,LF,0
#endif

#if MathModule = MATH_MOD_S16
Greet 		.DB 	_FF,"Minimal BASIC S16",CR,LF,0
#endif

#include "Util.a65" 				; utilities for general use

#include "ConSim.a65" 				; Console Implementation
#include "ComSim.a65" 				; Com port simulation

#include "ChrStr.a65" 				; Base IO (incl macros)
#include "Error.a65" 				; Error/token expansion
#include "Str.a65" 				; String code
#include "Math.a65" 				; Number code
#include "Eval.a65" 				; Evaluator
#include "Line.a65" 				; Line control


;------------------------------------------------------- Reset
Reset: ;Reset (Cold start)
 		sei 				; Halt IRQs
 		ldx 	#$ff 			; Set Stack pointer
 		txs
 		cld 				; Binary mode

 		lda 	#0
 		;-- zero the timer
 		sta 	TIMER
 		sta 	TIMER+1
 		sta 	TIMER+2

 		tay
RstClr 		sta 	$0000,y 		; clear z-page
 		sta 	$0100,y 		; clear stack area
 		sta 	$0200,y 		; clear system var area
 		;-- $300 is I/O
 		iny
 		bne 	RstClr

; RAMBEG    BASBEG          BASEND      VAREND        STR_END  ARYBEG  RAMEND
;   | A-Z Vars | Program lines | Variables | String work | Free | Arrays |  blank | ROM
 		LDAX(_RAM_BAS_BEG)
 		SETAX(RAMBEG)

 		;-- LDAX($8000) 		; end of 32K RAM
 		LDAX(_RAM_BAS_END)
 		SETAX(RAMEND)

 		;-- clear VARTAB, Gosub,For/Next and 1st page of BASIC
 		jsr 	EdtNew 			; NEW

 		jsr 	ComInit 		; reset Serial

 		;-- Greeting
 		LDAX(Greet)
 		jsr 	PrStrAX

;------------------------------------------------------- Main
Main: ;Warm Start = Reset Stack,Init Chr,Str,Calc,Devices
 		;-- reset the stack and binary mode
 		sei 				; Halt IRQs
 		ldx 	#$ff 			; Set Stack pointer
 		txs
 		cld 				; Binary mode
 		;-- Initialise
 		jsr 	NumInit 		; init calc stack pointer
 		jsr 	StrInit 		; init string stack etc
 		;-- Gosub/Rtn, For/Next
 		lda 	#0
 		sta 	RTNSP
 		sta 	FOR_SP
 		sta 	FOR_ADR 		; mark end of for next stack with zero address
 		sta 	FOR_ADR+1

 		sta 	HLTFLG

 		;-- default input and putput devices
 		lda 	#DEV_IN_STD
 		sta 	DEV_IN
 		lda 	#DEV_OUT_STD
 		sta 	DEV_OUT

 		;-- character output to I/O device -> ChrOut
; 		PR_WR_IO()
 		cli 				; enable IRQ's


;------------------------------------------------------- MainLoop
MainLoop: ; Main Loop
 		lda 	#'>'
 		jsr 	InputText
 		jsr 	Parse 			; Parse INBUF into TOKBUF

#if _DBUG
; 		jsr 	MainTokBuf
#endif

#if _DB_MAIN
 		ZSET(ZRd,TOKBUF+3) 		; where to run from
 		jsr 	ChrRd
 		jsr 	RunInit 		; set I/O, Zero suppress etc
 		jsr 	EvNumeric
 		jsr 	DB_EvStr
 		;-- jsr MainList
 		jmp 	MainLoop
#endif

 		;-- immediate command ? (No line number)
 		lda 	TOKBUF
 		cmp 	#T_LineNo
 		bne 	MainCmd
 		;-- has line number so update the program
 		jsr 	EdtUpd
 		;-- back to main loop
 		jmp 	MainLoop

;------------------------------------------------------- MainCmd
MainCmd 	;-- Run command line
 		jsr 	PrNL
 		jsr 	RunCmd
 		jsr 	PrNL
 		bra 	MainLoop

.nolist
#if _DBUG
.list
;=================================================================== MAIN-DBUG =============
MainTokBuf: ; Dump TOKBUF
; 		PR_WR_IO()
 		CLS()
 		jsr 	MainList
 		HEX_DUMP(TOKBUF) 		; dump 8
 		jsr 	HexDump 		; dump next 8
;   		jsr 	HexDump 	; dump next 8
 		jmp 	PrNL

MainList: ; list TOKBUF
 		ZSET(ZRd,TOKBUF)
 		lda 	(ZRd)
 		sta 	CHRGOT
 		jmp 	ListLnL



MainProg: ; Dump start of Program space
 		HEX_DUMP($0800)
 		jsr 	HexDump 		; dump next 8
 		jsr 	HexDump 		; dump next 8
 		jsr 	HexDump 		; dump next 8
 		jsr 	HexDump 		; dump next 8
 		jsr 	HexDump 		; dump next 8
 		jmp 	PrNL
#endif


#include "Variables.a65" 			; Variable parse/list

#include "All.a65" 				; include all keywords
#include "Tok.a65" 				; General Parse/List
#include "Editor.a65" 				; Program editor

#include "IrqNmi.a65" 				; Interrupt handlers

ROMEND 		= $


;------------------------------------------------------- TblKeyword
; Include for the keyword table ..
.org TblKeyword
#include "All.a65"
.echo "\tWords\t"
.echo $-TblKeyword
.echo "/256 ("
.echo 256-($-TblKeyword)
.echo " free)\n"



;------------------------------------------------------- TblRun
; Include for the jump/run table
.org TblRun
.nolist
#include "All.a65"
T_Max 		= LOW($)+$80
.echo "\tTokens\t"
.echo (T_Max-$80)/2
.echo "/64 \t("
.echo $-TblRun
.echo "/256 bytes,"
.echo 256-($-TblRun)
.echo " free)\n"

#if T_Max > $F0
.echo " Too many tokens"
#endif
.echo "\n"
.dw 0
.list


;------------------------------------------------------- hardware vectors
; FFFA,B	NMI
; FFFC,D	Reset
; FFFE,F	IRQ
.org $FFFA
.dw Nmi 					; FFFA,B=> NMI		Points to Non-Maskable Interrupt handler
.dw Reset 					; FFFC,D=> NRET	Points to Reset address (cold start)
.dw Irq 					; FFFE,F=> IRQ		Points to Interrupt handler

.echo "\nEPROM "
.echo ROMEND - _ROM + 512
.echo " bytes used (~"
.echo (ROMEND - _ROM + 512) * 100 / 8192
.echo "%)  "
.echo ($FE00 - ROMEND)
.echo " bytes remaining.\n\n"

.export  ROMEND,TblKeyword,TblRun

.end
