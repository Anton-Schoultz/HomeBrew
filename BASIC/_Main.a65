 		;-- #define hide

; E000-FFFF = 8k
#define _ROM $E000

_DBUG 		= 0

; .echo "ROM at $F000-$FFFF (4k)\r"
.echo "ROM at $E000-$FFFF (8k)\r"
; .echo "ROM at $C000-$FFFF (16k)\r"

#include "Constants.a65"

#include "Macros.a65"
#include "_Vars.a65"

;=================================================================== MAIN =============
;*  Main                 Warm Start entry point
;*  MainLoop             Main Loop
;*  MainProg             Dump start of Program space
;*  MainTokBuf           Dump TOKBUF
;*  Reset                Reset (Cold start)
;*
#ifdef hide
.NOLIST
#endif

.org _ROM
.LIST
;----------------------------------------------- START OF ROM
; 		START OF ROM
#if _DBUG
 		jsr 	LnComp_Test
#endif

 		jmp 	Reset

.db DATE
.db TIME

#include "ConSim.a65" 			; Console Implementation
#include "ChrStr.a65" 			; Base IO (incl macros)
#include "Util.a65" 			; utilities for general use
#include "Error.a65" 			; Error/token expansion

#include "Str.a65" 			; String code

#include "Math.a65" 			; Number code
#include "Eval.a65" 			; Evaluator
#include "Line.a65"

;----------------------------------------------- Reset
Reset: ;Reset (Cold start)
 		sei 			; Halt IRQs
 		ldx 	#$ff 		; Set Stack pointer
 		txs
 		cld 			; Binary mode
; RAMBEG    BASBEG          BASEND      VAREND        STREND  ARYBEG  RAMEND
;   | A-Z Vars | Program lines | Variables | String work | Free | Arrays |  blank | ROM
 		LDAX($800)
 		SETAX(RAMBEG)
 		LDAX($8000) 		; end of 32K RAM
 		SETAX(RAMEND)

 		jsr 	ChrInit 	; Set up ZPage Code & vectors
 		jsr 	EdtNew 		; NEW
 		CLS() 			; CLS

;----------------------------------------------- Main
Main: ;Warm Start entry point
 		;-- Copy ZPage Code
 		jsr 	ChrInit 	; set up mem rd
 		jsr 	NumInit 	; init calc stack pointer
 		;-- Gosub/Rtn, Forn/Next
 		lda 	#0
 		sta	RTNSP
 		sta	FORSP


;----------------------------------------------- MainLoop
MainLoop: ; Main Loop
 		PR_WR_IO()
 		lda 	#'>'
 		jsr 	ConOut
 		jsr 	InputIOEcho 	; Read from Mem/IO and place in INBUF, until CR
 		jsr 	PrNL
 		jsr 	Parse 		; Parse INBUF into TOKBUF
 		;-- immediate command ? (No line number)
 		lda 	TOKBUF
 		cmp 	#T_LineNo
 		bne 	MainCmd
 		;-- has line number so update the program
 		jsr 	EdtUpd
 		;-- back to main loop
 		jmp 	MainLoop

;----------------------------------------------- MainCmd
MainCmd 	;-- Run command line
 		jsr 	PrNL
 		jsr 	RunCmd
 		jsr 	PrNL
 		bra 	MainLoop

;======================================================================================

MainTokBuf: ; Dump TOKBUF
; 		PR_WR_IO()
;  		HEX_DUMP(TOKBUF) 	; dump 8
;  		jsr 	HexDump 	; dump next 8
;  		jsr 	HexDump 	; dump next 8
;  		jmp 	PrNL

MainProg: ; Dump start of Program space
; 		HEX_DUMP($0800)
; 		jsr 	HexDump 	; dump next 8
; 		jsr 	HexDump 	; dump next 8
; 		jsr 	HexDump 	; dump next 8
; 		jsr 	HexDump 	; dump next 8
; 		jsr 	HexDump 	; dump next 8
; 		jmp 	PrNL



#include "Variables.a65" 		; Variable parse/list

#include "All.a65" 			; include all keywords
#include "Tok.a65" 			; Genral Parse/List
#include "Editor.a65" 			; Program editor

#include "IrqNmi.a65" 			; Interrupt handlers

ROMEND 		= $


;----------------------------------------------- TblKeyword
; Include for the keyword table ..
.org TblKeyword
#include "All.a65"

;----------------------------------------------- TblRun
; Include for the jump/run table
.org TblRun
.nolist
#include "All.a65"
T_Max 		= LOW($)+$80
.echo "Tokens "
.echo (T_Max-$80)/2
.echo "/64"
#if T_Max > $F0
.echo " Too many tokens"
#endif
.echo "\n"
.dw 0
.list


;----------------------------------------------- hardware vectors
; FFFA,B	NMI
; FFFC,D	Reset
; FFFE,F	IRQ
.org $FFFA
.dw Nmi 				; FFFA,B=> NMI		Points to Non-Maskable Interrupt handler
.dw Reset 				; FFFC,D=> NRET	Points to Reset address (cold start)
.dw Irq 				; FFFE,F=> IRQ		Points to Interrupt handler

.echo "\nEPROM "
.echo ROMEND - _ROM + 512
.echo " bytes used (~"
.echo (ROMEND - _ROM + 512) * 100 / 8192
.echo "%)  "
.echo ($FF00 - ROMEND)
.echo " bytes remaining.\n\n"


.end
