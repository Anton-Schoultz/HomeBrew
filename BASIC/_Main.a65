; _MAIN

#define BUFSZ 64

; #define hide


#include "Macros.a65"
#include "_Vars.a65"


.org $F000
_ROM 		=$
.LIST
;======================================================================================
; 		START OF ROM
 		jmp 	Reset


#include "ConSim.a65" 			; Console Implementation
#include "ChrStr.a65" 			; Base IO (incl macros)
#include "Math.a65" 			; Number code

ALIGN(16)
 		;-- Src010 		.DB 	"10 REM hello",0
Src020 		.DB 	"20 PRINT 1234", 0

.export Src020

;=================================================================== MAIN CODE ========
;*  Main                MAIN code
;*  Reset               Reset (Cold start)
;*  Warm                Warm Start entry point
;*
;----------------------------------------------- Reset
Reset: ;Reset (Cold start)
 		sei 			; Halt IRQs
 		ldx 	#$ff 		; Set Stack pointer
 		txs
 		cld 			; Binary mode
 		cli 			; Enable irqs

;----------------------------------------------- Warm
Warm: ;Warm Start entry point
 		;-- Copy ZPage Code
 		jsr 	ChrInit

;----------------------------------------------- Main
Main: ; MAIN code

 		PR_RD_MEM() 		; read from memory (ZRd)
 		PR_ECHO_OFF() 		; don't echo it
 		;-- write to TOKBUF
 		ZSET(ZWr,TOKBUF) 	; point to TOKBUF
 		PR_WR_MEM() 		; write to memory


 		ZSET(ZRd,Src020-1 ) 	; read memory from Src010

 		BREAK(1)
 		jsr 	ParseIn 	;parse from input (memory)
 		BREAK(2)

 		PR_WR_IO()
 		HEX_DUMP(TOKBUF) 	; dump 8
 		jsr 	HexDump 	; dump next 8

 		HEX_DUMP(LNNUM) 	; dump Int(LNNUM),Int(NXTLN),Short(TOKNO)

; 		;-- input a line of text until RETURN
; 		jsr 	InputIOEcho
; 		jsr 	PrNL
; 		jsr 	Parse 		; parse line into TOKBUF

 		PR_WR_IO()
 		PRINTLN("--") 		;
 		jsr 	PrNL
 		;--
 		nop

 		jsr 	List
 		jsr 	PrNL

; 		;-- check the LineNo size
; 		ZSET(ZRd,TOKBUF-1) 	; read memory from TOKBUF
; 		PR_RD_MEM() 		; read from memory (ZRd)
; 		;--
; 		PR_WR_IO() 		; write to IO (screen)
; 		;--
; 		jsr 	ChrRd 		; TOK[LineNo]
; 		jsr 	X_LineNo 	; 'execute' set LNNUM and NXTLN address
; 		;--
 		GETAX(LNNUM)
 		jsr 	PrAXHex 	; line no as hex
 		lda 	#' '
 		jsr 	PrCh 		; space

 		GETAX(NXTLN)
 		jsr 	PrAXHex 	; address as hex
 		jsr 	PrNL

 		;-- .export LNNUM,NXTLN


 		brk

#include "Tables.a65"
#include "Tok.a65"
ROMEND 		= $

.echo $-_ROM
.echo " Total Bytes used\n"


#include "IrqNmi.a65"


;----------------------------------------------- hardware vectors
; FFFA,B	NMI
; FFFC,D	Reset
; FFFE,F	IRQ
.org $FFFA
.dw Nmi 				; FFFA,B=> NMI		Points to Non-Maskable Interrupt handler
.dw Reset 				; FFFC,D=> NRET	Points to Reset address (cold start)
.dw Irq 				; FFFE,F=> IRQ		Points to Interrupt handler

.echo ($FFFA - ROMEND) / 256
.echo "/16 pages (x256) available in the 4k ROM. F000-FFFF\r"
 		;-- .echo "/32 pages (x256) available in the 4k ROM. E000-FFFF\r"



.end
