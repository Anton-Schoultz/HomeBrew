#ifdef hide
.NOLIST
#endif
#if (($/256)>=PG_ROM) & (($/256)<PG_KEY)
;=================================================================== LET ==============
;*  X_Let                LET <var> = <expr>
;*  X_LetEQ              Get variable index into .A and check for '='
;*
_Let 		= $

; for now, simple vars are stored in VARNUM (fixed in memory)
 		;--

;----------------------------------------------- X_Let
X_Let: ; LET <var> = <expr>
 		jsr 	ChrRd 		; consume LET

X_LetDo 	CASE(T_NumVar,X_LetNum)
 		CASE(T_StrVar,X_LetStr)
 		ERROR(ERR_VAR) 		; "Expected Variable"

;----------------------------------------------- X_LetNum
X_LetNum 	;- assign integer variable (not-ary)
 		jsr 	X_LetEQ 	; get index, skip '='
 		pha 			; save index
 		jsr 	EvNumeric 	; evaluate expression, result in NUM_A
 		pla 			; recall index
 		sta 	VARID 		; save the Var index
 		jsr 	NumSet 		; fetch & store
 		RTN_T() 		; done

;----------------------------------------------- X_LetStr
X_LetStr 	;- assign string variable (not-ary)
 		jsr 	X_LetEQ 	; get index, skip '='
 		pha 			; save index
 		jsr 	EvString	; evaluate expression
 		pla 			; recall index
 		sta 	VARID 		; save the Var index
 		; .A = var index
 		; ZPtr -> temp result (to be coppied up to var space)
 		jsr 	StrSet 		; fetch & store
 		RTN_T() 		; done

;----------------------------------------------- X_LetEQ
X_LetEQ: ; Get variable index into .A and check for '='
 		jsr 	ChrRd 		; get first char of variable name
 		bpl 	X_LetBadVar 	; long var name
 		;-- short name, character is used as index
 		and 	#$1F
 		pha 			; push the index
 		jsr 	ChrRd 		; move to after the var name (should be '=')
 		lda 	#T_EQ 		; '=' TOKEN
 		jsr 	Match 		; check for and skip over '='
 		;-- init string eval
 		jsr	StrInit
 		pla
 		rts

X_LetBadVar 	ERROR(ERR_BADVAR)



.echo "  _LET\t\t"
.echo $-_Let
.echo "\n"
.nolist
#endif

;----------------------------------------------- keyword
#if ($/256) = PG_KEY
.list
W_Let 		.DB 	"LE",'T'+$80
.nolist
#endif
;----------------------------------------------- run
#if ($/256) = PG_RUN
.list
T_Let 		= LOW($)+$80
.DW 	X_Let
.nolist
 		;-- .export T_Let
#endif
.list 					; end of LET
