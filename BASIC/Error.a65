#ifdef hide 					; Error
.NOLIST
#endif

#if (($/256)>=PG_ROM) & (($/256)<PG_KEY)

#define ERROR(n) ldx #n\ jmp Error


;=================================================================== ERROR ============
; NOTE: Message nos go up in 2s
;
;*  ErrList              List offending line (if available)
;*  Error                Hanlde error[X] resetting to warm start
;*  Msg                  Display Message (ZPtr)[X] A @/! Y #/& Char/hex *CallAddr
;*  MsgChr               print char in .A if it is ascii, otherwise a '?'
;*  RegLoad              Load registers from ZReg~
;*  RegSave              Save registers into ZReg~
;*
_Err 		= $

; NOTE: Message nos go up in 2s
#define ERR_OK 		0
#define ERR_EXPECTED 	2
#define ERR_CONST 	4
#define ERR_GOSUB 	6
#define ERR_FOR 	8
#define ERR_VAR 	10
#define ERR_BADVAR 	12
#define ERR_DIV0 	14
#define ERR_REDIM 	16
#define ERR_MEMORY 	18
#define ERR_TOKEN 	20
#define ERR_SYNTAX 	22
#define ERR_RANGE 	24
#define ERR_UNDEFSTR 	26
#define ERR_BUFFER 	28

#define DOT '.'+$80

; .A @ Expected character/byte
; .Y # The character/byte that was encountered
; .X   The error number (in steps of 2)

ErrTbl
.DB "OK",DOT 					; 0=ERR_OK
.DB "Expected @ but got #",DOT 			; 2=ERR_EXPECTED
.DB "Expected constant",DOT 			; 4=ERR_CONST
.DB "GOSUB/RETURN",DOT 				; 6=ERR_GOSUB
.DB "FOR/NEXT",DOT 				; 8=ERR_FOR
.DB "Expected variable",DOT 			;10=ERR_VAR
.DB "Invalid variable @",DOT 			;12=ERR_BADVAR
.DB "Divide by zero",DOT 			;14=ERR_DIV0
.DB "Redimension",DOT 				;16=ERR_REDIM
.DB "Out of memory",DOT 			;18=ERR_MEMORY
.DB "Invalid token @",DOT 			;20=ERR_TOKEN
.DB "Syntax",DOT 				;22=ERR_SYNTAX
.DB "Out of Range",DOT 				;24=ERR_RANGE
.DB "Undefined string",DOT 			;26=ERR_UNDEFSTR
.DB "Buffer",DOT 				;28=ERR_BUFFER
.DB 0


;------------------------------------------------------- X_Err
Error: ; Hanlde error[X] resetting to warm start
 		pha

 		phx
 		phy
		;-- list the offending line if available
 		jsr 	ErrList
 		jsr 	PrNL
 		ply
 		plx
 		;-- check for 0=OK
 		beq	Error1			; 0=OK, so no error number
 		txa
 		lsr	a			; /2
 		jsr	PrADec2			; print error number
 		lda	#':'
 		jsr	ChrOut			; print ':'
		;-- print the erroe message
Error1 		ZSET(ZPtr,ErrTbl) 		; point to the keyword table
 		pla
 		;-- Display Message (ZPtr)[X] A:@/! Y:#/% Char/hex
 		jsr 	Msg
 		jsr 	PrNL

ErrorX 		jmp 	Main

ErrList: ; List offending line (if available)
 		;-- check if command line
 		lda 	LN_NUM
 		ora 	LN_NUM+1
 		bne 	ErrList1
 		rts
 		;-- from program, so set up the offending line
ErrList1 	clc
 		lda 	#3
 		adc 	LN_ADR
 		sta 	ZRd
 		lda 	#0
 		adc 	LN_ADR+1
 		sta 	ZRd+1
 		;-- and list it
 		jmp 	ListLn

; == Special characters == DO NOT USE $ as it is part of String Keywords
; @	A as character followed by hex value
; #	Y as character followed by hex value

;------------------------------------------------------- RegLoad
RegLoad: ; Load registers from ZReg~
 		lda 	ZRegP
 		pha
 		lda 	ZRegA 			; load .A
 		ldy 	ZRegY 			; load .Y
 		ldx 	ZRegX 			; load .X
 		plp
 		rts

;------------------------------------------------------- RegSave
RegSave: ; Save registers into ZReg~
 		sta 	ZRegA 			; save .A
 		sty 	ZRegY 			; save .Y
 		stx 	ZRegX 			; save .X
 		;-- status register
 		php
 		pla
 		sta 	ZRegP
 		rts

#define ZTokPtr ZPtr
;------------------------------------------------------- Msg
Msg: ;  Display Message (ZPtr)[X] A @/! Y #/& Char/hex *CallAddr
 		jsr 	RegSave 		; save regs
 		ldy 	#0 			; in case X=0
 		txa
 		and 	#$7F
 		lsr 	a 			; A = TokNo / 2
 		tax 				; index in table
 		beq 	MsgL0 			; token 80 is special ;P
 		ldy 	#$FF
 		;--
 		;-- move to next word
MsgNxtL 	iny
 		lda 	(ZTokPtr),y
 		beq 	MsgInvalid 		; end of list, not found
 		bpl 	MsgNxtL
 		;-- got the marker
 		dex
 		bne 	MsgNxtL
MsgL 		;-- found the start of the word
 		iny 				; skip over the last end-of-word marker
MsgL0 		;-- output the word
 		lda 	(ZTokPtr),y
 		beq 	MsgX 			; end of list -> done
 		bmi 	MsgLX 			; last char
 		BR_AEQ('@',MsgAC) 		; ZRegA as character
 		BR_AEQ('#',MsgYC) 		; ZRegY as character
 		jsr 	ChrOut 			; echo
 		bra 	MsgL 			; loop next char
MsgLX 		;-- last character of the word (marked one)
 		and 	#$7F 			; mask off bit7
 		jsr 	ChrOut 			; output it and return
 		jsr 	IsAlpha
 		BR_F(MsgX) 			; ends in alpha?
 		lda 	#' ' 			; yes, pad a blank
 		jsr 	ChrOut
MsgX 		RTN_T() 			; otherwise done
MsgInvalid 	RTN_F() 			; return false (not found)

MsgAC 		lda 	ZRegA 			; .A as c$xx
 		bra 	MsgChr
MsgYC 		lda 	ZRegY 			; .Y as c$xx

MsgChr: ; print char in .A if it is ascii, otherwise the hex value
 		cmp 	#$7E
 		bpl 	MsgChrNo
 		cmp 	#$21
 		bmi 	MsgChrNo
MsgChrOk 	jsr 	ChrOut
		bra	MsgL
MsgChrNo	pha
		lda 	#'$'
 		jsr 	ChrOut
 		pla				; recall value
 		jsr 	PrAHex
 		bra 	MsgL

#if _LEVEL >= _DETAIL
.echo "  _Error\t"
.echo $-_Err
.echo "\n"
#endif

.list
#endif
