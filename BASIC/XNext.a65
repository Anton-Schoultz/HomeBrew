#ifdef hide
.NOLIST
#endif
#if (($/256)>=PG_ROM) & (($/256)<PG_KEY)
;=================================================================== NEXT ==============
;*  X_Next               NEXT {Var}~End of FOR/NEXT loop
;*
_Next 		= $
;----------------------------------------------- For/Next
; FOR values are stored immediately after the A-Z, so access with index 27,28
; #define FOR_STP_X 27
; #define FOR_LIM_X 28
; FOR_DATA 	;-- DATA
; Var(FOR_STP,NUMPKSZ) ; [27] Step size
; Var(FOR_LIM,NUMPKSZ) ; [28] Limit
; Int(FOR_ADR) 	; Address of loop line (after the FOR line)
; Short(FOR_NDX) 	; Loop variable number (1-26)
;  		;-- STACK	FOR nesting depth FORDEEP=8 (CBM has 9)
; Var(FORSTK,8*FORDEEP)

;----------------------------------------------- X_Next
X_Next: ; NEXT {Var}~End of FOR/NEXT loop
 		jsr 	ChrRd 		; consume token
 		;-- loop var
 		BR_AEQ(T_NumVar,X_Next1)
X_NextErr 	ERROR(ERR_VAR) 		; "Expected Variable"

X_Next1 	jsr 	ChrRd 		; get first char of variable name
 		bpl 	X_NextErr 	; long var name -> Expected Variable
 		and 	#$1F 		; get var index
 		sta 	VARID 		; save it
 		;-- check that it matches
 		cmp 	FOR_NDX
 		beq 	X_Next2
 		ERROR(ERR_FOR) 		; 'FOR/NEXT error'

X_Next2 	; Retrieve step from VARNUM and unpack to internal form
 		lda 	#FOR_STP_X
 		jsr 	NumGet 		; returns sign in A
 		sta 	NUM_SGN 	; save sign of step (up/down)
 		jsr 	NumPushA
 		;-- get loop var value
 		lda 	VARID
 		jsr 	NumGet
 		;-- add the step
 		jsr 	NumPopB
 		jsr 	NumAdd
 		;-- save value in loop var
 		lda 	VARID
 		jsr 	NumSet
 		;-- test the limit
 		lda 	#FOR_LIM_X
 		jsr 	NumGet 		; RCL limit
 		jsr 	NumPushA 	; ^
 		lda 	VARID
 		jsr 	NumGet 		; RCL var
 		jsr 	NumPopB
 		jsr 	NumSub 		; Limit-Value
 		jsr 	NumFlag 	; check < = >
 		beq 	X_NextLoop 	; if equal then last iteration
 		;-- account for direction
 		eor 	NUM_SGN
 		and 	#4 		; 4< 2= 1>
 		bne 	X_NextLoop
 		;-- loop is done so pop
 		jmp 	ForPop

X_NextLoop 	; loop by going back to the loop line
 		lda 	FOR_ADR
 		sta 	LN_NXT
 		lda 	FOR_ADR+1
 		sta 	LN_NXT+1
 		rts

;  NUM_FLG ; Comparisson flags 4:< 2:= 1:>

#if _LEVEL >= _KEYWORDS
.echo "  _NEXT\t\t"
.echo $-_Next
.echo "\n"
#endif

.nolist
#endif

;----------------------------------------------- keyword
#if ($/256) = PG_KEY
.list
W_Next 		.DB 	"NEX",'T'+$80
.nolist
#endif
;----------------------------------------------- run
#if ($/256) = PG_RUN
.list
T_NEXT 		= LOW($)+$80
.DW 	X_Next
.nolist
#endif

.list 					; end of Next
