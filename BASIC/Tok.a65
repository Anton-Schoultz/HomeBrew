;=================================================================== TOK ============== 
;*  BasTop              Setup to read from start of basic
;*  ChkList             List of characters used by IsOneOf
;*  Digit               List of digits 0..9
;*  FetchNum            fetch number from the code -> NUMBER
;*  IsDigit             returns T/F if CHRGOT is a digit 0..9
;*  IsRelOp             returns T/F if CHRGOT is a relational opperator <>=!
;*  L_LineNo            list LineNo
;*  L_Number            list number
;*  L_String            list out string text
;*  List                List from start of program
;*  ListLn              List line pointed to by ZRd
;*  NextLine            point ZRd to the next line NXTLN
;*  OneOf               see if CHRGOT is one of char in ChkList starting at X
;*  P_IsToken           Parse for a token TOKNO, returns found T/F
;*  P_LineNo            Parse line numebr and place int TOKBUF
;*  P_Number            parse a number into token & value
;*  P_String            parse quoted string into token
;*  Parse               Parse INBUF into TOKBUF
;*  RelOp               Relational opperators
;*  Run                 Run from start
;*  RunJmp              run via jump table
;*  RunLn               Run line pointed to by ZRd
;*  RunTok              run token
;*  SkipBlank           Skip over leading blank/tabs,  ERR if null
;*  TokEnd              place end of line
;*  TokExpand           Expand the token to key word (X is index)
;*  TokFind             try to find a matching token
;*  X_LineNo            Get LNNUM & Set up NXTLN
;*
#ifdef hide
.NOLIST
#endif

PARAGRAPH()
_Tok 		= $

;----------------------------------------------- ChkList 
ChkList: ; List of characters used by IsOneOf
RelOp: ; Relational opperators
.DB 	"<>=!", 0
Digit: ; List of digits 0..9
.DB 	"0123456789",0

#define T_LineNo $FF
#define T_Number $FE
#define T_String $FD


;----------------------------------------------- Parse 
Parse: ;Parse INBUF into TOKBUF
 		;-- read from memory INBUF
 		ZSET(ZRd,INBUF-1) 	; read memory from INBUF
 		PR_RD_MEM() 		; read from memory (ZRd)
 		PR_ECHO_OFF() 		; don't echo it
 		;-- write to TOKBUF
 		ZSET(ZWr,TOKBUF) 	; point to TOKBUF
 		PR_WR_MEM() 		; write to memory

 		;-- prime pump -> CHRGOT
 		jsr 	RdCh

 		;-- line number ?
 		jsr 	SkipBlank 	; skipover leading blank/tabs
 		jsr 	IsDigit
 		BR_F(P_Stmnt) 		; not a digit -> Statement?
 		;-- digit - so do line number
 		jsr 	P_LineNo
 		;-- fall through for the rest of the statement

P_Stmnt 	;-- return if end of line NULL
 		jsr 	RdCh
 		bne 	P_KeyWord
 		;-- end of input line
 		lda 	#0 		; end-of-line marker
 		jsr 	ChrWr
 		;-- check for T_LnNo
 		lda 	TOKBUF
 		BR_ANE(T_LineNo,P_StmntX)
 		;-- line no, so get line length
 		sec
 		lda 	ZWr
 		sbc 	#LOW(TOKBUF+2)
 		;-- fill it in
 		sta 	TOKBUF+3
 		;-- 
P_StmntX 	lda 	#0
 		jsr 	ChrWr 		; extras null (end-of-program)
 		rts

 		;-- check for keyword
P_KeyWord 	jsr 	P_IsToken 	; check if a keyword
 		BR_F(PNotKey) 		; no -> PNotKey
 		;-- have a token in A, place it and continue
 		jsr 	ChrWr
 		bra 	P_Stmnt 	; loop for more

PNotKey 	;-- not a keyword, see if we have a number
 		jsr 	IsDigit 	; check if CHRGOT is a digit
 		BR_F(PNotDigit)
 		;-- digit, so collect as number
 		jsr 	P_Number 	; parse number and tokenise it
 		bra 	P_Stmnt 	; loop for more

PNotDigit 	; not number, is it a quoted string?
 		lda 	CHRGOT
 		BR_ANE('"',PNotStr) 	; A<>" -> PNotStr
 		;-- do parse for [Str] xxxxxx 00
 		jsr 	P_String
 		bra 	P_Stmnt 	; more

PNotStr 	; not string, if alpha then varname
 		;-- PR_WR_IO()
 		;-- PRINTLN("SYNTAX ERROR")

PNotVar 	; not varname, so copy as-is
 		lda 	CHRGOT
 		jsr 	ChrWr
 		bra 	P_Stmnt

;----------------------------------------------- BasTop 
BasTop: ; Setup to read from start of basic
; for now, just TOKBUF
 		;-- set ZRd to point to first line of Program
 		ZSET(ZRd,TOKBUF-1)
 		;-- set to read from memory
 		PR_RD_MEM() 		; read from memory (code space)
 		;-- list to output device IO
 		PR_WR_IO()
 		rts

;----------------------------------------------- Run 
Run: ; Run from start
 		jsr 	BasTop
RunL 		jsr 	RdCh 		; (++ZRd)->A
 		beq 	RunX 		; null = End-of-program
 		jsr 	RunLnX
 		bra 	RunL
RunX 		rts 			; done, return


RunLn: ; Run line pointed to by ZRd
 		jsr 	RdCh 		; (++ZRd)->A
 		bne 	RunLnX 		; null = End-of-line
 		rts 			; done, return
RunLnX 		jsr 	RunTok
 		bra 	RunLn
RunTok: ; run token
 		lda 	CHRGOT
 		CASE(T_LineNo,X_LineNo)
 		;-- otherwise token?
 		tax
 		BR_AGE($80,RunJmp)
 		;-- not token, treat as ASCII
 		jsr 	PrCh
 		rts
RunJmp: ; run via jump table
 		jmp 	(TblRun,X)



;----------------------------------------------- List Scrn 
List: ; List from start of program
 		jsr 	BasTop
 		;-- fall through to list line(s)

;----------------------------------------------- ListLn 
ListLn: ; List line pointed to by ZRd
 		jsr 	RdCh 		; (++ZRd)->A
 		beq 	ListLnX 	; null = done
 		;-- expand as needed
 		jsr 	ListTok
 		bra 	ListLn

ListLnX 	rts

ListTok 	; detokenise
 		lda 	CHRGOT
 		CASE(T_Number,L_Number)
 		CASE(T_String,L_String)
 		CASE(T_LineNo,L_LineNo)
 		;-- otherwise token?
 		tax
 		BR_AGE($80,TokExpand)
 		;-- not token, treat as ASCII
 		jsr 	PrCh
 		rts

;----------------------------------------------- NextLine 
NextLine: ; point ZRd to the next line NXTLN
 		;-- point ZRd to the start of the lilne
 		lda 	NXTLN
 		sta 	ZRd
 		lda 	NXTLN+1
 		sta 	ZRd+1
 		rts

;----------------------------------------------- TokEnd 
TokEnd: ; place end of line
 		;-- check if there was line no,
 		;-- if so, go fill in the length
 		lda 	TOKBUF
 		cmp 	#T_LineNo
 		bne 	TokEndX
 		;-- calc length (-1) & save it
 		lda 	ZWr
 		clc
 		sbc 	#LOW(TOKBUF+2)
 		sta 	TOKBUF+3
 		;-- 
TokEndX 	lda 	#0
 		jsr 	ChrWr
 		jsr 	ChrWr
 		rts

;----------------------------------------------- SkipBlank 
; returns with ending chr in A, (C=1 if A==null)
SkipBlankL 	; read next
 		jsr 	RdCh 		; get from io or mem
SkipBlank: ; Skip over leading blank/tabs,  ERR if null
 		;-- null -> exit flase
 		lda 	CHRGOT
 		beq 	SkipBlankF
 		;-- blank
 		BR_AEQ(' ',SkipBlankL) 	; Space -> Loop
 		BR_AEQ(HT,SkipBlankL) 	; TAB   -> loop
 		;-- ok
SkipBlankT 	RTN_T()
SkipBlankF 	RTN_F()

;----------------------------------------------- IsRelOp 
IsRelOp: ; returns T/F if CHRGOT is a relational opperator <>=!
 		ldx 	#(RelOp-ChkList)
 		jmp 	OneOf

;----------------------------------------------- IsDigit 
IsDigit: ; returns T/F if CHRGOT is a digit 0..9
 		ldx 	#(Digit-ChkList)
 		jmp 	OneOf

;----------------------------------------------- OneOf 
OneOf: ; see if CHRGOT is one of char in ChkList starting at X
 		lda 	ChkList,X
 		beq 	OneOfNo
 		cmp 	CHRGOT
 		beq 	OneOfYes
 		inx
 		bne 	OneOf
OneOfNo 	lda 	CHRGOT
 		RTN_F() 		; NOPE, set carry & exit
OneOfYes 	lda 	CHRGOT
 		RTN_T() 		; YES, clear carry & exit

;----------------------------------------------- TokExpand 
TokExpand: ; Expand the token to key word (X is index)
 		ldy 	#0
 		txa
 		and 	#$7F
 		sta 	TOKNO
 		clc
 		ror 	a 		; A = TokNo / 2
 		tax 			; index in table
 		cpx 	#0
 		beq 	TokExpL0 	; token 80 is special ;P
 		dey

 		;-- 
TokExpNxt 	cpx 	#0 		; no more
 		beq 	TokExpX
 		;-- move to next word
TokExpNxtL 	iny
 		lda 	TblKeyword,y
 		beq 	TokExpXX 	; end of list, not found
 		bpl 	TokExpNxtL
 		;-- got the marker
 		dex
 		bne 	TokExpNxtL
TokExpL 	; found the start of the word
 		iny
TokExpL0 	lda 	TblKeyword,y
 		beq 	TokExpX 	; end of list -> done
 		bmi 	TokExpLX 	; last char
 		jsr 	PrCh 		; echo
 		bra 	TokExpL 	; loop next char

TokExpLX 	and 	#$7F 		; mask off bit7
 		jsr 	PrCh 		; output it
 		;-- auto space
 		;-- BR_ALT('A',TokExpX) 	; last char was not A-Z -> done
 		;-- LDA 	#' '
 		;-- JSR 	PrCh 		; space and return
 		rts

TokExpXX 	; not found
 		lda 	TOKNO
 		jsr 	PrAHex
 		;-- 
TokExpX 	rts

;----------------------------------------------- P_IsToken 
P_IsToken: ; Parse for a token TOKNO, returns found T/F
 		;-- JSR 	SkipBlank
 		;-- fall through to TokFind
;----------------------------------------------- TokFind 
; TblKeyword	has list of keywords, ending char has $80
; ZRd		points to input, 1st char to try and match Y=0..
; TOKNO		Counts up token number while we search
TokFind: ;try to find a matching token
 		;-- sart with first token no
 		lda 	#0
 		sta 	TOKNO
 		;-- start index in keyword list
 		ldx 	#$FF
TokWord 	;- test next word
 		ldy 	#0
 		inx
TokWordL 	;-- test a character of the word
 		lda 	TblKeyword,X
 		beq 	TokFail 	; end of Token list
 		bmi 	TokLast 	; bit7=1 marks end
 		;-- 
 		cmp 	(ZRd),Y 	; source char
 		bne 	TokNxt
 		;-- next char
 		iny
 		inx
 		bra 	TokWordL
TokLast 	; last character fo keyword
 		and 	#$7F
 		cmp 	(ZRd),Y
 		beq 	TokFound 	; match so we got it!
 		;-- no match, so next word
TokNxt 		; no match
 		inc 	TOKNO
TokNxtL 	lda 	TblKeyword,X
 		beq 	TokFail
 		bmi 	TokWord
 		inx
 		bra 	TokNxtL
TokFail 	;-- not found, return with CY=1
 		RTN_F()
TokFound 	;-- found !
 		clc 			; move ZRd to after the keyword
 		tya
 		adc 	ZRd
 		sta 	ZRd
 		bcc 	TokRtn
 		inc 	ZRd+1
 		;-- get token number from the counter
TokRtn 		lda 	TOKNO
 		asl 	A 		; token nos incr in 2s
 		ora 	#$80 		; and have high bit set
 		;-- return Found=True, A=token
 		RTN_T()

;=================================================================== NUMBER =========== 

;----------------------------------------------- P_Number 
P_Number: ; parse a number into token & value
; for now were only doing 16bit int numbers
 		;-- Write Number token
 		lda 	#T_Number
 		jsr 	ChrWr
 		;-- Parse number value
 		jsr 	RdNum
 		;-- write number value
 		lda 	NUMBER
 		jsr 	ChrWr
 		lda 	NUMBER+1
 		jsr 	ChrWr
 		;-- 
 		rts
;----------------------------------------------- L_Number 
L_Number: ; list number
 		;-- get number from code -> NUMBER
 		jsr 	FetchNum
 		;-- convert & output number
 		jsr 	PrNum
 		lda 	#' '
 		jsr 	PrCh
 		;-- 
 		rts
;----------------------------------------------- FetchNum 
FetchNum: ; fetch number from the code -> NUMBER
 		jsr 	ChrRd
 		sta 	NUMBER
 		jsr 	ChrRd
 		sta 	NUMBER+1
 		lda 	#0
 		sta 	NUMBER+2
 		rts

;=================================================================== STRING =========== 

;----------------------------------------------- P_String 
P_String: ; parse quoted string into token
 		;-- Write Number token
 		lda 	#T_String
 		jsr 	ChrWr
 		;-- Copy until the closing quote
P_StrL 		jsr 	ChrRd
 		beq 	P_StrX 		; null -> done
 		BR_AEQ('"',P_StrX) 	; quote -> done
 		jsr 	ChrWr 		; copy to TOKBUF
 		bra 	P_StrL 		; loop back for more
P_StrX 		lda 	#0
 		jsr 	ChrWr 		; place temrinating null and return
 		rts

;----------------------------------------------- L_String 
L_String: ; list out string text
 		lda 	#'"'
 		jsr 	PrCh
 		jsr 	ChrCopy
 		lda 	#'"'
 		jsr 	PrCh
 		rts

;=================================================================== LINE_NO ========== 

;----------------------------------------------- P_LineNo 
P_LineNo: ; Parse line numebr and place int TOKBUF
 		;-- Write LineNo token
 		lda 	#T_LineNo
 		jsr 	ChrWr
 		;-- Parse number value
 		jsr 	RdNum
 		;-- write line number
 		lda 	NUMBER
 		jsr 	ChrWr
 		lda 	NUMBER+1
 		jsr 	ChrWr
 		;-- place holder for the length
 		lda 	#$AA
 		jsr 	ChrWr
 		rts

;----------------------------------------------- X_LineNo 
X_LineNo: ; Get LNNUM & Set up NXTLN
 		;-- save line no
 		jsr 	ChrRd
 		sta 	LNNUM
 		jsr 	ChrRd
 		sta 	LNNUM+1
 		;-- get length
 		jsr 	ChrRd
 		;-- Now ZRd points to the first char of the line [4]
 		clc
 		adc 	ZRd
 		sta 	NXTLN
 		lda 	#0
 		adc 	ZRd+1
 		sta 	NXTLN+1
 		;-- 
 		rts

;----------------------------------------------- L_LineNo 
L_LineNo: ; list LineNo
; ChrRd will get first byte afer the token
 		jsr 	X_LineNo 	; Get LNNUM & Set up NXTLN
 		;-- output line no
 		lda 	LNNUM
 		sta 	NUMBER
 		lda 	LNNUM+1
 		sta 	NUMBER+1
 		lda 	#0
 		sta 	NUMBER+2 	; U=0
 		;-- 
 		jsr 	PrNum
 		lda 	#' '
 		jsr 	PrCh
 		;-- jump to continue listing
 		rts


.export TokFind,TOKNO,TokFound,Parse

.export TblKeyword,TblRun


.echo $-_Tok
.echo " Bytes in _Tok\n"

