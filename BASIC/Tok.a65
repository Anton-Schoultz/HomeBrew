;=================================================================== TOK ==============
;*  BasTop               Setup to read from start of basic, for now TOKBUF
;*  IsAlpha              returns T/F if .A is a Alpha A-Z
;*  IsAlphaNumeric       returns true if .A is 0-9,A-Z
;*  IsDigit              returns T/F if .A is a digit 0..9
;*  IsNumValue           return T if token is a numeric value
;*  IsRelOpChr           returns T/F if CHRGOT is a relational opperator <>=
;*  IsStrValue           return T if token is a string value
;*  L_LineNo             List LineNo
;*  L_Number             List number
;*  L_String             list out string text
;*  List                 List from start of program
;*  ListLn               List line pointed to by ZRd
;*  NextLine             point ZRd to the next line LN_NXT
;*  P_IsToken            Parse for a token, returns TOKNO or CHRGOT, returns found T/F
;*  P_LineNo             Parse line number and place int TOKBUF
;*  P_Number             Parse a number into token & value
;*  P_String             Parse quoted string into token
;*  Parse                Parse INBUF into TOKBUF
;*  ParseIn              Parse from memory into TOKBUF
;*  Run                  Run from start
;*  RunLn                Run [LineNo] Stmnt.... 00
;*  SkipBlank            Skip blank/tabs, end char in A, T if not null
;*  TokErr               display invalid token as [xx]
;*  TokExpand            Expand the token .X to key word
;*  TokFind              try to find a matching token
;*  X_LineNext           Move to the start of the next line LN_NXT->ZRd
;*  X_LineNo             Get LN_NUM & Set up LN_NXT
;*m Short(NUM_FLG)       ; flags 4:<0 2:=0 1:>0   3:GE 5:NE ect
;*
#ifdef hide
.NOLIST
#endif

_Tok 		= $

; Short(NUM_FLG) 	; flags 4:<0 2:=0 1:>0   3:GE 5:NE ect
#define NUMFLGLT()	SMB2 NUM_FLG
#define NUMFLGEQ()	SMB1 NUM_FLG
#define NUMFLGGT()	SMB0 NUM_FLG


BAS_EOL 	= $00 			; end of line
BAS_PRG 	= $00 			; end of program

#define TOKLEN TOKBUF+3


;----------------------------------------------- Parse
Parse: ;Parse INBUF into TOKBUF
; length is placed into ZCnt
; Line no is placed into LN_FIND
 		;-- read from memory INBUF
 		ZSET(ZRd,INBUF-1) 	; read memory from INBUF
;----------------------------------------------- ParseIn
ParseIn: ;Parse from memory into TOKBUF
 		PR_RD_MEM() 		; read from memory (ZRd)
 		PR_ECHO_OFF() 		; don't echo it
 		;-- write to TOKBUF
 		ZSET(ZWr,TOKBUF) 	; point to TOKBUF
 		PR_WR_MEM() 		; write to memory
 		jsr 	ParseClr 	; clear TOKBUF
 		;-- prime pump -> CHRGOT
 		jsr 	GetChr

 		;-- line number ?
 		jsr 	SkipBlank 	; skipover leading blank/tabs
 		jsr 	IsDigit
 		BR_F(P_Stmnt) 		; not a digit -> Statement?
 		;-- digit - so do line number
 		jsr 	P_LineNo
 		lda 	CHRGOT

 		;-- fall through to do parts
P_Stmnt 	jsr 	P_Part 		; parse parts until end of line
 		;-- end of input line
 		lda 	#BAS_EOL 	; end-of-line marker
 		jsr 	ChrWr

 		;-- check for T_LineNo, fill in length if needed
 		lda 	TOKBUF
 		BR_ANE(T_LineNo,P_StmntX)
 		sec
 		lda 	ZWr
 		sbc 	#LOW(TOKBUF+3)
 		sta 	TOKLEN
 		;--
 		sec
 		lda 	ZWr
 		sbc 	#LOW(TOKBUF)
 		sta 	LN_LEN
 		ZZERO(LN_LEN+1)		; clear high byte

P_StmntX 	;- work out total length for editor -> ZCnt
 		sec
 		lda 	ZWr
 		sbc 	#LOW(TOKBUF)
 		sta 	ZCnt
 		lda 	ZWr+1
 		sbc 	#HIGH(TOKBUF)
 		sta 	ZCnt+1
 		;-- copy line no to LN_FIND for editor to seek
 		lda 	TOKBUF+1 	; lo line no
 		sta 	LN_FIND
 		lda 	TOKBUF+2 	; hi line no
 		sta 	LN_FIND+1
 		;-- done with the whole line
 		rts

;----------------------------------------------- P_Part , P_PartNxt
P_PartNxt 	;- advance and do part
 		jsr 	GetChr
P_Part 		;- parse a part of the line
 		jsr 	SkipBlank 	; skipover leading blank/tabs
 		BR_T(P_KeyWord) 	; Not-null -> P_KeyWord
 		rts 			; null end
P_KeyWord 	;-- check for keyword
 		jsr 	P_IsToken 	; check if a keyword
 		BR_F(PNotKey) 		; no -> PNotKey, A=CHRGOT
 		;-- have a token in A, place it and continue
 		jsr 	ChrWr
 		bra 	P_PartNxt 	; loop for more
PNotKey 	;-- see if we have a number
 		jsr 	IsDigit 	; check if CHRGOT is a digit
 		BR_F(PNotDigit)
 		;-- digit, so collect as number
 		jsr 	P_Number 	; parse number and tokenise it
 		bra 	P_Part 		; loop for more
PNotDigit 	;- is it a quoted string?
 		lda 	CHRGOT
 		BR_ANE('"',PNotStr) 	; A<>" -> PNotStr
 		;-- do parse for [Str] xxxxxx 00
 		jsr 	P_String
 		bra 	P_PartNxt 	; more
PNotStr 	; not string, try varname
 		jsr 	IsAlpha
 		BR_F(PNotVar)
 		jsr 	VarParse
 		bra 	P_Part 		; more

PNotVar 	; not varname, rel op?
 		BR_AEQ('<',PLT)
 		BR_AEQ('>',PGT)
 		BR_AEQ('=',PEQ)

 		;-- otherwise as-is
PAsIs 		lda 	CHRGOT
POut 		jsr 	ChrWr
 		bra 	P_PartNxt
; relational opperator
PLT 		; check for <= <> <
 		jsr 	GetChr
 		BR_AEQ('=',PLE)
 		BR_AEQ('>',PNE)
 		lda 	#T_LT
 		bra 	PROP
PLE 		lda 	#T_LE
 		bra 	POut
PNE 		lda 	#T_NE
 		bra 	POut
PGT 		; check for >= >
 		jsr 	GetChr
 		BR_AEQ('=',PGE)
 		lda 	#T_GT
 		bra 	PROP
PGE 		lda 	#T_GE
 		bra 	POut
 		;-- equal
PEQ 		lda 	#T_EQ
 		bra 	POut
PROP 		jsr 	ChrWr
 		bra 	P_Part

;----------------------------------------------- ParseClr
; clear the tokbuf (not realy required, but makes debugging easier)
ParseClr 	lda 	#$EE
 		ldy 	#0
ParseClrL 	sta 	TOKBUF,y
 		iny
 		cpy 	#BUFSZ
 		bne 	ParseClrL
 		rts

;	;----------------------------------------------- BasTop
;	BasTop: ; Setup to read from start of basic, for now TOKBUF
;	; for now, just TOKBUF
;	 		;-- set ZRd to point to first line of Program
;	 		ZSET(ZRd,TOKBUF-1) 	; jsr	EditTop
;	 		;-- set to read from memory
;	 		PR_RD_MEM() 		; read from memory (code space)
;	 		;-- list to output device IO
;	 		PR_WR_IO()
;	 		rts
;----------------------------------------------- SkipBlankL
; reads next character nad then checks for balnks
SkipBlankL 	; read next
 		jsr 	GetChr 		; get from io or mem
;----------------------------------------------- SkipBlank
; returns with ending chr in A, (C=1 if A==null)
SkipBlank: ; Skip blank/tabs, end char in A, T if not null
 		;-- null -> exit flase
 		lda 	CHRGOT
 		beq 	RtnFalse
 		;-- blank
 		BR_AEQ(SPC,SkipBlankL) 	; Space -> Loop
 		BR_AEQ(HT,SkipBlankL) 	; TAB   -> loop
 		;-- ok
RtnTrue 	RTN_T()
RtnFalse 	RTN_F()

;----------------------------------------------- IsNumValue
IsNumValue: ; return T if token is a numeric value
 		BR_AEQ(T_NumLit,RtnTrue)
 		BR_AEQ(T_NumVar,RtnTrue)
 		BR_AEQ(T_NumAry,RtnTrue)
 		RTN_F()

;----------------------------------------------- IsStrValue
IsStrValue: ; return T if token is a string value
 		BR_AEQ(T_StrLit,RtnTrue)
 		BR_AEQ(T_StrVar,RtnTrue)
 		BR_AEQ(T_StrAry,RtnTrue)
 		RTN_F()

;----------------------------------------------- IsAlpha
IsAlpha: ; returns T/F if .A is a Alpha A-Z
 		BR_ALT('A',RtnFalse)
 		BR_AGE('Z'+1,RtnFalse)
 		RTN_T()
;----------------------------------------------- IsAlphaNumeric
IsAlphaNumeric: ; returns true if .A is 0-9,A-Z
 		jsr 	IsAlpha
 		BR_T(RtnTrue)
 		;-- fall through to check for digit
 		;-- IsDigit
IsDigit: ; returns T/F if .A is a digit 0..9
 		BR_ALT('0',RtnFalse)
 		BR_AGE('9'+1,RtnFalse)
 		RTN_T()

 		;-- ;----------------------------------------------- IsRelOpChr
IsRelOpChr: ; returns T/F if CHRGOT is a relational opperator <>=
 		lda 	CHRGOT
 		BR_AEQ('<',RtnTrue) 	; 3c
 		BR_AEQ('=',RtnTrue) 	; 3d
 		BR_AEQ('>',RtnTrue) 	; 3e
 		RTN_F()

;----------------------------------------------- OneOf
; OneOf: ; see if CHRGOT is one of char in ChkList starting at X
; 		lda 	CHRGOT
; 		beq 	OneOfNo 	; null -> exit F
; OneOfL 		lda 	ChkList,X
; 		beq 	OneOfNo
; 		cmp 	CHRGOT
; 		beq 	OneOfYes
; 		inx
; 		bne 	OneOfL
; OneOfNo 	lda 	CHRGOT
; 		RTN_F() 		; NOPE, set carry & exit
; OneOfYes 	lda 	CHRGOT
; 		RTN_T() 		; YES, clear carry & exit

;----------------------------------------------- P_IsToken
P_IsToken: ; Parse for a token, returns TOKNO or CHRGOT, returns found T/F
; If Found, (T)
; 	returns with ZRd pointing at the last matching char
;       so calling GetChr will fetch the character immediately after the token
; If Not Found, (F)
;       returns with ZRd pointing at the first character of the src word


;----------------------------------------------- TokFind
; TblKeyword	has list of keywords, ending char has $80
; ZRd		points to input, 1st char to try and match Y=0..
; TOKNO		Counts up token number while we search
TokFind: ;try to find a matching token
 		;-- sart with first token no
 		lda 	#0
 		sta 	TOKNO
 		;-- start index in keyword list
 		ldx 	#$FF
TokWord 	;- test next word
 		ldy 	#0
 		inx
TokWordL 	;-- test a character of the word
 		lda 	TblKeyword,X
 		beq 	TokFail 	; end of Token list
 		bmi 	TokLast 	; bit7=1 marks end
 		;--
 		cmp 	(ZRd),Y 	; source char
 		bne 	TokNxt
 		;-- next char
 		iny
 		inx
 		bra 	TokWordL
TokLast 	; last character fo keyword
 		and 	#$7F
 		cmp 	(ZRd),Y
 		beq 	TokFound 	; match so we got it!
 		;-- no match, so next word
TokNxt 		; no match
 		inc 	TOKNO
TokNxtL 	lda 	TblKeyword,X
 		beq 	TokFail
 		bmi 	TokWord
 		inx
 		bra 	TokNxtL
TokFail 	;-- not found, return with CY=1
 		lda 	CHRGOT
 		RTN_F()
TokFound 	;-- found !
 		clc 			; move ZRd to after the keyword
 		tya 			; ZRd = ZRd + Y
 		adc 	ZRd
 		sta 	ZRd
 		lda 	#0
 		adc 	ZRd+1
 		sta 	ZRd+1
 		;-- get token number from the counter
TokRtn 		lda 	TOKNO
 		asl 	A 		; token nos incr in 2s
 		ora 	#$80 		; and have high bit set
 		;-- return Found=True, A=token
 		RTN_T()

;----------------------------------------------- TokExpand
TokExpand: ; Expand the token .X to key word
 		ZSET(ZPtr,TblKeyword) 	; point to the keyword table
 		;-- print TblKeyword[X]
 		jmp 	Msg

;----------------------------------------------- Run
Run: ; Run from TOKBUF

; for now, just TOKBUF
 		;-- set ZRd to point to first line of Program
 		ZSET(ZRd,TOKBUF-1) 	; jsr	EditTop
 		;-- set to read from memory
 		PR_RD_MEM() 		; read from memory (code space)
 		;-- list to output device IO
 		PR_WR_IO()

RunL 		jsr 	RunLn 		; (*1)
; LN_NXT -> ZRd
; 		bra 	RunL

; end of program
 		rts

;----------------------------------------------- RunLn
RunLn: ; Run [LineNo] Stmnt.... 00
 		;-- init calc
 		jsr 	NumInit 	; initialise evaluator
 		jsr 	GetChr 		; (++ZRd)->A
 		sta 	TOKNO
 		;-- line number ?
 		BR_ANE(T_LineNo,RunStmnt)
 		;-- line number so execute that
 		jsr 	X_LineNo
 		sta 	TOKNO
 		;-- fall through
RunStmnt 	;---------------------- STATEMENT
 		;-- end of statement?
 		beq 	RunLnX 		; null = End-of-statement
 		;-- remark ?
 		BR_AEQ(T_Rem,RunLnX) 	; remark skip rest
 		;-- token
 		BR_AGT(T_Max,TokErr) 	; >max = invalid token
 		BR_ALT($80,TokErr) 	; <$80 = invalid token
 		;-- jump to X_xxxx, rts to run loop (*1)
 		and 	#$7F
 		tax
 		jmp 	(TblRun,X) 	; rts->(*2)

RunLnX 		rts 			; done, return

;----------------------------------------------- TokErr
TokErr: ; display invalid token as [xx]
 		lda 	#'['
 		jsr 	PutChr
 		lda 	TOKNO
 		jsr 	PrAHex
 		lda 	#']'
 		jsr 	PutChr
 		rts


;;----------------------------------------------- List Scrn
;List: ; List from start of program
; 		;-- from start
; 		jsr 	BasTop
; 		;--
;; code to seek to starting line for listing
;; loop to call ListLn for each line in turn until last one
; 		jsr 	GetChr
; 		jsr 	ListLn
;; end of list
; 		rts

;----------------------------------------------- ListLn
ListLn: ; List line pointed to by ZRd
 		lda 	CHRGOT
 		beq 	ListLnX 	; null = done
 		jsr 	ListTok 	; (*1) Expand
 		bra 	ListLn
ListLnX 	jmp 	PrNL 		; NL and return

;  list a part of the line (token & its data)
ListTok 	sta 	TOKNO
 		;-- T_LineNo ?
 		CASE(T_LineNo,L_LineNo) ; $F0->L_LineNo, rts to (*1)
 		;-- Value ?
 		CASE(T_StrLit,L_String)
 		CASE(T_NumLit,L_Number)
 		;-- Variable ?
 		CASE(T_StrVar,VarList)
 		CASE(T_StrAry,VarList)
 		CASE(T_NumVar,VarList)
 		CASE(T_NumAry,VarList)

 		;-- Relational Operator $F1-$F6
 		and 	#$F8
 		cmp 	#$F0
 		bne 	ListTok1
 		;-- expand realtional op
 		BBR2 	TOKNO,ListTokR1 ; '<' ?
 		lda 	#'<'
 		jsr 	PutChr
ListTokR1 	BBR0 	TOKNO,ListTokR2 ; '>' ?
 		lda 	#'>'
 		jsr 	PutChr
ListTokR2 	BBR1 	TOKNO,ListTokR3 ; '=' ?
 		lda 	#'='
 		jsr 	PutChr
ListTokR3 	bra 	ListTokX
 		;--
 		;-- Token ?
ListTok1 	ldx 	TOKNO
 		jsr 	TokExpand
 		BR_T(ListTokX)
 		;-- not token, treat as ASCII
 		lda 	CHRGOT
 		jsr 	PutChr
ListTokX 	jsr 	ChrRd 		; get next byte
 		RTN_T()


;----------------------------------------------- NextLine
NextLine: ; point ZRd to the next line LN_NXT
; one byte short  - GetChr does (++ZRd)-> A
 		;-- point ZRd to the start of the lilne
 		lda 	LN_NXT
 		sta 	ZRd
 		lda 	LN_NXT+1
 		sta 	ZRd+1
 		rts

;=================================================================== VARIABLE =========

;=================================================================== NUM_A ===========

;----------------------------------------------- P_Number
P_Number: ; Parse a number into token & value
 		;-- Write Number token
 		lda 	#T_NumLit
 		jsr 	ChrWr
 		;-- Parse number value
 		jsr 	NumParse 	; read source -> NUM_A
 		jsr 	NumWr 		; write number value via ChrWr
 		;-- jsr ChrRd
 		;--
 		rts

;----------------------------------------------- L_Number
L_Number: ; List number
 		;-- get number from code -> NUM_A
 		jsr 	ENumLit
 		;-- Convert number to string & output (via PutChr mem/io)
 		jmp 	NumPrint

;=================================================================== STRING ===========

;----------------------------------------------- P_String
P_String: ; Parse quoted string into token
 		;-- Write Number token
 		lda 	#T_StrLit
 		jsr 	ChrWr
 		;-- Copy until the closing quote
P_StrL 		jsr 	ChrRd
 		beq 	P_StrX 		; null -> done
 		BR_AEQ('"',P_StrX) 	; quote -> done
 		jsr 	ChrWr 		; copy to TOKBUF
 		bra 	P_StrL 		; loop back for more
P_StrX 		lda 	#0
 		jsr 	ChrWr 		; place temrinating null and return
 		rts

;----------------------------------------------- L_String
L_String: ; list out string text
 		lda 	#'"'
 		jsr 	PutChr
 		jsr 	ChrCopy
 		lda 	#'"'
 		jsr 	PutChr
 		jsr 	ChrRd
 		rts

;=================================================================== LINE_NO ==========

;----------------------------------------------- P_LineNo
P_LineNo: ; Parse line number and place int TOKBUF
 		;-- Write LineNo token
 		lda 	#T_LineNo
 		jsr 	ChrWr
 		jsr 	IntParse 	; Parse int TMP from input
 		;-- write int number to memory via ChrWr
 		lda 	TMP
 		jsr 	ChrWr
 		lda 	TMP+1
 		jsr 	ChrWr
 		;-- place holder for the length
 		lda 	#$AA
 		jsr 	ChrWr
 		rts

;----------------------------------------------- X_LineNo
X_LineNo: ; Get LN_NUM & Set up LN_NXT
; enters with A=CHRGOT=T_LineNo, exit with CHRGOT after the line data
; sets LN_NUM=line number and LN_NXT=address of next line
 		ZCPY(LN_ADR,ZRd) 	; save start of this line
 		;-- save line no
 		jsr 	ChrRd 		; get lo no
 		sta 	LN_NUM
 		jsr 	ChrRd 		; hi num
 		sta 	LN_NUM+1
 		;-- get length of line
 		jsr 	ChrRd
 		;-- Calculate address of the next line
 		clc
 		adc 	ZRd
 		sta 	LN_NXT
 		lda 	#0
 		adc 	ZRd+1
 		sta 	LN_NXT+1
 		;--
X_LineNoX 	jmp 	ChrRd 		; read next byte->CHRGOT

;----------------------------------------------- X_LineNext
X_LineNext: ; Move to the start of the next line LN_NXT->ZRd (ZRd)->.A->CHRGOT
 		ZCPY(ZRd,LN_NXT)
 		lda 	(ZRd)
 		sta 	CHRGOT
 		rts

;----------------------------------------------- L_LineNo
L_LineNo: ; List LineNo (calls X_LineNo)
 		jsr 	X_LineNo 	; Get LN_NUM & Set up LN_NXT
 		;-- output line no
 		lda 	LN_NUM
 		ldx 	LN_NUM+1
 		jsr 	IntPrint
 		lda 	#' '
 		jsr 	PutChr
 		;-- jsr 	ChrRd 		; get next byte into CHRGOT
 		rts

 		;-- .export T_StrLit,T_LineNo,T_NumLit
 		;-- .export TokFind,TOKNO,TokFound,Parse
 		;-- .export TblKeyword,TblRun
 		;-- .export L_LineNo,T_Max


.echo "  _Tok\t\t"
.echo $-_Tok
.echo "\n"
.list
