#ifdef hide
.NOLIST
#endif
#if (($/256)>=PG_ROM) & (($/256)<PG_KEY)
;=================================================================== LIST ============== 
;*  DB_List              Debug LIST values - BEG  END  NUM  FLG  FND"
;*  ListInit             initial range for listing 0000->FFFF
;*  ListLn               List line (LnNext called before this)
;*  X_List               LIST [##From] [- [##To]]~List program (optional range of lines)
;*  X_ListDo             List lines in range LST_BEG to LST_END
;*
_List 		= $

#define LST_BEG ZSrc
#define LST_END ZTgt

;----------------------------------------------- X_List 
X_List: ; LIST [##From] [- [##To]]~List program (optional range of lines)
 		jsr 	ChrRd 		; consume LIST
 		CLS()
 		;-- default range 0000-FFFF
 		jsr 	ListInit
 		;-- 
 		lda 	CHRGOT
 		BR_ANE(T_NumLit,X_List_0)
 		;-- set from (NumRd will consume the T_NumLit)
 		jsr 	NumRd 		; read value into NUM_A
 		jsr 	ChrRd 		; read char after the num
 		;-- set start & end to number
 		jsr 	NumToInt 	; NUM_A as AX l/h
 		sta 	LST_BEG
 		sta 	LST_END
 		stx 	LST_BEG+1
 		stx 	LST_END+1

X_List_0 	;- check for a '-'
 		lda 	CHRGOT
 		cmp 	#'-'
 		bne 	X_ListDo 	; no
 		;-- default end is FFFF
 		lda 	#$ff
 		sta 	LST_END
 		sta 	LST_END+1
 		jsr 	ChrRd 		; consume '-', get next byte
 		;-- check for ending number
 		BR_ANE(T_NumLit,X_ListDo)
 		jsr 	NumRd 		; read value into NUM_A
 		jsr 	NumToInt 	; NUM_A as AX l/h
 		sta 	LST_END
 		stx 	LST_END+1
;----------------------------------------------- X_ListDo 
X_ListDo: ; List lines in range LST_BEG to LST_END
 		ZCPY(LN_FND,LST_BEG)
 		jsr 	LnSeekTop 	;Seek line>=LN_FND, sets LN_ADR,LN_NUM,LN_NXT
 		;-- TODO check start line is out of range
 		;-- set ending line no
 		ZCPY(LN_FND,LST_END)
X_List_L 	;-- check last line no
 		jsr 	LnComp
 		beq 	X_List1
 		bcs 	X_List_X
X_List1 	jsr 	ListLn 		; list the line
 		jsr 	LnNext 		; move to next line
 		;-- check if we have a line (length > 0)
 		lda 	LN_LEN 		; get length
 		bne 	X_List_L 	; non-zero, so loop
X_List_X 	rts

;----------------------------------------------- ListLn 
ListLn: ; List line (LnNext called before this)
; line token already processed
 		jsr 	ChrRd
 		;-- if line no is zero the exit
 		lda 	LN_NUM
 		ora 	LN_NUM+1
 		beq 	ListLnX
 		;-- start by printing the line number
 		lda 	LN_NUM
 		ldx 	LN_NUM+1
 		jsr 	IntPrint
 		lda 	#' '
 		jsr 	ChrOut

ListLnL 	;-- check for end of line null
 		lda 	CHRGOT
 		beq 	ListLnX 	; null = dend of line
 		bpl 	ListChr 	; $00-7F => character

 		;-- have a token $80-FF
 		jsr 	ListTok
 		;-- loop back for more
 		bra 	ListLnL

ListLnX 	;-- end of the line, CRLF and done
 		jmp 	PrNL

ListChr 	; non-token
 		jsr 	ChrOut
 		jsr 	ChrRd
 		bra 	ListLnL


;  list a part of the line (token & its data)
ListTok 	sta 	TOKNO

 		;-- Value ?
 		CASE(T_StrLit,L_String)
 		CASE(T_NumLit,L_Number)
 		;-- Variable ?
 		CASE(T_StrVar,VarList)
 		CASE(T_StrAry,VarList)
 		CASE(T_NumVar,VarList)
 		CASE(T_NumAry,VarList)

 		;-- Relational Operator $F1-$F6
 		and 	#$F8
 		cmp 	#$F0
 		bne 	ListTok1
 		;-- expand realtional op
 		BBR0 	TOKNO,ListTokR1 ; '<' ?
 		lda 	#'<'
 		jsr 	ChrOut
ListTokR1 	BBR2 	TOKNO,ListTokR2 ; '>' ?
 		lda 	#'>'
 		jsr 	ChrOut
ListTokR2 	BBR1 	TOKNO,ListTokR3 ; '=' ?
 		lda 	#'='
 		jsr 	ChrOut
ListTokR3 	bra 	ListTokX
 		;-- 
 		;-- Token ?
ListTok1 	ldx 	TOKNO
 		jsr 	TokExpand
 		BR_T(ListTokX)

 		;-- not token, treat as ASCII
 		lda 	TOKNO 		; CHRGOT
 		jsr 	ChrOut

ListTokX 	jsr 	ChrRd 		; get next byte
 		RTN_T()

;----------------------------------------------- ListInit 
ListInit: ; initial range for listing 0000->FFFF
 		;-- default range 0000-FFFF
 		lda 	#0
 		sta 	LST_BEG
 		sta 	LST_BEG+1
 		dec 	a
 		sta 	LST_END
 		sta 	LST_END+1
 		PR_ZSUP_ON()
 		rts

#if _DB_LIST
;=================================================================== DBUG ============= 
DB_List: ; Debug LIST values - BEG  END  NUM  FLG  FND"
 		PUSHALL()
 		PRINTLN("BEG  END  NUM  FLG  FND")
 		HEX_INT(LST_BEG)
 		HEX_INT(LST_END)
 		HEX_INT(LN_NUM)
 		HEX_INT(LN_FLG)
 		HEX_INT(LN_FND)
 		CRLF()
 		PAUSE()
 		PULLALL()
 		rts
#endif


#if _LEVEL >= _KEYWORDS
.echo "  _LIST\t\t"
.echo $-_List
.echo "\n"
#endif

.nolist
#endif

;----------------------------------------------- keyword 
#if ($/256) = PG_KEY
.list
W_List 		.DB 	"LIS",'T'+$80
.nolist
#endif
;----------------------------------------------- run 
#if ($/256) = PG_RUN
.list
T_List 		= LOW($)+$80
.DW 	X_List
.nolist
#endif

.list 					; end of List
