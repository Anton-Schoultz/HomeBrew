#ifdef hide
.NOLIST
#endif
#if (($/256)>=PG_ROM) & (($/256)<PG_KEY)
;=================================================================== LEFT =============
;*  X_Left               Left$(n) keep left most chars (trunc at n)
;*
_Left 		= $
; To return a string that comprises the left-most n characters of x$.

; Syntax:	 LEFT$(x$,n)

; n must be within the range of 0 to 255.
; If n is greater than LEN(x$), the entire string (x$) will be returned.
; If n equals zero, the null string (length zero) is returned

;----------------------------------------------- X_Left
X_Left: ; Left$(n) keep left most chars (trunc at n)
 		jsr 	StrPush 	; push the string
 		;-- check & skip ','
 		lda 	#','
 		jsr 	Match
 		;-- Evaluate the index and save it on stack
 		jsr 	EvNumeric
 		jsr 	NumToInt
 		cpx 	#0
 		bne 	X_LeftX
 		pha
 		;-- Pop the string back and truncate at index
 		jsr 	NumPopB
 		jsr 	NumSwap
 		ply 			; recall index into y
 		lda 	#0 		; trunc with null
 		sta 	(S_PTR_A),Y
X_LeftX 	jmp 	StrLen 		; find new length

.echo "  _LEFT$(\t"
.echo $-_Left
.echo "\n"
.nolist
#endif

;----------------------------------------------- keyword
#if ($/256) = PG_KEY
.list
W_Left 		.DB 	"LEFT$",'('+$80
.nolist
#endif
;----------------------------------------------- run
#if ($/256) = PG_RUN
#ifndef _T_FSTR_
#define _T_FSTR_
T_FSTR 		= LOW($)+$80
#endif

.list
T_Left 		= LOW($)+$80
.DW 	X_Left
.nolist
.export T_Left
#endif

.list 					; end of Left
