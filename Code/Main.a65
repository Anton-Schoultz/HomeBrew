
#include "Macro.a65" 			; macro definitions
#include "Vars.a65" 			; Z-Page, Stack and system ram
#include "IOMap.a65" 			; Define I/O port adresses


ROMBEG 		.ORG 	$E000
;.FILL $2000,$EA
;.org $E000

CODEPAGE 	= 1
.LIST
;=====================================================================
; CODE
;=====================================================================
;

#include "Cold.a65"
 		;-- falls through to Warm start
#include "Warm.a65"
 		;-- falls through to Main Loop

; $02 is undocumented NOP, 2bytes, 2Cycles
#define MARK(n) .DB $02,n


#define TSTNUM(one,two) LDAX(one)\ jsr CalcSetI\ jsr CalcPush \ LDAX(two)\ jsr CalcSetI
#define TSTRES(res) TEST(TOS,res)\ jsr MShowTOS\ jsr NewLine



;--------------------------------------------------------------------- Main
Main: ; Main loop code
 		JSR 	DevDefault 	; Default input & output (CONSOLE => Simulator)

 		MARK(1)

 		LDA 	#CLS 		; output form-feed = Clear Screen
 		JSR 	CharOut

 		THROW(3)
;
; 		MARK(2)
; 		JSR 	Calc 		; Init calc system (reset stack, TOS=0.0e0)

;                TEST(TOS_ML,$0000)      ; value
;                TEST(TOS_EXP,$0000)     ; Exp , SGN
;
;                jsr     CalcPack        ; pack the sign and exponent
;                TEST(TOS_EXP,$0040)     ; h:SGN, l:EXP
;
;                jsr     CalcUnpack      ; pack the sign and exponent
;                TEST(TOS_EXP,$0000)     ; Exp , SGN

 		LOAD_TOS( 123456, $C0) 	; -123456 e 0	123456=$01E240
 		TEST(TOS_ML,$E240) 	; value
 		TEST(TOS_MU,$C001) 	; Exp , SGN

 		JSR 	CalcDBugTOS

 		JSR 	CalcUnpack
 		JSR 	CalcDBugTOS

 		JSR 	CalcPack
 		JSR 	CalcDBugTOS


;		ldx	#TOS		; point to TOS
;		jsr	CalcNegX	; Negate it





 		BRK
PARAGRAPH()
NumStr:  	.DB 	"12E3",0
.export NumStr

;            PRINT("-- RANDOM --\r\n")
;			PRINT("123 456 Add\r\n")
;            TSTNUM(123,456)
;            jsr CalcAddI
;            TSTRES(579)
;
;			PRINT("123 45 Mul\r\n")
;            TSTNUM(123,45)
;            jsr CalcMulI
;            TSTRES(5535)
;
;			PRINT("-123 -45 Mul\r\n")
;            TSTNUM(-123,-45)
;            jsr CalcMulI
;            TSTRES(5535)
;
; 		PRINT("-- TEST1 --\r\n")
; 		JSR 	Test1
;
; 		PRINT("-- TEST2 --\r\n")
; 		JSR 	Test2
;



Stop 		HALT() ; halt simulator
 		BRK

;--------------------------------------------------------------------- TestChar
TestChar: ; test char routiones CharRd, CharWr
 		JSR 	CharClear 	; wipe and point
 		POINT(Z_Rd,Msg) 	; source is message
 		JSR 	CharEcho 	; read input chars until null and send to output
 		RTS

;--------------------------------------------------------------------- TestCvt
TestCvt: ; test conversions
 		PRINT("-- CONVERT --\r\n")
 		PRINT("Convert -1234 $FB2E\r\n")

 		POINT(Z_Rd,NumNeg)
 		JSR 	CalcParse 	; Read from memory, parse as Integer; -1234=FB2E
 		TEST(TOS,-1234)
 		JSR 	MShowTOS
 		JSR 	NewLine

;            PRINT("Convert 1234 $04D2\r\n")
;			LDAX(NumPos)
;			jsr CalcParseAX		; convert string to value  ;+1234=$04D2
;			TEST(TOS,1234)
;			jsr MShowTOS
;			TEST(TOS,1234)     ; this should not fail (MShow saves & restores)
;            jsr NewLine

 		RTS

;--------------------------------------------------------------------- Test1
Test1 		; tests with -100, 150
 		PRINT("-100 150 Add = 50\r\n")
 		JSR 	LdVal
 		JSR 	CalcAddI 	; -100 + 150 => 50
 		JSR 	MShowTOS
 		TEST(TOS,50)
 		JSR 	NewLine

 		PRINT("-100 150 Sub = -250\r\n")
 		JSR 	LdVal
 		JSR 	CalcSubI
 		JSR 	MShowTOS
 		TEST(TOS,-250)
 		JSR 	NewLine

 		PRINT("-100 150 Mul = -15000\r\n")
 		JSR 	LdVal
 		JSR 	CalcMulI
 		JSR 	MShowTOS
 		TEST(TOS,-15000)
 		JSR 	NewLine

 		PRINT("-100 150 Div = 0 -0.66\r\n")
 		JSR 	LdVal
 		JSR 	CalcDivI
 		JSR 	MShowTOS
 		TEST(TOS,0)
 		JSR 	NewLine

 		PRINT("-100 150 Mod = 100\r\n")
 		JSR 	LdVal
 		JSR 	CalcModI
 		JSR 	MShowTOS
 		TEST(TOS,100)
 		JSR 	NewLine

 		RTS

;--------------------------------------------------------------------- Test2
Test2 		; tests with 100, -50
 		PRINT("100 -50 Add = 50\r\n")
 		JSR 	LdVal2
 		JSR 	CalcAddI
 		JSR 	MShowTOS
 		TEST(TOS,50)
 		JSR 	NewLine

 		PRINT("100 -50 Sub = 150\r\n")
 		JSR 	LdVal2
 		JSR 	CalcSubI
 		JSR 	MShowTOS
 		TEST(TOS,150)
 		JSR 	NewLine

 		PRINT("100 -50 Mul = -5000\r\n")
 		JSR 	LdVal2
 		JSR 	CalcMulI
 		JSR 	MShowTOS
 		TEST(TOS,-5000)
 		JSR 	NewLine

 		PRINT("100 -50 Div = -2\r\n")
 		JSR 	LdVal2
 		JSR 	CalcDivI
 		JSR 	MShowTOS
 		TEST(TOS,-2)
 		JSR 	NewLine

 		PRINT("100 -50 Mod = 0\r\n")
 		JSR 	LdVal2
 		JSR 	CalcModI
 		JSR 	MShowTOS
 		TEST(TOS,0)
 		JSR 	NewLine

 		RTS
 		;-- test indent comment

;--------------------------------------------------------------------- Load Values
LdVal 		; -100, push, 150
 		LDAX(-100) 		; -100=$FF9C
 		JSR 	CalcSetI
 		JSR 	CalcPush
 		LDAX(150) 		; 150 =$0096
 		JSR 	CalcSetI
 		RTS
;--------------------------------------------------------------------- Load Values
LdVal2 		; 100, push, -50
 		LDAX(100) 		; -100=$FF9C
 		JSR 	CalcSetI
 		JSR 	CalcPush
 		LDAX(-50) 		; 150 =$0096
 		JSR 	CalcSetI
 		RTS

;--------------------------------------------------------------------- MShowTOS
;Show contents of TOS (kills tos)
MShowTOS 	;Show contents of TOS (kills tos)
 		JSR 	CharClear 	; clear string buffer
 		;--
 		JSR 	CalcGetI 	; TOS -> AX
 		PUSHAXY() 		; store
 		;--
 		JSR 	CvtAXHex 	; append AX as hex (FB2E) OK
 		LDA 	#'='
 		JSR 	CharWr
 		;--
 		JSR 	CvtInt 		; Convert TOS to integer String and write to output (CharWr)
 		;--
 		PULLAXY() 		; restore
 		JSR 	CalcSetI
 		;--
 		JSR 	CharPrint 	; print the buffer out

NewLine 	; print CR,LF
 		LDA 	#CR
 		JSR 	CharOut
 		LDA 	#LF
 		JMP 	CharOut



Msg:  		.DB 	" Hello World\r\nThis is me!",0

NumNeg 		.DB 	"-1234",0 	; -1234=FB2E
NumPos 		.DB 	"1234",0 	; +1234=$04D2


#include 	"UtilHex.a65"
#include 	"Util.a65"
#include 	"Text.a65"
#include 	"Buffer.a65"
#include 	"MC68B50.a65"
#include 	"Simulator.a65"
;#include 	"Monitor.a65"
#include	"Dev.a65"

;#include	"Test.a65"

;=====================================================================
; MODULES
;=====================================================================
;
#include 	"Modules.a65"

#include 	"Irq.a65"


ROMEND 		= $
.echo "\rTOTAL "
.echo (ROMEND - ROMBEG)
.echo " bytes : "

;--------------------------------------------------------------------- hardware vectors
; FFFA,B	NMI
; FFFC,D	Reset
; FFFE,F	IRQ
.org $FFFA
.dw Nmi 				; FFFA,B=> NMI		Points to Non-Maskable Interrupt handler
.dw Cold 				; FFFC,D=> RESET	Points to Reset address (cold start)
.dw Irq 				; FFFE,F=> IRQ		Points to Interrupt handler

.echo ($FFFA - ROMEND) / 256
.echo "/32 pages (x256) available in the 8k ROM. E000-FFFF\r"

.END
