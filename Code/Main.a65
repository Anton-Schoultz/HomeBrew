
#include "Macro.a65"			; macro definitions
#include "Vars.a65"				; Z-Page, Stack and system ram
#include "IOMap.a65"			; Define I/O port adresses


ROMBEG .org $E000
;.FILL $2000,$EA
;.org $E000

CODEPAGE = 1
.LIST
;========================================================================
; CODE
;========================================================================
;

#include "Cold.a65"
	; falls through to Warm start
#include "Warm.a65"
	; falls through to Main Loop

;------------------------------------------------------------------------- Main
Main: ; Main loop code
			jsr	DevDefault		; Default input & output (CONSOLE => Simulator)

			lda	#CLS			; output form-feed = Clear Screen
			jsr	CharOut

			jsr	Calc
			;
			LDAX(65000)
			jsr CalcSetI
			jsr CalcPush
			;
			LDAX(300)
			jsr CalcSetI
			jsr CalcModI
			;
			jsr CalcGetI
			jsr PrAXHex

;			jsr CalcRemI
;			jsr CalcGetI
;			jsr PrAXHex




;			LDAX($200)
;			STAX(Z_Src)
;
;			TEST(Z_Src,$200)	; Expecting Z_Src to be $0200 ..
;
;			TEST(Z_Src,$1234)
;
;			jsr Monitor

;			LDAX(Msg)			; message addres
;			jsr PrAXHex			; print as hex
;
;			LDAX(Msg)			; message addres
;			jsr	PrStr			; 'print' it to the device pointed to by V_CHROUT

;			; create text at $200
;			LDAX($200)
;			STAX(Z_Ptr)			; Z_Ptr == Z_Txt  00,01
;			lda #31
;			jsr TextDim
;
;			; copy message
;			LDAX(Msg)
;			STAX(Z_Src)			; 02,03
;			jsr TextCopy




Stop:; halt simulator
			.db $DB
			BRK

Msg: .DB " Hello World\r\nThis is me!",0



#include 	"UtilHex.a65"
#include 	"Util.a65"
#include 	"Text.a65"
#include 	"Buffer.a65"
#include 	"MC68B50.a65"
#include 	"Simulator.a65"
;#include 	"Monitor.a65"
#include	"Dev.a65"

;#include	"Test.a65"

;========================================================================
; MODULES
;========================================================================
;
#include 	"Modules.a65"

#include 	"Irq.a65"


ROMEND = $
.echo (ROMEND - ROMBEG)
.echo " total code bytes\r"

;------------------------------------------------------------------------- hardware vectors
; FFFA,B	NMI
; FFFC,D	Reset
; FFFE,F	IRQ
.org $FFFA
.dw Nmi		; FFFA,B=> NMI		Points to Non-Maskable Interrupt handler
.dw Cold	; FFFC,D=> RESET	Points to Reset address (cold start)
.dw Irq		; FFFE,F=> IRQ		Points to Interrupt handler

.echo ($FFFA - ROMEND) / 256
.echo "/32 pages (x256) available in the 8k ROM. E000-FFFF\r"
	.END