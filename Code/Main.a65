
#include "Macro.a65" 			; macro definitions
#include "Vars.a65" 			; Z-Page, Stack and system ram
#include "IOMap.a65" 			; Define I/O port adresses


ROMBEG 		.ORG 	$E000
;.FILL $2000,$EA
;.org $E000

CODEPAGE 	= 1
.LIST
;=====================================================================
; CODE
;=====================================================================
;

#include "Cold.a65"
 		;-- falls through to Warm start
#include "Warm.a65"
 		;-- falls through to Main Loop

; $02 is undocumented NOP, 2bytes, 2Cycles
#define MARK(n) .DB $02,n


#define TSTNUM(one,two) LDAX(one)\ jsr CalcSetI\ jsr CalcPush \ LDAX(two)\ jsr CalcSetI
#define TSTNR(res) TEST(NA,res)\ jsr MShowNA\ jsr NewLine


; Cold start coppies the CharRd and CharWr routines to ZPg ram

;--------------------------------------------------------------------- Main
Main: ; Main loop code
 		JSR 	DevDefault 	; Default input & output (CONSOLE => Simulator)
 		LDA 	#CLS 		; output form-feed = Clear Screen
 		JSR 	CharOut

 		MARK(1)
 		JSR 	Calc 		; Init calc system (reset stack, NA=0.0e0)

;    1234 0004d2 0
;   12340 003034 1
;  123400 01E208 2
; 1234000 12D450 3
;12340000 BC4B20 4

 		POINT(Z_Rd,NumStr)
 		JSR 	CalcParse 	; parse string into unpacked form
 		JSR 	CalcA2B
 		JSR 	CalcDBugNA
 		JSR 	CalcDBugNB

 		BRK

PARAGRAPH()
NumStr:
;.db "2.7182818284590",0


;.DB 	"12.34",0 	;  1234 => UnP:fe 002EE0 FF
;.DB 	"-12E3",0 	; 12000 => P:C0 002EE0 UnP:00 002EE0 FF
;.db "3.1415",0		; 31415=
;.db "3.141592",0	; 314159  =$04 CB 2F
.db "3.1415926535",0	; 3141593 =$2F EF D9  Packed.Mem:D9EF2F3Axx
;           ^rounds this up as it is followed by '6'
; unpacked Mem:D8EF2FFA

.db 0

.export NumStr,CalcParse, NR

;            PRINT("-- RANDOM --\r\n")
;			PRINT("123 456 Add\r\n")
;            TSTNUM(123,456)
;            jsr CalcAddI
;            TSTNR(579)
;
;			PRINT("123 45 Mul\r\n")
;            TSTNUM(123,45)
;            jsr CalcMulI
;            TSTNR(5535)
;
;			PRINT("-123 -45 Mul\r\n")
;            TSTNUM(-123,-45)
;            jsr CalcMulI
;            TSTNR(5535)
;
; 		PRINT("-- TEST1 --\r\n")
; 		JSR 	Test1
;
; 		PRINT("-- TEST2 --\r\n")
; 		JSR 	Test2
;



Stop 		HALT() 			; halt simulator
 		BRK

;--------------------------------------------------------------------- TestChar
TestChar: ; test char routiones CharRd, CharWr
 		JSR 	CharClear 	; wipe and point
 		POINT(Z_Rd,Msg) 	; source is message
 		JSR 	CharEcho 	; read input chars until null and send to output
 		RTS

;;--------------------------------------------------------------------- TestCvt
;TestCvt: ; test conversions
; 		PRINT("-- CONVERT --\r\n")
; 		PRINT("Convert -1234 $FB2E\r\n")
;
; 		POINT(Z_Rd,NumNeg)
; 		JSR 	CalcParse 	; Read from memory, parse as Integer; -1234=FB2E
; 		TEST(NA,-1234)
; 		JSR 	MShowNA
; 		JSR 	NewLine

;            PRINT("Convert 1234 $04D2\r\n")
;			LDAX(NumPos)
;			jsr CalcParseAX		; convert string to value  ;+1234=$04D2
;			TEST(NA,1234)
;			jsr MShowNA
;			TEST(NA,1234)     ; this should not fail (MShow saves & restores)
;            jsr NewLine

 		RTS

;;--------------------------------------------------------------------- Test1
;Test1 		; tests with -100, 150
; 		PRINT("-100 150 Add = 50\r\n")
; 		JSR 	LdVal
; 		JSR 	CalcAddI 	; -100 + 150 => 50
; 		JSR 	MShowNA
; 		TEST(NA,50)
; 		JSR 	NewLine
;
; 		PRINT("-100 150 Sub = -250\r\n")
; 		JSR 	LdVal
; 		JSR 	CalcSubI
; 		JSR 	MShowNA
; 		TEST(NA,-250)
; 		JSR 	NewLine
;
; 		PRINT("-100 150 Mul = -15000\r\n")
; 		JSR 	LdVal
; 		JSR 	CalcMulI
; 		JSR 	MShowNA
; 		TEST(NA,-15000)
; 		JSR 	NewLine
;
; 		PRINT("-100 150 Div = 0 -0.66\r\n")
; 		JSR 	LdVal
; 		JSR 	CalcDivI
; 		JSR 	MShowNA
; 		TEST(NA,0)
; 		JSR 	NewLine
;
; 		PRINT("-100 150 Mod = 100\r\n")
; 		JSR 	LdVal
; 		JSR 	CalcModI
; 		JSR 	MShowNA
; 		TEST(NA,100)
; 		JSR 	NewLine
;
; 		RTS
;
;;--------------------------------------------------------------------- Test2
;Test2 		; tests with 100, -50
; 		PRINT("100 -50 Add = 50\r\n")
; 		JSR 	LdVal2
; 		JSR 	CalcAddI
; 		JSR 	MShowNA
; 		TEST(NA,50)
; 		JSR 	NewLine
;
; 		PRINT("100 -50 Sub = 150\r\n")
; 		JSR 	LdVal2
; 		JSR 	CalcSubI
; 		JSR 	MShowNA
; 		TEST(NA,150)
; 		JSR 	NewLine
;
; 		PRINT("100 -50 Mul = -5000\r\n")
; 		JSR 	LdVal2
; 		JSR 	CalcMulI
; 		JSR 	MShowNA
; 		TEST(NA,-5000)
; 		JSR 	NewLine
;
; 		PRINT("100 -50 Div = -2\r\n")
; 		JSR 	LdVal2
; 		JSR 	CalcDivI
; 		JSR 	MShowNA
; 		TEST(NA,-2)
; 		JSR 	NewLine
;
; 		PRINT("100 -50 Mod = 0\r\n")
; 		JSR 	LdVal2
; 		JSR 	CalcModI
; 		JSR 	MShowNA
; 		TEST(NA,0)
; 		JSR 	NewLine
;
; 		RTS
; 		;-- test indent comment

;;--------------------------------------------------------------------- Load Values
;LdVal 		; -100, push, 150
; 		LDAX(-100) 		; -100=$FF9C
; 		JSR 	CalcSetI
; 		JSR 	CalcPush
; 		LDAX(150) 		; 150 =$0096
; 		JSR 	CalcSetI
; 		RTS
;;--------------------------------------------------------------------- Load Values
;LdVal2 		; 100, push, -50
; 		LDAX(100) 		; -100=$FF9C
; 		JSR 	CalcSetI
; 		JSR 	CalcPush
; 		LDAX(-50) 		; 150 =$0096
; 		JSR 	CalcSetI
; 		RTS

;--------------------------------------------------------------------- MShowNA
;Show contents of NA (kills tos)
;MShowNA 	;Show contents of NA (kills tos)
; 		JSR 	CharClear 	; clear string buffer
; 		;--
; 		JSR 	CalcGetI 	; NA -> AX
; 		PUSHAXY() 		; store
; 		;--
; 		JSR 	CvtAXHex 	; append AX as hex (FB2E) OK
; 		LDA 	#'='
; 		JSR 	CharWr
; 		;--
; 		JSR 	CvtInt 		; Convert NA to integer String and write to output (CharWr)
; 		;--
; 		PULLAXY() 		; restore
; 		JSR 	CalcSetI
; 		;--
; 		JSR 	CharPrint 	; print the buffer out
;
;NewLine 	; print CR,LF
; 		LDA 	#CR
; 		JSR 	CharOut
; 		LDA 	#LF
; 		JMP 	CharOut



Msg:  		.DB 	" Hello World\r\nThis is me!",0

NumNeg 		.DB 	"-1234",0 	; -1234=FB2E
NumPos 		.DB 	"1234",0 	; +1234=$04D2


#include 	"UtilHex.a65"
#include 	"Util.a65"
#include 	"Text.a65"
#include 	"Buffer.a65"
#include 	"MC68B50.a65"
#include 	"Simulator.a65"
;#include 	"Monitor.a65"
#include	"Dev.a65"

;#include	"Test.a65"

;=====================================================================
; MODULES
;=====================================================================
;
#include 	"Modules.a65"

#include 	"Irq.a65"


ROMEND 		= $
.echo "\rTOTAL "
.echo (ROMEND - ROMBEG)
.echo " bytes : "

;--------------------------------------------------------------------- hardware vectors
; FFFA,B	NMI
; FFFC,D	Reset
; FFFE,F	IRQ
.org $FFFA
.dw Nmi 				; FFFA,B=> NMI		Points to Non-Maskable Interrupt handler
.dw Cold 				; FFFC,D=> NRET	Points to Reset address (cold start)
.dw Irq 				; FFFE,F=> IRQ		Points to Interrupt handler

.echo ($FFFA - ROMEND) / 256
.echo "/32 pages (x256) available in the 8k ROM. E000-FFFF\r"

.END
