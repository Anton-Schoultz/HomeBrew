
#include "Macro.a65"			; macro definitions
#include "Vars.a65"				; Z-Page, Stack and system ram
#include "IOMap.a65"			; Define I/O port adresses


ROMBEG .org $E000
;.FILL $2000,$EA
;.org $E000

CODEPAGE = 1
.LIST
;========================================================================
; CODE
;========================================================================
;

#include "Cold.a65"
	; falls through to Warm start
#include "Warm.a65"
	; falls through to Main Loop

;------------------------------------------------------------------------- Main
Main: ; Main loop code
			jsr	DevDefault		; Default input & output (CONSOLE => Simulator)

			lda	#CLS			; output form-feed = Clear Screen
			jsr	CharOut

			nop
			nop




			jsr	Calc

;NumNeg	.db "-1234",0	; -1234=FB2E
;NumPos	.db "1234",0	; +1234=$04D2


            PRINT("Convert -1234\r\n")
			LDAX(NumNeg)
			jsr CalcParseAX		; convert string to value  ; -1234=FB2E
			TEST(TOS,$FB2E)
			jsr MShowTOS
            jsr NewLine

            PRINT("Convert 1234\r\n")
			LDAX(NumPos)
			jsr CalcParseAX		; convert string to value  ;+1234=$04D2
			TEST(TOS,$04D2)
			jsr MShowTOS
			TEST(TOS,$04D2)     ; this shouold not fail (MShow saves & restores)
            jsr NewLine
;-------
;            PRINT("-100 150 Add = 50\r\n")
;            jsr LdVal
;            jsr CalcAddI        ; -100 + 150 => 50
;            jsr MShowTOS
;			TEST(TOS,50)
;            jsr NewLine
;
;            PRINT("-100 150 Sub = -250\r\n")
;            jsr LdVal
;            jsr CalcSubI
;            jsr MShowTOS
;			TEST(TOS,-250)
;            jsr NewLine
;
;            PRINT("-100 150 Mul = -15000\r\n")
;            jsr LdVal
;            jsr CalcMulI
;            jsr MShowTOS
;			TEST(TOS,-15000)
;            jsr NewLine
;
;            PRINT("-100 150 Div = 0 -0.66\r\n")
;            jsr LdVal
;            jsr CalcDivI
;            jsr MShowTOS
;			TEST(TOS,0)
;            jsr NewLine
;
;            PRINT("-100 150 Mod = 100\r\n")
;            jsr LdVal
;            jsr CalcModI
;            jsr MShowTOS
;			TEST(TOS,100)
;            jsr NewLine
;------

            PRINT("100 -50 Add = 50\r\n")
            jsr LdVal2
            jsr CalcAddI
            jsr MShowTOS
			TEST(TOS,50)
            jsr NewLine

            PRINT("100 -50 Sub = 150\r\n")
            jsr LdVal2
            jsr CalcSubI
            jsr MShowTOS
			TEST(TOS,150)
            jsr NewLine

            PRINT("100 -50 Mul = -5000\r\n")
            jsr LdVal2
            jsr CalcMulI
            jsr MShowTOS
			TEST(TOS,-5000)
            jsr NewLine

            PRINT("100 -50 Div = -2\r\n")
            jsr LdVal2
            jsr CalcDivI
            jsr MShowTOS
			TEST(TOS,-2)
            jsr NewLine

            PRINT("100 -50 Mod = 0\r\n")
            jsr LdVal2
            jsr CalcModI
            jsr MShowTOS
			TEST(TOS,0)
            jsr NewLine

;------


;			;
;			jsr CalcGetI
;			jsr PrAXHex

;			jsr CalcRemI		; remainder into TOS (and AX)
;			jsr PrAXHex




;			LDAX($200)
;			STAX(Z_Src)
;
;			TEST(Z_Src,$200)	; Expecting Z_Src to be $0200 ..
;
;			TEST(Z_Src,$1234)
;
;			jsr Monitor

;			LDAX(Msg)			; message addres
;			jsr PrAXHex			; print as hex
;
;			LDAX(Msg)			; message addres
;			jsr	PrStr			; 'print' it to the device pointed to by V_CHROUT

;			; create text at $200
;			LDAX($200)
;			STAX(Z_Ptr)			; Z_Ptr == Z_Txt  00,01
;			lda #31
;			jsr TextDim
;
;			; copy message
;			LDAX(Msg)
;			STAX(Z_Src)			; 02,03
;			jsr TextCopy




Stop:; halt simulator
			.db $DB
			BRK

;---------------------------------------------- Load Values
LdVal:; -100, push, 150
			LDAX(-100)          ; -100=$FF9C
			jsr CalcSetI
			jsr CalcPush
			LDAX(150)           ; 150 =$0096
			jsr CalcSetI
            rts
;---------------------------------------------- Load Values
LdVal2:; 100, push, -50
			LDAX(100)          ; -100=$FF9C
			jsr CalcSetI
			jsr CalcPush
			LDAX(-50)           ; 150 =$0096
			jsr CalcSetI
            rts

;---------------------------------------------- Show contents of TOS (kills tos)
MShowTOS:;Show contents of TOS (kills tos)
			jsr CalcGetI		; TOS -> AX
			PUSHAXY()           ; store
			;
			jsr	PrAXHex			; print AX as hex (FB2E) OK
			lda #'='
			jsr CharOut
			jsr CalcStr			; Cvt to string in RES
			LDAX(RES)
			jsr PrStrAX			; print string as decimal
			;
			PULLAXY()            ; restore
			jsr CalcSetI

NewLine:; print CR,LF
            lda #CR
			jsr CharOut
            lda #LF
			jmp CharOut




Msg: .DB " Hello World\r\nThis is me!",0

NumNeg	.db "-1234",0	; -1234=FB2E
NumPos	.db "1234",0	; +1234=$04D2


#include 	"UtilHex.a65"
#include 	"Util.a65"
#include 	"Text.a65"
#include 	"Buffer.a65"
#include 	"MC68B50.a65"
#include 	"Simulator.a65"
;#include 	"Monitor.a65"
#include	"Dev.a65"

;#include	"Test.a65"

;========================================================================
; MODULES
;========================================================================
;
#include 	"Modules.a65"

#include 	"Irq.a65"


ROMEND = $
.echo (ROMEND - ROMBEG)
.echo " total code bytes\r"

;------------------------------------------------------------------------- hardware vectors
; FFFA,B	NMI
; FFFC,D	Reset
; FFFE,F	IRQ
.org $FFFA
.dw Nmi		; FFFA,B=> NMI		Points to Non-Maskable Interrupt handler
.dw Cold	; FFFC,D=> RESET	Points to Reset address (cold start)
.dw Irq		; FFFE,F=> IRQ		Points to Interrupt handler

.echo ($FFFA - ROMEND) / 256
.echo "/32 pages (x256) available in the 8k ROM. E000-FFFF\r"
	.END