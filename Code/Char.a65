.NOLIST
; Char
;
; Character Get/Put routines to read/write characters to memory and move pointer
;
; Char      copies the code into Z_page where they live (self modifying code)
; CharGet   (Z_Rd++) ->   A
; CharPut       A    -> (Z_Wr++)
;

#if ($>>8)==0
.LIST
;--------------------------------------------------------------------- Char Z-Page
; Z_Rd = $E9
; Z_Wr = $F5
.NOLIST
#endif

;CODEPAGE =1

#if CODEPAGE == 1
#ifndef _Char
#define _Char
.LIST
;===================================================================== CHAR
; Character Read / Write
;=====================================================================
CharRd 		.EQU 	$00E8
CharWr 		.EQU 	$00F4
Z_Rd 		.EQU 	$00E9
Z_Wr 		.EQU 	$00F5

;PAGE()

;--------------------------------------------------------------------- Char
Char
; refer to CharRdWr.a65 for the code that goes into this table
CharTbl:
;    E8  E9  EA   EB  EC   ED  EE   EF  F0   F1  F2   F3
.DB $AD,$00,$04, $E6,$E9, $D0,$02, $E6,$EA, $29,$FF, $60
;    F4  F5  F6   F7  F8   F9  FA   FB  FC   FD
.db $8D,$00,$04, $E6,$F5, $D0,$02, $E6,$F6, $60
;    FE FF
.db $00,$00 				; avail Z-pg

;--------------------------------------------------------------------- CharCopy
; Called from warm start to place CharRd and CharWr routines into z-page
CharCopy: ; Copy the CharGet & CharPut routines into Z-Page
 		LDY 	#$17
CharL 		LDA 	CharTbl,y
 		STA 	$E8,y
 		DEY
 		BPL 	CharL
 		RTS


;--------------------------------------------------------------------- CharAppendAX
CharAppendAX: ; Copy from AX to Z_Wr until a null
 		STAX(Z_Rd)
 		;-- fall through
;--------------------------------------------------------------------- CharAppend
CharAppend: ; Copy from Z_Rd to Z_Wr until a null
 		JSR 	CharRd 		; read a char
 		JSR 	CharWr 		; write it
 		CMP 	#0 		; check if zero
 		BNE 	CharAppend 	; if not, loop back for more
 		RTS 			; done

;--------------------------------------------------------------------- CharEcho
CharEcho: ; Read from Z_Rd (until null) and send to output (last nonZero char in X)
 		JSR 	CharRd 		; read a char
 		BEQ 	CharEchoX
 		TAX 			; save last non-zero char in X
 		JSR 	CharOut 	; write it
 		BRA 	CharEcho 	; if not, loop back for more
CharEchoX 	RTS 			; done

;--------------------------------------------------------------------- CharClear
CharClear: ; Clear the STRBUF to nulls and set to write to it
 		POINT(Z_Wr,STRBUF) 	; point CharWr to go into STRBUF
 		LDA 	#0
 		LDY 	#(STRBUFLEN-1)
CharClearL 	STA 	(Z_Wr),y
 		DEY
 		BNE 	CharClearL
 		STA 	(Z_Wr),y
 		RTS

;--------------------------------------------------------------------- CharPrint
CharPrint: ; send contents of STRBUF to output (CharOut)
 		LDA 	#0
 		JSR 	CharWr
 		POINT(Z_Ptr,STRBUF) 	; point Z_Ptr to the start of the string buffer
 		JMP 	PrStr 		; send it to CharOut



.echo $-Char
.echo " bytes for Char.a65\r"
#endif
#endif

;.end
