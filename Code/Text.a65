; Text.a65
;
; Text field
;
;	0:		Max		Dimension length of text (max len, including terminating zero)
;	1..FF	Data[]	characters, null terminated
;
; On entry, Z_Txt points to byte 0
;
#ifndef _Text
#define _Text
Text:

; For now just re-use Z_Ptr as the text pointer
; - later it may have it's own pointer, then we just remove this define
#define Z_Txt Z_Ptr

;--------------------------------------------------------------------- TextDim
TextDim:; Create Text at (Z_Txt) with length .A [uses AXY]
 		STA 	(Z_Txt) 	; save the length
 		;-- drop through to clear the text field
;--------------------------------------------------------------------- TextClear
TextClear:; Clear the text field pointed to by Z_Txt [uses AXY]
 		LDY 	#1 		; index to first char
 		LDA 	(Z_Txt) 	; get length
 		TAX 			; into X
 		BNE 	TextClear_L
 		RTS
TextClear_L 	LDA 	#0
 		STA 	(Z_Txt),y
 		INY
 		DEX
 		BNE 	TextClear_L
 		RTS
;--------------------------------------------------------------------- TextTerm
TextTerm:; force a terminating null in last position  Data[Max]=0
 		LDY 	(Z_Ptr)
 		LDA 	#0
 		STA 	(Z_Txt),y
 		RTS
;--------------------------------------------------------------------- TextCheck
TextCheck:; Checks that Y is in range 0 < y < (Z_Txt), C:1 if full
 		CPY 	#0
 		BEQ 	TextCheckR 	; zero so set it to 1 C:1 Z:1 N:0
 		;-- max?
 		CPY 	(Z_Txt) 	; C:1 y>=Len Z:1 Y EQ Len N:1 Y < Len
 		BMI 	TextCheckOK 	; < max so ok (Z:0 C:0 N:1)   OK if C=0
 		SEC 			; full C:1
 		RTS
 		;-- >= so force to 1
TextCheckR 	LDY 	#1 		; reset to the begining C:0(OK)
TextCheckOK 	CLC 			; C:0 = OK
 		RTS
;--------------------------------------------------------------------- TextPut
TextPut:; Text[Y++]=A (check & reset Y=1 if need be) [uses AY]
 		JSR 	TextCheck
 		STA 	(Z_Txt),y
 		INY
 		RTS
;--------------------------------------------------------------------- TextGet
TextGet:; A=Text[Y++] (check & reset Y=1 if need be) [uses AY]
 		JSR 	TextCheck
 		LDA 	(Z_Txt),y
 		INY
 		RTS
;--------------------------------------------------------------------- TextSize
TextSize:; Scan the text for the first null byte, return offset in Y [last char in A]
 		LDY 	#1 		; first char in the buffer
TextSizeL 	CPY 	(Z_Txt) 	; max index?
 		BMI 	TextSizeX 	; read at end so exit
 		LDA 	(Z_Txt),y 	; get char
 		BEQ 	TextSizeX 	; found terminating null -> exit
 		INY
 		BNE 	TextSizeL
TextSizeX 	RTS

;--------------------------------------------------------------------- TextQ
TextQ:; Add .A to the end of the text (if space available) [Use AXY]
 		TAX 			; save char to store
 		JSR 	TextSize 	; find first null N=1 if full
 		BMI 	TextQX
 		TXA 			; recall char
 		STA 	(Z_Txt),y 	; save at that point
TextQX 		RTS
;--------------------------------------------------------------------- TextDQ
TextDQ:; Remove the first char .A and shift the rest up
 		LDY 	#1
 		LDA 	(Z_Txt),y
 		PHA
 		JSR 	TextSL
 		PLA
 		RTS
;--------------------------------------------------------------------- TextSL
TextSL:; Shift text left by one char starting from .Y
 		INY
 		LDA 	(Z_Txt),y 	; get next char
 		DEY
 		STA 	(Z_Txt),y 	; save here

 		INY 			; move on to end
 		CPY 	(Z_Txt) 	; done?
 		BPL 	TextSL 	; no loop

 		LDA 	#0 		; final null
 		STA 	(Z_Txt),y

 		RTS

;--------------------------------------------------------------------- TextCopy
TextCopy:; copy text from (Z_Src) to this text object
 		LDY 	#1
TextCopyL 	JSR 	TextCheck
 		BCS 	TextCopyX 	; this text is full
 		CPY 	(Z_Src) 	; C:1 y>=Len Z:1 Y EQ Len N:1 Y < Len
 		BCS 	TextCopyX 	; source is done
 		LDA 	(Z_Src),y
 		STA 	(Z_Txt),y 	; copy across
 		BEQ 	TextCopyX 	; Null = terminator so exit
 		INY 			; next index
 		BNE 	TextCopyL
TextCopyX 	RTS



; C: r >= arg  	N: r <  arg 	Z: r == arg


;.echo $-Text
;.echo " bytes for Text\r"
#endif
