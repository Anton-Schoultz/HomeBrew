; Buffer
;
; Simple buffer system assumes ascii characters, null indicates empty
;
; (Z_Ptr) ->    0:Len+3
;               1:WriteIndex    (3..Len)
;               2:ReadIndex     (3..Len)
;               3... data[0]..data[len]
;
; Z_Ptr must be set to point at the buffer space to act on, then call routines below
; uses Z_Tmp
#ifndef _Buffer
#define _Buffer
Buffer:

BUF_WX 		= 	1
BUF_RX 		= 	2
BUF_DATA 	= 	3


;--------------------------------------------------------------------- BufInit
; A is size of the buffer to set up at (Z_Ptr)
; X,Y preserved
BufInit:; Create buffer of size .A at location pointed to by Z_Ptr and clear it
 		CLC
 		ADC 	#BUF_DATA 	; add space for header
 		STA 	(Z_Ptr) 	; set the length of the data

;--------------------------------------------------------------------- BufClear
; Wipes the buffer (pointed to by Z_Ptr) with zeroes
; X,Y preserved
BufClear:; Clear the buffer pointed to by Z_Ptr
 		PHX
 		PHY
 		LDY 	#0 		; len
 		LDA 	(Z_Ptr),y
 		TAX 			; save len in X
 		INY 			; point to WriteIndex
 		LDA 	#BUF_DATA
 		STA 	(Z_Ptr),y 	; set Write index to 3 = data[0]
 		INY
 		STA 	(Z_Ptr),y 	; set Read index to 3 = data[0]
 		INY 			; point at data[0]
 		DEX 			; x=x-3 (no no of bytes in data[]
 		DEX
 		DEX
 		LDA 	#0
BufClearL 	STA 	(Z_Ptr),y 	; zero mem
 		INY
 		DEX
 		BNE 	BufClearL
 		PLY
 		PLX
 		RTS

BufWrap 	;check if index .y is beyond the end, if so wrap it back, return index in Y
 		LDA 	(Z_Ptr),y 	; fetch the index at .y (y = 1:wr or 2:rd)
 		CMP 	(Z_Ptr)
 		BMI 	BufWrapX 	; C:1 a>=m,  Z:1 a == m, N:1 a < m
 		LDA 	#BUF_DATA 	; wrap it back
 		STA 	(Z_Ptr),y 	; store new value
BufWrapX 	TAY 			; place index into Y
 		LDA 	(Z_Ptr),y 	; fetch the character (for null test)
 		RTS

;--------------------------------------------------------------------- BufWriteBlk
; writes the byte in A to the buffer (blocks until there is space)
; X,Y preserved
BufBlkWr:; Write A to buffer (blocks until space is available)
 		STA 	Z_Tmp 		; save character

BufBlkWrL 	LDA 	Z_Tmp
 		JSR 	BufWrite
 		CMP 	#0
 		BNE 	BufBlkWrL 	; if  no space loop back
 		RTS


;--------------------------------------------------------------------- BufWrite
; writes the byte in A to the buffer EQ=True,success NE=Failure
; X,Y preserved
BufWrite:;writes .A to the buffer
 		PHY 			;save y

 		STA 	Z_Tmp 		; save character
	 	;-- get write index
 		LDY 	#BUF_WX 	; use write index
 		JSR 	BufWrap 	; check index and return it in Y, data[Y] in .A
 		BNE 	BufWriteX 	; non-zero,so buffer is full
	 	;-- ok
 		LDA 	Z_Tmp
 		STA 	(Z_Ptr),y 	; store the character
 		INY 			; bump pointer
 		TYA
 		LDY 	#BUF_WX
 		STA 	(Z_Ptr),y 	; save new write index
 		LDA 	#0 		; zero .A (So EQ=True)

BufWriteX 	PLY 			; restore y
 		RTS


;--------------------------------------------------------------------- BufRead
; Read the byte from the buffer into .A (Zero = empty)
; X,Y preserved
BufRead:;reads the buffer into .A
 		PHX
 		PHY
	 	;-- get read index
 		LDY 	#BUF_RX 	; use read index
 		JSR 	BufWrap 	; check index and return it in Y, data[Y] in .A
 		BEQ 	BufReadX 	; zero, so empty (don't move)
	 	;-- ok
 		PHA 			; save data
 		LDA 	#0 		; clear the spot for write
 		STA 	(Z_Ptr),y
	 	;-- 
 		INY 			; bump pointer
 		TYA
 		LDY 	#BUF_RX
 		STA 	(Z_Ptr),y 	; save new read index
 		PLA 			; recall data
BufReadX
 		PLY
 		PLX
 		RTS

;.echo $-Buffer
;.echo " bytes for Buffer\r"
#endif
