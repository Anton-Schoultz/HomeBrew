; Simulator.a65
;
; The 6502 Simulator simulates cpu and also some "I/O"
;
; The variable "IO_AREA" is reserved and will return the start address of the IO page.
; Data is passed through the accumulator register.
;
; IO_AREA+0: SIM_CLS (w)
; IO_AREA+1: SIM_OUT (w)
; IO_AREA+2: SIM_OUT_CHR (w)
; IO_AREA+3: SIM_OUT_HEX (w)
; IO_AREA+4: SIM_IN (r)
; IO_AREA+5: SIM_X_POS (r/w)
; IO_AREA+6: SIM_Y_POS (r/w)
;
; (w) means write only port, (r) read only, (r/w) read/write.
;
; SIM_CLS - clear terminal window, set cursor at (0,0) position.
;
; SIM_OUT - output single character interpreting control characters.
; 	Terminal can only recognize these control characters:
; 		ASCII $0D (carriage return) moving cursor to the beginning of line,
; 		ASCII $0A (line feed) moving cursor to the next line and scrolling window if necessary,
; 		ASCII $08 (backspace) moving one position to the left and erasing char below cursor.
;
; SIM_OUT_CHR - outputs single character; pass control chars as it
;
; SIM_OUT_HEX - outputs single byte as a two-digit hexadecimal number.
;
; SIM_IN - input single byte, returns 0 if there's no characters available in terminal's buffer
;     	When I/O terminal window is active, it can accept keyboard input;
;		press [Ins] key to paste clipboard's contents into terminal.
;
; SIM_X_POS - cursor X position (column).
;
; SIM_Y_POS - cursor Y position (row).
;
#ifndef _Simulator
#define _Simulator

IO_AREA			= $8000	; This must match what is set in simulator's Options screen.


;-------------------------------------------------------------------------
; set up the interface area
SIM_CLS 	= IO_AREA+0
SIM_OUT 	= IO_AREA+1
SIM_OUT_CHR = IO_AREA+2
SIM_OUT_HEX = IO_AREA+3
SIM_IN 		= IO_AREA+4
SIM_X_POS	= IO_AREA+5
SIM_Y_POS	= IO_AREA+6

;-- I/O device interface jump table offsets
;IO_INIT		= 0	;Init
;IO_CHRIN		= 3	;CharInput
;IO_CHROUT		= 6	;CharOutput
;IO_RDSTATUS	= 9 ;RdStatus
;IO_WRCMD		= 12;WrCommand

Simulator:
			jmp	SimNop			; Init
			jmp	SimGet			; Char Input
			jmp SimPut			; Char Ouput
			jmp	SimNop			; Read Status
			jmp	SimNop			; Write Command

SimNop		rts

;------------------------------------------------------------------------- SimGet
SimGet:	; input a character via the simulator
            LDA     SIM_IN
            RTS

;------------------------------------------------------------------------- SimPut
SimPut:	; output a character via the simultor
			CMP #CLS			; Form Feed = Clear Screen
			BEQ	SimCls

            STA     SIM_OUT    ; Sends A to output screen
            RTS

;------------------------------------------------------------------------- SimCls
SimCls: ; Clear Screen (FF)
			STA		SIM_CLS
			RTS


#endif


