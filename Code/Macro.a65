.NOLIST
; Macro.a65
;

#DEFINE DBUG

;--------------------------------------------------------------------- ASCII Control Codes
#DEFINE NULL	0
#DEFINE BS 	8
#DEFINE HT 	9
#DEFINE LF 	10
#DEFINE	VT	11
#DEFINE CLS	12
#DEFINE CR 	13
#DEFINE ESC	27

;--------------------------------------------------------------------- I/O device interface jump table offsets
IO_INIT 	= 0 			;Init
IO_CHRIN 	= 3 			;CharInput
IO_CHROUT 	= 6 			;CharOutput
IO_RDSTATUS 	= 9 			;RdStatus
IO_WRCMD 	= 1 			;WrCommand

#define HALT() BRK \ .db $DB ; halts simulator

; STZ does not assemble correctlym, so use this inplace for now (replace with STZ z once fixed)
#define ZZP(z) lda #0 \ sta z

;Allows outputing of text from inline, needs Util.a65 , which uses CharOut
; eg PRINT("this is some text to printout\r\n")
; NB dont use 'funny' chars like = brackets etc of assembler will choke
#Define PRINT(str) jsr _Print_ \ .db str, 0

; align to start of new page
#DEFINE PAGE()  .org (($+256) & $FF00)

; align to next 16
#DEFINE PARAGRAPH() .org (($+16) & $FFF0)

; align to n
#DEFINE ALIGN(n) .org (($+n) & ($10000-n))


#DEFINE LOW(m)  (m & $FF)

; Returns high byte of a 16 bit vale
#DEFINE HIGH(m)  m>>8
#DEFINE UPPER(m) m>>16

;--------------------------------------------------------------------- Declare variables
#define Var(name,size) name .block size
#define Short(name) name .block 1
#define Int(name) name .block 2
#define Long(name) name .block 4



#define BREAK(n) BRK \ .db n

#DEFINE PUSHAXY() pha \ phx \ phy
#DEFINE PULLAXY() ply \ plx \ pla



; Loads X,Y with the value provided
#DEFINE LDXY(nx,ny) ldx #(nx) \ ldy #(ny)

; Loads AX with 16 bit value, low->A, high->X
#DEFINE LDAX(m) lda #(m) \ ldx #HIGH(m)
; Stores 16 bit value (AX) into address A->(p), X->(p+1)
#DEFINE STAX(p) STA p \ STX p+1

; Loads AXY with 16 bit value, low->A, high->X, UPR->Y
#DEFINE LDAXY(m) lda #(m) \ ldx #HIGH(m) \ ldy #UPPER(m)
; Stores 24 bit value (AXY) into address A->(p), X->(p+1), Y-> (p+2)
#DEFINE STAXY(p) STA p \ STX p+1 \ STY p+2
; set z-page to constant value
#DEFINE POINT(z,m) lda #(m) \ sta z \ lda #HIGH(m) \ sta z+1

; treats Z-Page as a bunch of register pairs and uses Y as index to the low byte

; Stores AX into the reg pair indexed by y : A->(y), X->(y+1)
#DEFINE SETAX(n) LDY #n \ STA $00,y \ TXA \ STA $01,y

; loads ax from reg pair indexed by y
#DEFINE GETAX(n) LDY #n \ LDA $01,y \ TAX \ STA $00,y

; Adds AX to register pair at y
#DEFINE ADDAX(n) LDY #n \ CLC \ ADC $00,y \ STA $00,y \ TXA \ ADC $01,y \ STA $01,y



.LIST
