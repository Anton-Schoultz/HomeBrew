.NOLIST
; Test
;


#if ($>>8)==2
.LIST
;------------------------------- Test SysVars
Short(TestAdr)          ; low byte of test caller address
Int(TestExp)            ; test expected result
Int(TestRes)            ; test actual result

.NOLIST
;-- this defines the macro while setting up z-page (iow before any code segments)
#DEFINE TEST(z,val) LDY #z \ LDAX(val) \ jsr Test

#endif


#if CODEPAGE
#ifndef _Test
#define _Test
.LIST
;================================================================= TEST
; Testing framework
;
; Allows testing of zero page register pairs against an expected 16 bit value
; use via macro
;
; TEST(z,Expected)	z=Zpage to check, Expected value to test against
;
;-------------------------------------------------------------------------- Test
Test:; Test if RegPair at 0000,Y is equal to .A.X
            ;- save expected result
            sta     TestExp
            stx     TestExp+1
            ;- get value from regpair to check
            lda 	0,y
            sta     TestRes
            lda 	1,y
            sta     TestRes+1
            ;- compare
            cmp     TestExp+1
            bne     TestFail
            lda     TestRes
            cmp     TestExp
            bne     TestFail

            ;- OK
            jsr     TestDump
            LDAX(TestACK)
            bra     TestMsg

TestFail:   jsr     TestDump
            LDAX(TestNAK)
            ; fall to TestMsg
TestMsg:    jsr     CharAppendAX
            jmp     CharPrint

TestDump: ; dump calling address, expect, result
            ;- clear STRBUF
            jsr     CharClear
            ;
            tsx
            lda $103,x          ;lo
            sta TestAdr
            lda $104,x          ; hi
            tax
            ;- adjust address to find start of the test call
            sec
            lda TestAdr
            sbc #8              ; start of the test code sequence
            sta TestAdr
            bcs TestDump0
            dex
TestDump0   jsr TextHex         ; print the return address in hex
            lda TestExp
            ldx TestExp+1
            jsr TextHex         ; print expected value in hex
            ;
            lda TestRes         ; result in Hex
            ldx TestRes+1
            ; fall through to print result as hex
TextHex:    jsr CvtAXHex        ; write AX to STRBUF as hex digits
            lda #' '
            jmp CharWr          ; print a space and return


TestACK .DB " OK\r\n",0

TestNAK .DB " ** FAIL **\r\n",0

;.echo $-Test
;.echo " bytes for Test\r"
#endif
; end of Test
#endif
