.NOLIST
; Test
;
#if ($>>8)==0
.LIST
;--------------------------------------------------------------------- Test Z-Pg
Int(TestAdr) 	; low byte of test caller address
Int(TestExp) 	; test expected result
Int(TestRes) 	; test actual result

.NOLIST
;--------------------------------------------------------------------- Test Macros

; test to see if Z-Pg has the provided value -reports call address, ZPG, expected, value & pass/fail
#DEFINE TEST(z,val) LDY #z \ LDAX(val) \ jsr Test

; compare momory (mem) against expected values table(exp) for (len)th.
#DEFINE TESTMEM(mem,exp,len) POINT(TestAdr,mem) \ POINT(TestExp,exp) \ LDX #len \ jsr TestMem


#endif


#if CODEPAGE == 1
#ifndef _Test
#define _Test
.LIST
;===================================================================== TEST
; Testing framework
;
; Allows testing of zero page register pairs against an expected 16 bit value
; use via macro
;
; TEST(z,Expected)	z=Zpage to check, Expected value to test against
;
;--------------------------------------------------------------------- Test
Test 		; Test if RegPair at 0000,Y is equal to .A.X
 		;-- save expected result
 		STA 	TestExp
 		STX 	TestExp+1
 		;-- get value from regpair to check
 		LDA 	0,y
 		STA 	TestRes
 		LDA 	1,y
 		STA 	TestRes+1
 		;-- compare
 		CMP 	TestExp+1
 		BNE 	TestFail
 		LDA 	TestRes
 		CMP 	TestExp
 		BNE 	TestFailDmp
 		;-- OK
 		JSR 	TestDump
 		;-- fall through
;--------------------------------------------------------------------- TestEQ
TestEQ: ; Output EQ:'OK'or NE:'Fail' based on EQ flag
 		PHP
 		JSR 	CharClear
 		PLP
TestEQMsg	BNE 	TestFail
 		;-- fall through to OK
;--------------------------------------------------------------------- TestOK
TestOK: ; Print " OK\r\n"
 		LDAX(TestACK)
 		BRA 	TestMsg
;--------------------------------------------------------------------- TestFailDmp
TestFailDmp 	JSR 	TestDump
;--------------------------------------------------------------------- TestFail
TestFail: ; Print " ** FAIL **\r\n"
 		LDAX(TestNAK)
 		;-- fall to TestMsg
TestMsg 	JSR 	CharAppendAX
 		JMP 	CharPrint
;--------------------------------------------------------------------- TestDump
TestDump: ; dump calling address, expect, result
 		;-- clear STRBUF
 		JSR 	CharClear
 		;--
 		TSX
 		LDA 	$103,x 		;lo
 		STA 	TestAdr
 		LDA 	$104,x 		; hi
 		TAX
 		;-- adjust address to find start of the test call
 		SEC
 		LDA 	TestAdr
 		SBC 	#8 		; start of the test code sequence
 		STA 	TestAdr
 		BCS 	TestDump0
 		DEX
TestDump0 	JSR 	TextHex 	; print the return address in hex
 		;-- expected
 		LDA 	TestExp
 		LDX 	TestExp+1
 		JSR 	TextHex 	; print expected value in hex
 		;--
 		LDA 	TestRes 	; result in Hex
 		LDX 	TestRes+1
 		;-- fall through to print result as hex
TextHex:  	JSR 	CvtAXHex 	; write AX to STRBUF as hex digits
 		LDA 	#' '
 		JMP 	CharWr 		; print a space and return

;--------------------------------------------------------------------- TestMem
TestMem: ; comare memory at TestAdr vs Memory at TestExp for X bytes
 		PHX
 		JSR 	CharClear
 		PLX
 		LDY 	#0
TestMemL 	LDA 	(TestExp),Y 	; expected byte
 		PHA
 		JSR 	CvtAHex 	; output as hex
 		lda #' '
 		jsr	CharWr
 		PLA
 		CMP 	(TestAdr),Y 	; compare to actaul
 		BNE 	TestMemR 	; mismatch
 		;--
 		INY
 		DEX
 		BNE 	TestMemL
 		;-- end all the same EQ=1
TestMemR 	; output result EQ / NE
 		BEQ 	TestMemX 	; ok, just output the message
 		;-- fail with index
 		PHP 			; save result
 		PHY
 		;-- output index in hex in braces
 		LDA 	#'['
 		JSR 	CharWr
 		TYA
 		JSR 	CvtAHex 	;
 		LDA 	#']'
 		JSR 	CharWr
 		;-- output actual
 		PLY
 		CMP 	(TestAdr),Y
 		JSR 	CvtAHex
 		;--
 		PLP 			; restore result (EQ=0)
TestMemX 	JMP 	TestEQMsg

TestACK 	.DB 	" OK\r\n",0
TestNAK 	.DB 	" ** FAIL **\r\n",0
;.echo $-Test
;.echo " bytes for Test\r"
#endif
; end of Test
#endif

;#include "TestUtil.a65"
#include "TestCalc.a65"
