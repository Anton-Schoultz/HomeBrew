; VCPU
;
;	0123 4567 89AB CDEF
;  $#x  0123 4567 89:; <=>?
;  $4x	@ABC DEFG HIJK LMNO
;  $5x	PQRS TUVW XYZ[ \]^_
;
;  @L,@H OP TL P1 P2
;
; Returns high byte of a 16 bit vale
#DEFINE HI(m)  (m>>8)
#DEFINE LO(m)  (m&$FF)

; implied
#DEFINE VINSTR(fn) .db (fn&$FF)
; single 8 bit arg
#DEFINE VINSTR1(fn,p1) .db LO(fn), LO(p1)
; 16 bit arg
#DEFINE VINSTR2(fn,m) .db LO(fn), LO(m), HI(m)

#DEFINE PAGE()  .org (($+256) & $FF00)
#DEFINE ALIGN() .org (($+9) & $FFF8)

.org 0
VOP 		.BLOCK 	1 		; OP	OpCode
VTBL 		.BLOCK 	2 		; TBL	Dispatch table

VREG0 		.BLOCK 	8 		; low byte of registers
VREG1 		.BLOCK 	8 		; high byte of registers


VFetch: ; fetch next byte from stream (Self modifying code in Z-Page)
VPC 		= $+1
 		LDA 	$8000 		; fetch from memory
 		INC 	VPC
 		BNE 	FetchX
 		INC 	VPC+1
FetchX 		RTS


.org $400
VDo:  		JSR 	VFetch 		; get Op-code
 		STA 	VOP
 		AND 	#$F8 		; mask off xxxx.x000
 		STA 	VTBL 		; set low byte of jmp address from opcode
 		LDA 	VOP 		;
 		AND 	#$07 		; mask off 0000.0xxx
 		TAX 			; save in X
 		JMP 	(VTBL) 		; jump to dispatcher


VPGTBL: ; table of high bytes for jump tables
.db HI(VDISP0)
;.db HI(VDISP1)




;===================================================================== VDISP0
PAGE()
VDISP0: ; Dispatch Zero

ALIGN()
V0_Rst: ; reset to dispatcher[0] (replicate in all Dispatchers)
 		LDA 	VPGTBL 		; high byte fo dispatcher 0
 		STA 	VTBL+1
 		RTS
;--------------------------------------------------------------------- V0_Tbl
ALIGN()
V0_Tbl: ; select table n (n is 0-7, in .X)
 		LDA 	VPGTBL,x 	; look up dispatcher's high byte address
 		STA 	TBL+1 		; save it in interpretter data
 		RTS
;--------------------------------------------------------------------- V0_Load
ALIGN()
V0_Load: ; Load a value
#define VLOAD(r,m) .db LO(V0_Load)|(r&7), LO(m), HI(m)
 		JSR 	VFetch 		; get low byte
 		STA 	VREG0,X
 		JSR 	VFetch 		; get highbyte
 		STA 	VREG1,X
 		RTS

;===================================================================== VDISP1
PAGE()
VDISP1: ; Dispatch 1




V_TEST: ; test VCPU
 		VLOAD(3,$1234)


.export xyz
.end

