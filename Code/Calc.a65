.NOLIST
; Calc
;
; -- these are in unpacked form, so have own exp(2s) and sign bytes
;	once packed they come down to 4 byte format ML,MH,MU,EXP
; NA	Primary accumulator
; NB	Secondary accumulator
; NR	Resultant accumulator
; NT	Temp accumulator
;
; _ML	[0]Mantissa Low 	(also lo of int)
; _MH	[1]Mantissa High	(also hi of int)
; _MU	[2]Mantissa Upper  	(upper 24bit int)
; _EXP	[3]Base 10 exp
; _SGN	[4]When unpacked, sign is separate and Exp is 2's compliment of base 10 exp
;
; float values are unpacked when you stick them in here,
; values are pushed/popped and manipulated in unpacked form,
;
; pack before you store in main memory
;
; parsing from string includes 'normalise' to try and keep as ~E00

#define RES_SZ 15

#if ($>>8)==0
.LIST
;--------------------------------------------------------------------- Calc Z-Page
PARAGRAPH()
Var(NA,5) 	; Top-Of-Stack
; ---
ALIGN(8)
Var(NB,5) 	; Next item on stack

Short(SGN) 	; sign
Short(EXP) 	; exponent
Short(CSP) 	; Calc stack pointer (00->0F)

Short(NUM) 	; number after the 'E'
Short(DIG) 	; digits counter

Short(RND) 	; digits counter

; ----
PARAGRAPH()
Var(NR,RES_SZ) 	; Result (also for convert to string)
; ----
PARAGRAPH()
Var(NT,RES_SZ) 	; Temp


#DEFINE CSTKSZ  15

_ML 		= 0
_MH 		= 1
_MU 		= 2
_EXP 		= 3
_SGN 		= 4

NA_ML 		= NA+_ML 		; ML	Mantissa Low 	(also lo of int)
NA_MH 		= NA+_MH 		; MH	Mantissa High	(also hi of int)
NA_MU 		= NA+_MU 		; MU	Mantissa Upper  (upper 24bit int)
NA_EXP 		= NA+_EXP 		; EXP	Base 10 exp
NA_SGN 		= NA+_SGN 		; SGN	When unpacked, siign is separate and Exp is 2's compliment of base 10 exp

#DEFINE LOAD_NA(m,exp) lda #LOW(m) \ STA NA_ML \ lda #HIGH(m) \ sta NA_MH \ lda #UPPER(m) \ STA NA_MU \ lda #exp \ STA NA_EXP \ lda #0 \ sta NA_SGN


.export NA,NB,NR,NT
.export CSP,SGN,DIG,EXP,NUM

.NOLIST
#endif

#if ($>>8)==1
.LIST
;--------------------------------------------------------------------- Calc stack space
; Calc stack is at bottom part of stack space, growing upwards
; CPU call stack grows downwards
; this is a split stack
Var(CSTK0,16) 	; _ML
Var(CSTK1,16) 	; _MH
Var(CSTK2,16) 	; _MU
Var(CSTK3,16) 	; _EXP if this is zero, then the number is an integer
Var(CSTK4,16) 	; _SGN
.NOLIST
#endif

#if ($>>8)==2
.LIST
;--------------------------------------------------------------------- Calc SysVar

.NOLIST
#endif


#if CODEPAGE
#ifndef _Calc
#define _Calc



.LIST
PAGE() 		; new page
;===================================================================== CALC
Calc 		;Initialise calculator stack, and zero NA (unpacked form) [A]
 		ZZP(CSP) 		; Init calc stack pointer to zero
;--------------------------------------------------------------------- CalcZero
CalcZero: ; Set NA to m0000 e00 s00 (uppacked form) [A]
 		LDA 	#$0 		; +ve, 10^0
 		STA 	NA_ML
 		STA 	NA_MH
 		STA 	NA_MU
 		STA 	NA_EXP 		; 10^ 0
 		STA 	NA_SGN 		; $00 => +ve
 		RTS
;--------------------------------------------------------------------- CalcPack
CalcPack: ; Pack NA_EXP (from 2s exp and SGN) [A]
 		LDA 	NA_EXP
 		CLC
 		ADC 	#$40 		; add offset
 		STA 	NA_EXP
 		;-- check SGN
 		LDA 	NA_SGN
 		BEQ 	CalcPackP 	; +ve so ok
 		LDA 	#0
 		STA 	NA_SGN
 		LDA 	#$80
 		ORA 	NA_EXP
 		STA 	NA_EXP 		; save packed version
CalcPackP 	; check for zero
 		LDA 	NA_ML
 		ORA 	NA_MH
 		ORA 	NA_MU
 		BNE 	CalcPackX
 		STA 	NA_EXP 		; zero EXP when packed means ZERO
CalcPackX 	RTS

;--------------------------------------------------------------------- CalcUnpack
; when a value is brought in from a memory variable,
; it must be unpacked before we can work with it
CalcUnpack: ; Unpack NA_EXP (into 2s exp and SGN) [A]
 		ZZP(NA_SGN) 		; assume +ve ($00)
 		LDA 	NA_EXP
 		BPL 	CalcUnpack1
 		DEC 	NA_SGN 		; minus so set sign as $FF
CalcUnpack1 	AND 	#$7F 		; get power of 10 (with offset)
 		SEC
 		SBC 	#$40 		; subtract offset
 		STA 	NA_EXP 		; save as 2's comp
 		RTS

;--------------------------------------------------------------------- CalcDup
CalcDup: ; Duplicate NA (=Push NA)
;--------------------------------------------------------------------- CalcPush
CalcPush: ; Push NA onto the stack [AX] !StackErr
 		LDX 	CSP
 		LDA 	NA+_ML
 		STA 	CSTK0,X
 		LDA 	NA+_MH
 		STA 	CSTK1,X
 		LDA 	NA+_MU
 		STA 	CSTK2,X
 		LDA 	NA+_EXP
 		STA 	CSTK3,X
 		LDA 	NA+_SGN
 		STA 	CSTK4,X
 		;-- increase stack pointer
 		INC 	CSP 		; next location
 		LDA 	#CSTKSZ 	; check stack size
 		CMP 	CSP 		; C:(A GE mem) Z:A EQ m  N:m GT A
 		BCS 	CalcPushX 	; CSTKSZ is > CSP so OK
CalcStkErr 	THROW(E_CSTK) 		; if so, throw stack error
CalcPushX 	RTS
;--------------------------------------------------------------------- CalcDrop
CalcDrop: ; Pop item into NA item variable [AX]!StackErr
 		JSR 	CalcPop
 		;--
 		LDA 	CSTK0,X
 		STA 	NA+_ML
 		LDA 	CSTK1,X
 		STA 	NA+_MH
 		LDA 	CSTK2,X
 		STA 	NA+_MU
 		LDA 	CSTK3,X
 		STA 	NA+_EXP
 		LDA 	CSTK4,X
 		STA 	NA+_SGN
 		RTS
;--------------------------------------------------------------------- CalcPop
CalcPop: ; Reduce stack pointer, .X points to 'popped' item [X] !StackErr
 		;-- force CSP to 0-15
 		DEC 	CSP
 		BMI 	CalcStkErr 	; wrapped arround, so stack error
 		LDX 	CSP
 		RTS
;--------------------------------------------------------------------- CalcNext
CalcNext: ; Pop item into NB item variable
 		JSR 	CalcPop
 		;--
 		LDA 	CSTK0,X
 		STA 	NB+_ML
 		LDA 	CSTK1,X
 		STA 	NB+_MH
 		LDA 	CSTK2,X
 		STA 	NB+_MU
 		LDA 	CSTK3,X
 		STA 	NB+_EXP
 		LDA 	CSTK4,X
 		STA 	NB+_SGN
 		RTS

;--------------------------------------------------------------------- CalcSL
CalcSL: ; x2 shift the value pointed to by X one place to the left
 		ASL 	_ML,X
 		ROL 	_MH,X
 		ROL 	_MU,X
 		RTS
;--------------------------------------------------------------------- CalcSR
CalcSR: ; /2 shift the value pointed to by X one place to the right
 		CLC
 		ROR 	_MU,X
 		ROR 	_MH,X
 		ROR 	_ML,X
 		RTS

;--------------------------------------------------------------------- CalcIncr
CalcIncr: ; increment the mantissa of NA
 		INC 	NA_ML
 		BNE 	CalcIncrX
 		INC 	NA_MH
 		BNE 	CalcIncrX
 		INC 	NA_MU
CalcIncrX 	RTS

;--------------------------------------------------------------------- CalcCopy
CalcCopy: ; Copy Exponent, Sign and mantissa from X to Y [A]
 		LDA 	_EXP,X
 		STA 	_EXP,Y
 		LDA 	_SGN,X
 		STA 	_SGN,Y
CalcCpyMan: ; Copy the mantissa part from X to Y
 		LDA 	_ML,X
 		STA 	_ML,Y
 		LDA 	_MH,X
 		STA 	_MH,Y
 		LDA 	_MU,X
 		STA 	_MU,Y
 		RTS
;--------------------------------------------------------------------- CalcA2B
CalcA2B: ; Copy NA to NB
 		PUSHAXY()
 		LDX 	#NA
 		LDY 	#NB
 		JSR 	CalcCopy
 		PULLAXY()
 		RTS
;--------------------------------------------------------------------- CalcB2A
CalcB2A: ; Copy NB to NA
 		PUSHAXY()
 		LDX 	#NB
 		LDY 	#NA
 		JSR 	CalcCopy
 		PULLAXY()
 		RTS
;--------------------------------------------------------------------- CalcR2A
CalcR2A: ; Copy NR to NA
 		PUSHAXY()
 		LDX 	#NR
 		LDY 	#NA
 		JSR 	CalcCopy
 		PULLAXY()
 		RTS
;--------------------------------------------------------------------- CalcT2A
CalcT2A: ; Copy Temp -> A
 		PUSHAXY()
 		LDX 	#NT
 		LDY 	#NA
 		JSR 	CalcCopy
 		PULLAXY()
 		RTS
;--------------------------------------------------------------------- CalcA2T
CalcA2T: ; Copy A -> Temp
 		PUSHAXY()
 		LDY 	#NT
 		LDX 	#NA
 		JSR 	CalcCopy
 		PULLAXY()
 		RTS

;--------------------------------------------------------------------- CalcSetI
; place a 16bit signed number [AX] into NumA
CalcSetI: ; NumA = AX (16 bit signed integer A=lo,X=hi) [AY]
 		STA 	NA+_ML 		; _ML=A
 		STX 	NA+_MH 		; _MH=X
 		LDA 	#0
 		STA 	NA+_MU 		; _MU=0
 		STA 	NA+_EXP 	; _EXP = 0 *10^0 (*1=int)
 		STA 	NA+_SGN 	; _SGN = 0 (+ve)
 		;-- check the sign
 		TXA
 		BMI 	CalcSetINeg
 		RTS 			; +ve all good
CalcSetINeg 	;-- negative value
 		LDA 	#$FF
 		STA 	NA+_MU 		; sign extend to upper
 		LDX 	#NA
 		;--
 		BRA 	CalcNegX 	; go negate the value

;--------------------------------------------------------------------- CalcAbs
; make the mantissa positive, ready to pack
; X points to NA / NB
; The value must be in unpacked format
; Mantissa is check for being negative (2s), made positive by complimenting
; and flipping the sign
CalcAbsX: ; make sure NA_MAN is +ve, Return sign in Y (0=+, 1=-)
 		LDA 	_MU,X 		; get upper byte into A
 		BPL 	CalcNegXX 	; -ve, so compliment mantissa & flip sign
 		;-- fall through to negate the value
;--------------------------------------------------------------------- CalcCmplAX
CalcNegX: ; Two's compliment of value at X [A]
 		;-- flip sign
 		LDA 	#$FF
 		EOR 	_SGN,X
 		STA 	_SGN,X
 		;--
 		;-- exor mantissa L
 		LDA 	#$FF
 		EOR 	_ML,X
 		STA 	_ML,X
 		;-- H
 		LDA 	#$FF
 		EOR 	_MH,X
 		STA 	_MH,X
 		;-- U
 		LDA 	#$FF
 		EOR 	_MU,X
 		STA 	_MU,X
 		;-- incr mantissa
 		INC 	_ML,X
 		BNE 	CalcNegXX
 		INC 	_MH,X
 		BNE 	CalcNegXX
 		INC 	_MU,X
 		BNE 	CalcNegXX
CalcNegXX 	LDY 	_SGN,X 		; return with the sign in Y
 		RTS

;--------------------------------------------------------------------- CalcAddMan
CalcAddMan: ; Add manitssa parts [X] = [Y] + [X]	(S24)
 		CLC
 		LDA 	_ML,Y
 		ADC 	_ML,X
 		STA 	_ML,X
 		;--
 		LDA 	_MH,Y
 		ADC 	_MH,X
 		STA 	_MH,X
 		;--
 		LDA 	_MU,Y
 		ADC 	_MU,X
 		STA 	_MU,X
 		;--
 		RTS
;--------------------------------------------------------------------- CalcSubMan
CalcSubMan: ; Subtract manitssa parts [X] = [Y] - [X] 	(S24)
 		SEC
 		LDA 	_ML,Y
 		SBC 	_ML,X
 		STA 	_ML,X
 		;--
 		LDA 	_MH,Y
 		SBC 	_MH,X
 		STA 	_MH,X
 		;--
 		LDA 	_MU,Y
 		SBC 	_MU,X
 		STA 	_MU,X
 		;--
 		RTS

;--------------------------------------------------------------------- CalcMul10A
CalcMul10A: ; A = A * 10 (uses NT=Temp)
 		LDX 	#NA
;--------------------------------------------------------------------- CalcMul10
CalcMul10: ; [X] = [X] * 10 (uses NT=Temp, preserves AXY)
 		PUSHAXY() 		; save all
 		LDY 	#NT
 		JSR 	CalcCopy 	; N[X] -> TMP
 		JSR 	CalcSL
 		JSR 	CalcSL
 		JSR 	CalcAddMan
 		JSR 	CalcSL
 		PULLAXY()
 		RTS

;;--------------------------------------------------------------------- CalcD10NA
CalcD10NA: ; NA = NA / 10, remainder in A [AXY]
 		;-- used by CalcStr
 		LDX 	#NA

;--------------------------------------------------------------------- CalcD10
CalcD10: ; Divide value at 0,X  by 10, remainder in A [AY]
 		LDY 	#24 		; make this 24 for 24 bit version
 		LDA 	#0
 		CLC
CalcD101 	ROL 	a
 		CMP 	#10
 		BCC 	CalcD102
 		SBC 	#10
CalcD102 	ROL 	_ML,X 		; NA
 		ROL 	_MH,X 		; NA+_MH
 		ROL 	_MU,X 		; NA+2  - include for 24 bit version
 		DEY
 		BPL 	CalcD101
 		RTS

;--------------------------------------------------------------------- CalcParse
; Read string (CharRd) and parse into number value -> NA
CalcParse: ; Read string (CharRd) and parse into number value -> NA
 		JSR 	CalcZero 	; Set NA to m0000 e00 s00 (uppacked form)
 		STA 	DIG 		; zero digit counter
 		STA 	RND 		; haven't rounded yet

CalcParseL 	JSR 	CharRd 		; Read next character in
 		BEQ 	CalcParseX 	; null -> exit
 		;-- '+' ignore (default sign) get next
 		CMP 	#'+'
 		BEQ 	CalcParseL 	; +ve, ok, next char
 		;-- '-' note sign and get next
 		CMP 	#'-'
 		BNE 	CalcParse1
 		;-- place sign $FF in NA_EXP
 		LDA 	#$FF 		; -ve, E=0
 		STA 	NA_SGN
 		BRA 	CalcParseL
CalcParse1 	;-- check for '.'
 		CMP 	#'.'
 		BNE 	CalcParse2
 		;-- decimal point - set up to count digits after it
 		LDA 	#$80
 		STA 	DIG
 		BRA 	CalcParseL 	; loop back for next char
CalcParse2 	; check for 'E' notation  (must use uppercase 'E')
 		CMP 	#'E'
 		BNE 	CalcParse3
 		;--
 		JSR 	CalcExp 	; read [+/-] digits into A as signed short
 		CLC
 		ADC 	NA_EXP
 		STA 	NA_EXP
 		JMP 	CalcParseX 	; jump out to adjust based on digits after '.'
CalcParse3 	; check for digits 0-9
 		CMP 	#$3A
 		BPL 	CalcParseX 	; >'9' -> exit
 		CMP 	#$30
 		BMI 	CalcParseX 	; <'0' -> exit
 		;-- we have a digit in .A
 		TAX 			; save digit character
 		;-- count digits after the decimal point
 		LDA 	DIG
 		BPL 	CalcParse4 	; not decimal point yet, so don't count
 		INC 	DIG 		; count another digit after the point
CalcParse4 	;-- another digit
 		;-- check if we have space for another digit in NA
 		LDA 	NA_MU 		; top byte of NA
 		AND 	#$F0
 		BEQ 	CalcParse5 	; got space so go mult x 10 and add
 		;-- NA is full so adjust E
 		INC 	NA_EXP

; 		;-- check for rounding
 		LDA 	RND
 		BNE 	CalcParseL 	; already rounded

 		;-- check for and apply rounding
 		STX 	RND 		; save rounding character
 		CPX 	#'5' 		; compare with 5
 		BCC 	CalcParseL 	; less than 5 so just get the next one
 		JSR 	CalcIncr 	; increment the mantissa (round off)

 		;-- loop back for more
 		BRA 	CalcParseL 	; loop back for more digits


CalcParse5 	; we have space, so roll it in (leaving E at 0 for now)
 		TXA 			; recall the digit character
 		JSR 	CalcMul10A 	; NA = NA * 10 (preserves AXY)
 		;-- add digit value
 		CLC
 		AND 	#$0F
 		ADC 	NA_ML 		; add digit value to NA
 		STA 	NA_ML
 		BCC 	CalcParseL
 		INC 	NA_MH
 		BCC 	CalcParseL
 		INC 	NA_MU
 		BRA 	CalcParseL

CalcParseX 	; done with valid characters, adjust E based on places after the point
 		LDA 	DIG 		; bit 7 is '1' if we had a '.'
 		BPL 	CalcParseX1 	; no '.' so we're done
 		AND 	#$7F 		; mask off the flags
 		STA 	DIG
 		;-- subtract places after point from E
 		SEC
 		LDA 	NA_EXP
 		SBC 	DIG
 		STA 	NA_EXP 		; EXP = EXP - DIG
CalcParseX1 	; done convertion, try to keep as integer value (E=0)
 		;-- fall through to 'Normalise' ;JMP 	CalcNorm
;--------------------------------------------------------------------- CalcNorm
CalcNorm: ; 'Normalise' NA  (Try to get the EXP to zero)
 		LDA 	NA_EXP
 		BEQ 	CalcNormX 	; EXP=0 already , so we're done
 		BMI 	CalcNormR 	; EXP<0 so shift to the right
 		;-- exp is >0 so shift left if possible
 		LDA 	NA_MU
 		BNE 	CalcNormX 	; no space - so exit
 		JSR 	CalcMul10 	; X * 10
 		DEC 	NA_EXP 		; EXP--
 		BRA 	CalcNorm
CalcNormR 	; digits to the right, incr exp
 		LDX 	#NA
 		LDY 	#NT
 		JSR 	CalcCopy 	; copy NA -> Temp
 		;--
 		LDX 	#NT 		; point at temp
 		JSR 	CalcD10 	; try Temp/10
 		AND 	#$FF 		; remainder = zero?
 		BNE 	CalcNormX 	; no, so leave it alone
 		INC 	NT+_EXP 	; bump up exponent
 		;-- copy Temp -> NA
 		JSR 	CalcT2A
 		BRA 	CalcNorm
CalcNormX 	RTS

;--------------------------------------------------------------------- CalcExp
CalcExp: ; Reads [+/-][0..9*] return value in A (no error checking)
 		ZZP(NUM) 		; $64 $xx
 		ZZP(SGN) 		; assume +ve
CalcExpL
 		JSR 	CharRd
 		BEQ 	CalcExpX
 		;-- '+' ignore (default sign) get next
 		CMP 	#'+'
 		BEQ 	CalcExpL 	; +ve, ok, next char
 		;-- '-' note sign and get next
 		CMP 	#'-'
 		BNE 	CalcExp1
 		;-- set sign flag
 		LDA 	#$FF
 		STA 	SGN
 		BRA 	CalcExpL
CalcExp1 	; check for valid digit '0'..'9'
 		CMP 	#$3A
 		BPL 	CalcExpX 	; >'9' -> exit
 		CMP 	#$30
 		BMI 	CalcExpX 	; <'0' -> exit
 		;-- we have a digit in .A
 		TAY 			; save digit in Y
 		LDA 	NUM
 		ASL 	A 		; A = NUM * 2
 		ASL 	A 		; A= NUM *4
 		CLC
 		ADC 	NUM 		; A = NUM * 5
 		ASL 	A
 		STA 	NUM 		; NUM = NUM * 10
 		;--
 		TYA 			; get digit back
 		AND 	#$0F 		; strip the value out
 		CLC
 		ADC 	NUM
 		STA 	NUM 		; NUM = NUM + digit
 		;--
 		BRA 	CalcExp1 	; get more digits
CalcExpX 	; we have the value in NUM, and sign in SGN
 		LDA 	SGN
 		BPL 	CalcExpX1 	; poistive
 		;-- convert to 2's complement
 		LDA 	NUM
 		EOR 	#$FF
 		INC 	A
 		STA 	NUM
CalcExpX1 	LDA 	NUM
 		RTS

;--------------------------------------------------------------------- CalcStr
CalcStr: ; convert Unpacked NA to string in NR (Padded with zeroes)
 		LDX 	#10
 		LDA 	#0
 		STA 	STRBUF,x
 		DEX
 		STA 	STRBUF,x
 		DEX
CalcStrL 	;- num/10 remainder as digit
 		PHX 			; save output index
 		JSR 	CalcD10NA 	; div NA_LHU by 10, remainder in A
 		PLX 			; recall index
 		ORA 	#'0' 		; convert remainder to a digit
 		STA 	STRBUF,x 	; store the digit
 		DEX 			; back-up one pos to the left
 		BPL 	CalcStrL 	; loop until done
 		;-- Place sign in NR[0] based on SGN
 		LDA 	#'+'
 		LDY 	NA_SGN
 		BPL 	CalcStrX
 		LDA 	#'-'
CalcStrX 	STA 	NR 		; place sign at Res[0]
 		RTS

;--------------------------------------------------------------------- CalcStrF
CalcStrF: ; Covert unpacked float to string in NR
;NR  0   1   2   3   4   5   6   7   8   9   10   11   12
;     SS '0' '3' '2' '7' '6' '7'  00
 		;-- convert mantisa part (with sign)
 		JSR 	CalcStr 	; mantissa to string in Result

 		LDY 	#1 		; reading from .x
 		LDX 	#1 		; writting to .y
 		LDA 	NA_EXP
 		BNE 	CalcStrF1
 		RTS 			; exponent is zero so return as is
 		;-- find first non '0'
CalcStrF1 	LDA 	STRBUF,x 	; get the digit
 		CMP 	#'0'
 		BNE 	CalcStrF2
 		;-- skip leading zeroes
 		INX
 		CPX 	#6 		; want at least one digit
 		BNE 	CalcStrF1 	; not all yet, loop back for next digit
 		;--
 		LDA 	STRBUF,x 	; first non-zero digit
CalcStrF2 	;-- first non-zero digit
 		STA 	STRBUF,y 	; save 1st digit
 		;-- move on
 		INY
 		INX
 		LDA 	STRBUF,x
 		BEQ 	CalcStrF4 	; end of string ->F4
 		;-- place the point
 		LDA 	#'.'
 		STA 	STRBUF,y
 		INY
CalcStrF3 	;-- copy & adjust E
 		LDA 	STRBUF,x
 		BEQ 	CalcStrF4 	; null = done
 		STA 	STRBUF,y
 		INX
 		INY
 		INC 	NA_EXP 		; adjust Exp based on how many digits we copy
 		CPX 	#9 		; done?
 		BNE 	CalcStrF3 	; loop to copy the rest of the digits
CalcStrF4 	;-- now for the E
 		LDA 	NA_EXP
 		BEQ 	CalcStrFX 	; if E is zero then leave it off
 		LDA 	#'E'
 		STA 	STRBUF,y
 		INY
 		;-- exp sign
 		LDX 	#'+'
 		LDA 	NA_EXP
 		BPL 	CalcStrF5
 		LDX 	#'-'
 		EOR 	#$FF
 		INC 	A
CalcStrF5 	STA 	NA_EXP
 		;-- EXP sign to NR[y++]
 		TXA
 		STA 	STRBUF,y
 		INY
 		;-- EXP to bcd and append to result
 		LDA 	NA_EXP
 		JSR 	Bin2Dec
 		PHA 			;Save A for LSD
 		LSR 	a
 		LSR 	a
 		LSR 	a 		; MSD to LSD position
 		LSR 	a
 		ORA 	#'0'
 		STA 	STRBUF,y
 		INY
 		PLA 			; Restore A and then
 		AND 	#$0F
 		ORA 	#'0'
 		STA 	STRBUF,y
 		INY
CalcStrFX 	LDA 	#0
 		STA 	STRBUF,Y
 		RTS

;--------------------------------------------------------------------- CvtFloat
CvtFloat: ; Convert unpacked NA to Float String and write to output (CharWr)
 		;-- save Value A into Temp
 		JSR 	CalcA2T 	; X -> Temp
 		;-- convert to string in result
 		JSR 	CalcStrF

 		;-- send result to screen
 		LDAX(STRBUF) 		; point to result
 		JSR 	PrStrAX 	; echo it to screen
; 		; append result to output
; 		LDAX(NR)
; 		JMP 	CharAppendAX 	; append contents of NR to the output buffer

 		JSR 	CalcT2A 	; copy back from temp
 		RTS
;--------------------------------------------------------------------- CalcZeroR
CalcZeroR: ; zero the result field
 		LDX 	#RES_SZ
 		LDA 	#0
CalcZeroRL 	STA 	NR,X
 		DEX
 		BPL 	CalcZeroRL
 		RTS
;--------------------------------------------------------------------- CalcResSL
CalcResSL: ; shift result left
 		LDY 	#RES_SZ
 		LDX 	#0
 		CLC
CalcResSLL 	ROL 	NR,X
 		INX
 		DEY
 		BPL 	CalcResSLL
 		RTS
;--------------------------------------------------------------------- CalcResSR
CalcResSR: ; shift result right
 		LDX 	#RES_SZ
 		CLC
CalcResSRL 	ROR 	NR,X
 		DEX 			; does not affect CY
 		BPL 	CalcResSRL
 		RTS



;=====================================================================
MARKER: ; MARKER
;=====================================================================

;--------------------------------------------------------------------- CalcMul
CalcMul: ; NA = NB * NA	(16 bit signed integer)
; 726 cycles for 123 * 27
 		JSR 	CalcNext 	; pop into NB
; 		JSR 	CalcSign
 		;-- Initialize NR to 0
 		JSR 	CalcZeroR
 		LDX 	#24 		;There are 24 bits in NA
CalcMul1 	; -- Shift NA to the right, lowest bit into C
 		LSR 	NA+_MU
 		ROR 	NA+_MH
 		ROR 	NA+_ML
 		;--
 		BCC 	CalcMul2 	;0 or 1?
 		;-- bit is 1 so add
 		CLC
 		LDA 	NB+_ML
 		ADC 	NR+3
 		STA 	NR+3
 		;--
 		LDA 	NB+_MH
 		ADC 	NR+4
 		STA 	NR+4
 		;--
 		LDA 	NB+_MU
 		ADC 	NR+5
 		STA 	NR+5
 		;--
CalcMul2 	;shift result right (equivalent to shift B left )
 		PHX
 		JSR 	CalcResSR
 		PLX
 		;-- loop for each bit
 		DEX
 		BNE 	CalcMul1
 		;-- product is now in RES[0..5]
 		;-- work out resulting sign
 		LDA 	NA+_SGN
 		EOR 	NB+_SGN
 		STA 	SGN
 		;-- work out exponent
 		CLC
 		LDA 	NA+_EXP
 		ADC 	NB+_EXP
 		STA 	EXP
 		;-- now adjust result field and EXP
 		JSR 	CalcAdj
 		RTS

;--------------------------------------------------------------------- CalcAdj
CalcAdj: ; Adjust size of result to 3 bytes, adjusr EXP as you go
 		;-- test over size
 		LDA 	NR+3
 		ORA 	NR+4
 		ORA 	NR+5
 		BNE 	CalcDown
 		;-- test under size
 		;-- todo
 		;-- all good so copy it to NA (TOS)
 		lda NR+0
 		sta NA+_ML
 		lda NR+1
 		sta NA+_MH
 		lda NR+2
 		sta NA+_MU
 		lda EXP
 		sta NA+_EXP
 		lda SGN
 		sta NA+_SGN

 		RTS
;--------------------------------------------------------------------- CalcDown
CalcDown: ; down size = div 10, incr exp
 		JSR 	CalcResDR
 		INC 	EXP
 		BRA 	CalcAdj

;--------------------------------------------------------------------- CalcResDR
CalcResDR: ; Divide Result by 10, remainder in A [AY]
 		LDY 	#48 		; 6 bytes
 		LDA 	#0
 		CLC
CalcResDR1 	ROL 	a
 		CMP 	#10
 		BCC 	CalcResDR2
 		SBC 	#10
CalcResDR2 	ROL 	NR+0
 		ROL 	NR+1
 		ROL 	NR+2
 		ROL 	NR+3
 		ROL 	NR+4
 		ROL 	NR+5
 		DEY
 		BPL 	CalcResDR1
 		RTS

;--------------------------------------------------------------------- CalcResD10
CalcResD10: ; Divide value at 0,X  by 10, remainder in A [AY]
 		LDY 	#24 		; make this 24 for 24 bit version
 		LDA 	#0
 		CLC
CalcResD101 	ROL 	a
 		CMP 	#10
 		BCC 	CalcResD102
 		SBC 	#10
CalcResD102 	ROL 	_ML,X 		; NA
 		ROL 	_MH,X 		; NA+_MH
 		ROL 	_MU,X 		; NA+2  - include for 24 bit version
 		DEY
 		BPL 	CalcResD101
 		RTS



;;--------------------------------------------------------------------- CalcDivI
;CalcDivI: ; NA = NB / NA	(16 bit signed integer)
; 		JSR 	CalcNext 	; pop into NB
;; 		JSR 	CalcSign
;
;; NB / NA => NB, remainder in NR
; 		LDA 	#0 		;Initialize NR to 0
; 		STA 	NR
; 		STA 	NR+_MH
; 		LDX 	#16 		;There are 16 bits in NB
;CalcDivL1 	ASL 	NB 		;Shift hi bit of NB into NR
; 		ROL 	NB+_MH 		;(vacating the lo bit, which will be used for the quotient)
; 		ROL 	NR
; 		ROL 	NR+_MH
; 		LDA 	NR
; 		SEC 			;Trial subtraction
; 		SBC 	NA
; 		TAY
; 		LDA 	NR+_MH
; 		SBC 	NA+_MH
; 		BCC 	CalcDivL2 	;Did subtraction succeed?
; 		STA 	NR+_MH 		;If yes, save it
; 		STY 	NR
; 		INC 	NB 		;and record a 1 in the quotient
;CalcDivL2 	DEX
; 		BNE 	CalcDivL1
; 		;--
; 		;-- ** copy NB-> NA, then fix NA *************************************
; 		LDA 	NB
; 		LDX 	NB+_MH
;; 		JSR 	CalcFix
; 		JMP 	CalcSetI 	; AX -> NA
;;--------------------------------------------------------------------- CalcModI
;CalcModI: ; NA = NB % NA
; 		JSR 	CalcDivI 	; divide with remainder in NR
; 		;-- fall through to get remainder into NA
;;--------------------------------------------------------------------- CalcRemI
;CalcRemI: ; Remainder of division into NA (also in AX) - Call CalcDivI before
; 		LDA 	NR
; 		LDX 	NR+_MH
; 		JMP 	CalcSetI
;


PARAGRAPH()
;--------------------------------------------------------------------- CalcParseAX
;CalcParseAX: ; Parse value in string at AX (null terminated) -> NA
; 		STAX(Z_Rd)




;;--------------------------------------------------------------------- CalcI2F
;CalcI2F: ; Covert NA from Int to float
; 		JSR 	CalcAbsNA 	; sign in Y
; 		TYA
; 		AND 	#$80 		; Sign is top bit 1:-ve 0:+ve
; 		ORA 	#$40 		; Exp is offset $40 (so E-63 ... E+63)
; 		STA 	NA+2 		; save EXP flag in NA3
; 		RTS


;;--------------------------------------------------------------------- CvtInt
;CvtInt: ; Convert NA to integer String and write to output (CharWr)
; 		JSR 	CalcStr
; 		LDAX(NR)
; 		JMP 	CharAppendAX 	; append contents of NR to the output buffer


;===================================================================== CONSTANTS
K_PI: ; pi in unpacked form               3.1415926535
.db $D9,$EF,$2F,$FA,$00 		; 3.141593

K_E: ; e in unpacked form  		  2,7182818284590
.db $4A,$7A,$29,$FA,$00 		; 2.718282


.export Calc, CalcParse



#ifdef DBUG
;===================================================================== CALC DBUG
CalcDBugNB: ; dump NB
 		LDA 	#'B'
 		JSR 	CharOut
 		LDX 	#NB
 		JSR 	CalcDBug
 		JMP 	OutNL

CalcDBugNA: ; dump NA
 		LDA 	#'A'
 		JSR 	CharOut
 		LDX 	#NA
 		JSR 	CalcDBug


 		JMP 	OutNL


;--------------------------------------------------------------------- CalcDBug
CalcDBug: ; sends raw form of NumX to screen

 		;-- display hex form
 		LDA 	#'='
 		JSR 	CharOut
 		LDA 	_EXP,X
 		JSR 	DBugHex
 		LDA 	#':'
 		JSR 	CharOut
 		LDA 	_MU,X
 		JSR 	DBugHex
 		LDA 	_MH,X
 		JSR 	DBugHex
 		LDA 	_ML,X
 		JSR 	DBugHex
 		;--
 		LDA 	#' '
 		JSR 	CharOut
 		LDA 	_SGN,X
 		JSR 	DBugHex
 		;--
 		LDA 	#' '
 		JSR 	CharOut
 		;--
 		JSR 	CvtFloat
 		RTS

;--------------------------------------------------------------------- CalcDBugRES
CalcDBugRES: ; display result as hexvalues from high to low
 		LDX 	#RES_SZ
CalcDBugRESl 	LDA 	NR,x
 		JSR 	DBugHex 	; print as hex
 		TXA
 		AND 	#$01
 		BNE 	CalcDBugRES2
 		LDA 	#' '
 		JSR 	CharOut
CalcDBugRES2 	DEX
 		BPL 	CalcDBugRESl
 		;--
 		LDA 	#' '
 		JSR 	CharOut
 		LDA 	#'e'
 		JSR 	CharOut
 		LDA 	EXP
 		JSR 	DBugHex
 		;--
 		LDA 	#'s'
 		JSR 	CharOut
 		LDA 	SGN
 		JSR 	DBugHex
 		JMP 	OutNL


#endif



.echo MARKER - Calc
.echo " bytes checked of "

.echo $-Calc
.echo " bytes for Calc.a65\r"
#endif
#endif
