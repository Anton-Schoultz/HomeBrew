.NOLIST
; Monitor.a65
; ascii characters are in .A and the call DoMon
; to process them.
;
; 0-9,A-F   Hex digits, scrolled into MonVal
; @         copy hex value to address MonAdr
; X         execute code at MonAdr, pass low value as A
;
; ' '/','   write low value to address and incr address
; ?         display bytes at address and move it on
;
; Uses CharOut to print hex characters
; Uses CharIn to get the next character to process
; Uses UtilHex.A2Hex to convert ascii to hex
;
;Int(MonAdr)            ; Monitor address
;Int(MonVal)            ; Monitor value


; Variables required, specified using the macros:-
;   Var(name,size) name .block size
;   Short(name) name .block 1
;   Int(name) name .block 2
;   Long(name) name .block 4
;

#if ($>>8)==0
.LIST
;------------------------------- Monitor Z-Page
Int(MonAdr)             ; Monitor address
Int(MonVal)             ; Monitor value
.NOLIST
#endif


#if CODEPAGE
#ifndef _Montor
#define _Monitor
.LIST
;================================================================ MONITOR

Monitor: ; enter with character to deal with in A
            cmp #0              ; Null char, just return
            beq MonitorX
            cmp #'@'            ; '@' sets address
            beq MonSet
            cmp #'X'            ; 'X' execute code at MonAdr
            beq MonRun
            cmp #'?'            ; '?' display 16 bytes and incr adr
            beq MonShow
            cmp #','            ; ',' write low byte to memory
            beq MonWr
            cmp #' '            ; ' ' write low byte to memory
            beq MonWr
            ; try hex deigit
            jsr A2Hex
            bcs MonDigit        ; CY set if valid
MonitorX    rts


MonWr:; Write low valkue byte to memory address and bump address
            lda MonVal
            sta (MonAdr)
            inc MonAdr
            bne MonWrX
            inc MonAdr+1
MonWrX      rts


MonSet:; sets address from the value
            lda MonVal
            sta MonAdr
            lda MonVal+1
            sta MonAdr+1
            rts

MonRun:; call code at MonAdr, pass low value in A
            lda MonVal
            jmp (MonAdr)

MonDigit:; take hex value in A and shift it into the value
            ASL a
            ASL a               ; Hex digit to MSD of A
            ASL a
            ASL a
            LDX     #4          ; Shift count
MonShift:   ASL a               ; Hex digit left, MSB to carry
            ROL     MonVal      ; Rotate into LSD
            ROL     MonVal+1    ; Rotate into MSD's
            DEX                 ; Done 4 shifts?
            BNE     MonShift    ; No, loop
            RTS                 ;   Processed hex digit into H,L

MonShow: ; Display a line of data from memory (16 bytes) and bumo address
            lda     #CR
            jsr     CharOut
            lda     #LF
            jsr     CharOut
            ;-- set address to paragraph boundary $XXX0
            lda     MonAdr
            and     #$F8
            sta     MonAdr
            ;-- display address
            LDA     MonAdr+1
            JSR     PrAHex
            LDA     MonAdr
            JSR     PrAHex
            LDA     #':'
            JSR     CharOut
            ;-- display data
            LDY     #0
            LDX     #8
MonShowNxt  LDA     (MonAdr),Y      ; get data
            JSR     PrAHex          ; print as hex
            LDA     #' '            ; print a space
            JSR     CharOut
            INY                     ; next offset
            DEX                     ; count off no of bytes to show
            BNE     MonShowNxt      ; loop back if more

            ;-- bump address by 16
            lda     #8
            clc
            adc     MonAdr
            sta     MonAdr
            bcc     MonShowX
            inc     MonAdr+1
MonShowX    rts

;MonLoop: ; loop to get characters and interpret them
;           jsr CharIn          ; read character
;           beq MonLoop         ; null so loop back
;           jsr Monitor         ; process the character
;           bra MonLoop         ; loop back


;.echo $-Monitor
;.echo " bytes in Monitor.a65\r"
#endif

;=============================================================== end of Code
#endif


