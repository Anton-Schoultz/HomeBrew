.NOLIST
; Monitor.a65
; ascii characters are in .A and the call DoMon
; to process them.
;
; 0-9,A-F   Hex digits, scrolled into MonVal
; @         copy hex value to address MonAdr
; X         execute code at MonAdr, pass low value as A
;
; ' '/','   write low value to address and incr address
; ?         display bytes at address and move it on
;
; Uses CharOut to print hex characters
; Uses CharIn to get the next character to process
; Uses UtilHex.A2Hex to convert ascii to hex
;
;Int(MonAdr)            ; Monitor address
;Int(MonVal)            ; Monitor value


; Variables required, specified using the macros:-
;   Var(name,size) name .block size
;   Short(name) name .block 1
;   Int(name) name .block 2
;   Long(name) name .block 4
;

#if ($>>8)==0
.LIST
;--------------------------------------------------------------------- Monitor Z-Page
Int(MonAdr) 	; Monitor address
Int(MonVal) 	; Monitor value
.NOLIST
#endif


#if CODEPAGE==1
#ifndef _Montor
#define _Monitor
.LIST
;===================================================================== MONITOR

Monitor 	; enter with character to deal with in A
 		CMP 	#0 		; Null char, just return
 		BEQ 	MonitorX
 		CMP 	#'@'            ; '@' sets address
 		BEQ 	MonSet
 		CMP 	#'X'            ; 'X' execute code at MonAdr
 		BEQ 	MonRun
 		CMP 	#'?'            ; '?' display 16 bytes and incr adr
 		BEQ 	MonShow
 		CMP 	#','            ; ',' write low byte to memory
 		BEQ 	MonWr
 		CMP 	#' '            ; ' ' write low byte to memory
 		BEQ 	MonWr
 		;-- try hex deigit
 		JSR 	A2Hex
 		BCS 	MonDigit 	; CY set if valid
MonitorX 	RTS


MonWr 		; Write low valkue byte to memory address and bump address
 		LDA 	MonVal
 		STA 	(MonAdr)
 		INC 	MonAdr
 		BNE 	MonWrX
 		INC 	MonAdr+1
MonWrX 		RTS


MonSet 		; sets address from the value
 		LDA 	MonVal
 		STA 	MonAdr
 		LDA 	MonVal+1
 		STA 	MonAdr+1
 		RTS

MonRun 		; call code at MonAdr, pass low value in A
 		LDA 	MonVal
 		JMP 	(MonAdr)

MonDigit 	; take hex value in A and shift it into the value
 		ASL 	a
 		ASL 	a 		; Hex digit to MSD of A
 		ASL 	a
 		ASL 	a
 		LDX 	#4 		; Shift count
MonShift: 	ASL 	a 		; Hex digit left, MSB to carry
 		ROL 	MonVal 	; Rotate into LSD
 		ROL 	MonVal+1 	; Rotate into MSD's
 		DEX 			; Done 4 shifts?
 		BNE 	MonShift 	; No, loop
 		RTS 			;   Processed hex digit into H,L

MonShow 	;-- Display a line of data from memory (16 bytes) and bumo address
 		LDA 	#CR
 		JSR 	CharOut
 		LDA 	#LF
 		JSR 	CharOut
 		;-- set address to paragraph boundary $XXX0
 		LDA 	MonAdr
 		AND 	#$F8
 		STA 	MonAdr
 		;-- display address
 		LDA 	MonAdr+1
 		JSR 	PrAHex
 		LDA 	MonAdr
 		JSR 	PrAHex
 		LDA 	#':'
 		JSR 	CharOut
 		;-- display data
 		LDY 	#0
 		LDX 	#8
MonShowNxt 	LDA 	(MonAdr),Y 	; get data
 		JSR 	PrAHex 	; print as hex
 		LDA 	#' '            ; print a space
 		JSR 	CharOut
 		INY 			; next offset
 		DEX 			; count off no of bytes to show
 		BNE 	MonShowNxt 	; loop back if more

 		;-- bump address by 16
 		LDA 	#8
 		CLC
 		ADC 	MonAdr
 		STA 	MonAdr
 		BCC 	MonShowX
 		INC 	MonAdr+1
MonShowX 	RTS

;MonLoop: ; loop to get characters and interpret them
;           jsr CharIn          ; read character
;           beq MonLoop         ; null so loop back
;           jsr Monitor         ; process the character
;           bra MonLoop         ; loop back


;.echo $-Monitor
;.echo " bytes in Monitor.a65\r"
#endif

;===================================================================== END OF CODE
#endif


